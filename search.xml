<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试</title>
      <link href="/2023/02/16/embsky/%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/02/16/embsky/%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/images/%E5%B0%B1%E4%B8%9A%E6%8C%87%E5%AF%BC%E8%AF%BE--%E7%AE%80%E5%8E%86%E5%88%B6%E4%BD%9C--20211119.pdf">点击浏览 就业指导课–简历制作–20211119.pdf</a></p><p><a href="/images/%E4%BA%BA%E4%BA%8B%E8%AF%9D%E6%9C%AF.pdf">点击浏览 人事话术.pdf</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶段测试一</title>
      <link href="/2023/02/16/embsky/%E6%B5%8B%E8%AF%95/%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95%E4%B8%80/"/>
      <url>/2023/02/16/embsky/%E6%B5%8B%E8%AF%95/%E9%98%B6%E6%AE%B5%E6%B5%8B%E8%AF%95%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>阶段测试一</p><p>1.本套测试题内容为各大公司中<strong>真实的测试题</strong>，并且这是大家第一次做希望大家认真对待，没有什么好嘱咐的就是<strong>仔细仔细再仔细</strong>。<br>2.做题时题目的内容可能会引起某些童鞋的身体不适，请<strong>自备风油精</strong>。<br>3.还有就是请自信你是可以的，<strong>士别三日当刮目相待</strong>。<br>4.我要的不是用这套题打败你，而是用这套题告诉你以后的道路有多少坑，<strong>我们帮你渡过这些</strong>。<br>5.不要怕被击倒，所有的坑都会使你更加强大，我要的是<strong>你要对自己自信</strong>。</p><p>1. 为判断字符变量c的值不是数字也不是字母时，应采用下述表达式（D）？</p><p><a href="javascript:;"></a></p><p>A、c&lt;&#x3D;48 || c&gt;&#x3D;57 &amp;&amp; c&lt;&#x3D;65 || c&gt;&#x3D;90 &amp;&amp; c&lt;&#x3D;97 || c&gt;&#x3D;122</p><p><a href="javascript:;"></a></p><p>B、!(c&lt;&#x3D;48 || c&gt;&#x3D;57 &amp;&amp; c&lt;&#x3D;65 || c&gt;&#x3D;90 &amp;&amp; c&lt;&#x3D;97 || c&gt;&#x3D;122)</p><p><a href="javascript:;"></a></p><p>C、c&gt;&#x3D;48 &amp;&amp; c&lt;&#x3D;57 || c&gt;&#x3D;65 &amp;&amp; c&lt;&#x3D;90 || c&gt;&#x3D;97 &amp;&amp; c&lt;&#x3D;122</p><p><a href="javascript:;"></a></p><p>D、!(c&gt;&#x3D;48 &amp;&amp; c&lt;&#x3D;57 || c&gt;&#x3D;65 &amp;&amp; c&lt;&#x3D;90 || c&gt;&#x3D;97 &amp;&amp; c&lt;&#x3D;122)</p><p>2. 一个C语言的源程序中（A）？</p><p><a href="javascript:;"></a></p><p>A、必须有一个主函数</p><p><a href="javascript:;"></a></p><p>B、可以有多个主函数</p><p><a href="javascript:;"></a></p><p>C、必须有除主函数外其它函数</p><p><a href="javascript:;"></a></p><p>D、可以没有主函数</p><p>3. 以下不能定义为用户标识符的是（D）？</p><p><a href="javascript:;"></a></p><p>A、itoa</p><p><a href="javascript:;"></a></p><p>B、Void</p><p><a href="javascript:;"></a></p><p>C、_3com</p><p><a href="javascript:;"></a></p><p>D、int</p><p>4. 若以下选项中的变量已正确定义，则正确的赋值语句是（C）？</p><p><a href="javascript:;"></a></p><p>A、x1&#x3D;26.8%3;</p><p><a href="javascript:;"></a></p><p>B、1+2&#x3D;x2;</p><p><a href="javascript:;"></a></p><p>C、x3&#x3D;0x12;</p><p><a href="javascript:;"></a></p><p>D、x4&#x3D;1+2&#x3D;3;</p><p>5. 以下叙述中正确的是（C）？</p><p><a href="javascript:;"></a></p><p>A、C语言是低级编程语言</p><p><a href="javascript:;"></a></p><p>B、C语言可以不用编译就能被计算机识别执行</p><p><a href="javascript:;"></a></p><p>C、C语言以接近英语国家的自然语言和数学语言作为语言的表达形式</p><p><a href="javascript:;"></a></p><p>D、C语言出现的最晚，具有其他语言的一切优点</p><p>6. C语言中用于结构化程序设计的3种基本结构是（A）？</p><p><a href="javascript:;"></a></p><p>A、顺序结构、选择结构、循环结构</p><p><a href="javascript:;"></a></p><p>B、if、switch、break</p><p><a href="javascript:;"></a></p><p>C、for、while、do-while</p><p><a href="javascript:;"></a></p><p>D、if、for、continue</p><p>7. 在while（!x）语句中的!x与下面条件表达式等价的是（D）？</p><p><a href="javascript:;"></a></p><p>A、x!&#x3D;0</p><p><a href="javascript:;"></a></p><p>B、x&#x3D;&#x3D;1</p><p><a href="javascript:;"></a></p><p>C、x&#x3D;&#x3D;2</p><p><a href="javascript:;"></a></p><p>D、x&#x3D;&#x3D;0</p><p>8. 有以下程序：<br>int i&#x3D;1,j&#x3D;1,k&#x3D;2;<br>if((j++||k++)&amp;&amp;i++)<br>    printf(“%d,%d,%d\n”,i,j,k);<br>执行后的输出结果是（C）？</p><p><a href="javascript:;"></a></p><p>A、1,1,2</p><p><a href="javascript:;"></a></p><p>B、2,2,1</p><p><a href="javascript:;"></a></p><p>C、2,2,2</p><p><a href="javascript:;"></a></p><p>D、2,2,3</p><p>9. 有以下程序：<br>int i,s&#x3D;0;<br>for(i&#x3D;1;i&lt;10;i+&#x3D;2)<br>    s+&#x3D;i+1;<br>printf(“%d\n”,s);<br>程序执行后的输出结果是（D）？</p><p><a href="javascript:;"></a></p><p>A、自然数1～9的累加和</p><p><a href="javascript:;"></a></p><p>B、自然数1～10的累加和</p><p><a href="javascript:;"></a></p><p>C、自然数1～9中奇数之和</p><p><a href="javascript:;"></a></p><p>D、自然数1～10中偶数之和</p><p>10. 下列运算表达式中哪个选项的含义不同（B）？</p><p><a href="javascript:;"></a></p><p>A、a+&#x3D;1;</p><p><a href="javascript:;"></a></p><p>B、a+1;</p><p><a href="javascript:;"></a></p><p>C、a++;</p><p><a href="javascript:;"></a></p><p>D、++a;</p><p>11. 以下说法正确的是（C）？</p><p><a href="javascript:;"></a></p><p>A、C语言程序总是从第一个函数开始执行</p><p><a href="javascript:;"></a></p><p>B、在C语言程序中，要调用函数必须在main()函数中定义</p><p><a href="javascript:;"></a></p><p>C、C语言程序总是从main()函数开始执行</p><p><a href="javascript:;"></a></p><p>D、C语言程序中的main()函数必须放在程序的开始部分</p><p>12. C语言中不合法的字符串常量是（B）？</p><p><a href="javascript:;"></a></p><p>A、”\121”</p><p><a href="javascript:;"></a></p><p>B、’y’</p><p><a href="javascript:;"></a></p><p>C、”\n\n”</p><p><a href="javascript:;"></a></p><p>D、”ABCD\x6d”</p><p>13. 下述关于break语句的描述中，（C）是不正确的。</p><p><a href="javascript:;"></a></p><p>A、break语句可用于循环体内，它将退出该循环</p><p><a href="javascript:;"></a></p><p>B、break语句可用于switch语句中，它将退出switch语句</p><p><a href="javascript:;"></a></p><p>C、break语句可用于if体内，它将退出if语句</p><p><a href="javascript:;"></a></p><p>D、break语句在一个循环体内可以出现多次</p><p>14. 下面有关for循环的正确描述是（D）。</p><p><a href="javascript:;"></a></p><p>A、for循环只能用于循环次数己经确定的情况</p><p><a href="javascript:;"></a></p><p>B、for循环是先执行循环体语句，后判定表达式</p><p><a href="javascript:;"></a></p><p>C、在for循环中，不能用break语句跳出循环体</p><p><a href="javascript:;"></a></p><p>D、for循环体语句中，可以包含多条语句，但要用花括号括起来</p><p>15. 如执行以下语句,for (I&#x3D;1;I&lt;&#x3D;100;I++){sum&#x3D;sum+I;}循环结束后I值是（C）。</p><p><a href="javascript:;"></a></p><p>A、99</p><p><a href="javascript:;"></a></p><p>B、100</p><p><a href="javascript:;"></a></p><p>C、101</p><p><a href="javascript:;"></a></p><p>D、102</p><p>16. 在下面的函数声明中运行的结果是（AD）？<br>int i &#x3D; 10, j &#x3D; 10;  </p><p>while(–i &amp;&amp; j–);  </p><p>printf(“i &#x3D; %d j &#x3D; %d\n”, i, j);【多选题】</p><p><a href="javascript:;"></a></p><p>A、i &#x3D; 0</p><p><a href="javascript:;"></a></p><p>B、i &#x3D; 1</p><p><a href="javascript:;"></a></p><p>C、j &#x3D; 0</p><p><a href="javascript:;"></a></p><p>D、j &#x3D; 1</p><p>17. 在下列定义中，哪种定义符合C语言标准（ACD）？【多选题】</p><p><a href="javascript:;"></a></p><p>A、_A</p><p><a href="javascript:;"></a></p><p>B、case</p><p><a href="javascript:;"></a></p><p>C、_1A</p><p><a href="javascript:;"></a></p><p>D、Int</p><p>18. 若有以下语句,则求偶数的表达式正确的是（BCD）？【多选题】</p><p><a href="javascript:;"></a></p><p>A、x % 2 !&#x3D; 0</p><p><a href="javascript:;"></a></p><p>B、!(x%2)</p><p><a href="javascript:;"></a></p><p>C、x%2&#x3D;&#x3D;0</p><p><a href="javascript:;"></a></p><p>D、!(x&amp;0x01)</p><p>19. 以下描述正确的选项是（ABD）？【多选题】</p><p><a href="javascript:;"></a></p><p>A、十进制整数13的八进制是15</p><p><a href="javascript:;"></a></p><p>B、十六进制数字0x14的八进制是24</p><p><a href="javascript:;"></a></p><p>C、二进制1100100的八进制是145</p><p><a href="javascript:;"></a></p><p>D、八进制数字64的十进制数是52</p><p>20. 若有下列程序<br>int a &#x3D; 10, b &#x3D; 20;  </p><p>while(a–)<br>{<br>b -&#x3D; –a;<br>}  </p><p>printf(“a &#x3D; %d b &#x3D; %d\n”, a ,b);则执行结果是（AD）？【多选题】</p><p><a href="javascript:;"></a></p><p>A、a &#x3D; -1</p><p><a href="javascript:;"></a></p><p>B、a &#x3D; 0</p><p><a href="javascript:;"></a></p><p>C、b &#x3D; -1</p><p><a href="javascript:;"></a></p><p>D、b &#x3D; 0</p><p>21. C语言描述“x和y都大于或等于z”的表达式是：</p><p>x &gt;&#x3D; z &amp;&amp; y &gt;&#x3D; z</p><p>22. sizeof关键字是一个？</p><p>运算符</p><p>23. 专门用于测试数据类型所占用的字节数的运算符是？</p><p>sizeof</p><p>24. C语言用来实现循环的结构化语句除了for、while、do…while以外还有哪个关键字？</p><p>goto</p><p>25. 若x和n都是int型变量，且x和n的初值都是6，则计算表达式x+&#x3D;n++后，x的值为？</p><p>12</p><p>26. 若x和n都是int型变量，且x和n的初值都是7，则计算表达式x+&#x3D;n++后，n的值为？</p><p>8</p><p>27. 在C语言中唯一的一个三目运算符是（写出中文名字）</p><p>条件运算符</p><p>28. char ch &#x3D; ‘a’ + ‘8’ - ‘3’；printf（“%d”, ch）；打印出的结果是多少？</p><p>102</p><p>29. int a，b，d &#x3D; 241；a &#x3D; d &#x2F; 100 % 9；b &#x3D; (-1)；printf(“%d，%d\n”，b，a)；程序的输出结果是多少？</p><p>-1,2</p><p>30. 已知有定义char c &#x3D; -100;请表示在内存中是如何存储的c变量？</p><p>10011100</p><p>31. 设x为int型变量,则执行以下语句后x &#x3D; 10；x +&#x3D; x -&#x3D; x - x；x的值为？</p><p>20</p><p>32. 已知int x&#x3D;5，y&#x3D;5，z&#x3D;5；执行语句x %&#x3D; y + z；之后x的值是？</p><p>5</p><p>33. 下列程序执行后的输出结果是int x &#x3D; ‘f’；printf(“%d\n”，’A’+ ( x - ‘a’ +1))；</p><p>71</p><p>34. 有以下程序int x &#x3D; 0，y &#x3D; 0，z &#x3D; 0；++x || ++y || ++z；printf(“%d %d %d\n”，x，y，z)；执行后输出结果是</p><p>1 0 0</p><p>35. 已知int i &#x3D; 10；执行表达式i &gt;&#x3D; 20 - i；之后，i的值是？</p><p>10</p><p>36. 已知int x &#x3D; 1，y；执行下述语句后打印输出的是？y &#x3D; (++x &gt; 5) &amp;&amp; (++x &lt; 10)；printf（“x &#x3D; %d y &#x3D; %d\n”, x, y）；</p><p>x &#x3D; 2, y &#x3D; 0</p><p>37. int x &#x3D; 0，y &#x3D; 1；执行表达式(!x || y–)之后再执行printf（“x &#x3D; %d y &#x3D; %d\n”, x, y）；打印输出的结果是？</p><p>x &#x3D; 0, y &#x3D; 1</p><p>38. 有以下程序int a &#x3D; -1，b &#x3D; 1；if((++a &lt; 0) &amp;&amp; !(b– &lt;&#x3D; 0)) printf(“%d %d\n”，a，b)；else printf(“%d %d\n”，b，a)；执行后输出结果是？</p><p>1 0</p><p>39. 有以下程序<br>int m &#x3D; 5；<br>if(m++ &gt; 5)<br>    printf(“1 %d\n”，m)；<br>else<br>     printf(“2 %d\n”，m–)；<br>执行后输出结果是？</p><p>2 6</p><p>40. 以下程序的输出结果是i<br>nt a &#x3D; 0，b &#x3D; 1，c &#x3D; 0，d&#x3D;20；<br>if(a)<br>    d &#x3D; d - 10；<br>else if(!b)<br>    if(!c)<br>        d &#x3D; 15；<br>    else<br>        d &#x3D; 25；<br>printf(“d &#x3D; %d\n”，d)；</p><p>答案：20</p><p>41. C语言的变量必须先定义再使用。对</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>42. _ya是不合法的C语言标识符。错</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>43. C语言是一种结构化程序设计语言。对</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>44. 在C语言中，数据类型的长度排列顺序为:char&lt;int&lt;long。对</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>45. while语句构成的循环不能用其他语句构成的循环来代替。错</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>46. C语言的数组是在内存中分配连续的存储单元。对</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>47. 运算符&#x2F;和%要求参加运算的对象均为整型变量。错</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>48. C语言认为名为Student和student的变量是不同变量。对</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>49. do-while语句构成的循环只能用break语句退出。错</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>50. int类型的变量可以存储浮点类型的数据。错</p><p><a href="javascript:;"></a></p><p>对</p><p><a href="javascript:;"></a></p><p>错</p><p>51. 大家都知道在linux下一切皆文件，那么在linux中文件类型都有哪些？请尽可能的详细描述都有哪些文件？</p><p>普通文件 链接文件 目录文件 管道文件 网络套接字文件 字符设备文件 块设备文件</p><p>52. 请描述suid sgid 和 sticky的特点</p><p>给命令加权限，所有用户执行命令以所有者执行，sgid修改文件所属组，sticky使用户在目录中只能删除自己创建的文件，不能删除其它文件</p><p>53. 在无符号16位的环境中计算表达式0xF8 &lt;&lt; 3得到的结果通过不同的进制表示（二进制 八进制 十进制 十六进制）</p><p>11111000000 3700 1984 7c0</p><p>54. 已知有一32bit的寄存器GPIOA_BASE，如果想要把该寄存器的第18 19位清零其他位保持不变如何操作？</p><p>GPIOA_BASE &amp;&#x3D; ~(3 &lt;&lt; 18);</p><p>55. 已知有一32bit的寄存器GPIOA_BASE，如果想要把该寄存器的第15-12位赋值成1010其他位保持不变应该如何操作？</p><p>GPIOA_BASE &amp;&#x3D; ~(15 &lt;&lt; 12);&#x2F;&#x2F;清零<br>GPIOA_BASE |&#x3D; (10 &lt;&lt; 12);</p><p>56. 设计一套程序求1000000-1001000以内的所有素数</p><p>#include &lt;stdio.h&gt;<br>int main (void)<br>{<br>    int i &#x3D; 0, j &#x3D; 0;</p><pre><code>for(i = 1000000; i &lt; 1001000; i++)&#123;    for(j = 2; j &lt; i; j++)    &#123;        if(i % j == 0)        &#123;            break;        &#125;    &#125;    if(i == j)    &#123;        printf (&quot;%d\n&quot;,i);    &#125;&#125;return 0;</code></pre><p>}</p><p>57. 假设有一个池塘，里面有无穷多的水。现在有2个空水壶，容积分别为5升和6升，如何只用这2个空水壶从池塘里取出3升的水。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数指针操作实例</title>
      <link href="/2023/02/16/embsky/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/"/>
      <url>/2023/02/16/embsky/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一种用法"><a href="#第一种用法" class="headerlink" title="第一种用法"></a>第一种用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> (*pfun)(<span class="type">int</span> data);</span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;get data:%d\n&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">pfun = myfun;</span><br><span class="line">(*pfun)(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二种用法"><a href="#第二种用法" class="headerlink" title="第二种用法"></a>第二种用法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*pfun)</span><span class="params">(<span class="type">int</span> data)</span>;</span><br><span class="line"><span class="comment">/*typedef的功能是定义新的类型。第一句就是定义了一种 pfun 的类型，并定义这种类型为指向某种函数的指针，这种函数以一个 int 为参数并返回 void 类型。*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myfun</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;get data:%d\n&quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">pfun p= myfun;      <span class="comment">//函数指针指向执行函数的地址</span></span><br><span class="line">p(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 函数指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_22day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_22day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_22day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-15<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-物联网云服务器"><a href="#一-物联网云服务器" class="headerlink" title="一.物联网云服务器"></a>一.物联网云服务器</h1><pre><code>    短距无线通信的模块-&gt;nRF模块、WiFi    华为物联网中-&gt;云、管、端    物联网云服务器        YeeLink出现比较早的物联网云服务器        ESLink东方瑞通自己的物联网云服务器            企业用户(各大公司、医院、高校)        Ocean Connect华为物联网云服务器        小米IoT小米物联网云服务器        AIoT阿里物联网云服务器        百度天工百度物联网云服务器         移动物联网云服务器        ...    ESLink</code></pre><p>ESLink<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/23day/ESLink.png"></p><p><a href="images/2022-8-15_STM32/2022-8-15_STM32/note/23day/mqtt.apk">点击下载 mqtt.apk</a></p><pre><code>    私有的物联网云服务器    iot.embsky.com</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_阎同学的窗口看门狗</title>
      <link href="/2023/02/16/embsky/STM32/stm32_%E9%98%8E%E5%90%8C%E5%AD%A6%E7%9A%84%E7%AA%97%E5%8F%A3%E7%9C%8B%E9%97%A8%E7%8B%97/"/>
      <url>/2023/02/16/embsky/STM32/stm32_%E9%98%8E%E5%90%8C%E5%AD%A6%E7%9A%84%E7%AA%97%E5%8F%A3%E7%9C%8B%E9%97%A8%E7%8B%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><pre><code>除非递减计数器的值在T6位变成0前被刷新，看门狗电路在达到预置的时间周期时，会产生一个MCU复位。在递减计数器达到窗口寄存器数值之前，如果7位的递减计数器数值(在控制寄存器中)被刷新， 那么也将产生一个MCU复位。这表明递减计数器需要在一个有限的时间窗口中被刷新========================================================递减计数器T6位变成0前刷新——当递减计数器的值小于 0x40产生复位。递减计数器达到窗口寄存器数值之前不能被刷新如果启动了看门狗并且允许中断，当递减计数器等于0x40时产生早期唤醒中断(EWI)，    它可以被用于重装载计数器以避免WWDG复位========================================================如果看门狗被启动(WWDG_CR寄存器中的WDGA位被置’1’)， 并且当7位(T[6:0])递减计数器从0x40翻转到0x3F(T6位清零)时，则产生一个复位。如果软件在计数器值大于窗口寄存器中的数值时重新装载计数器，将产生一个复位。==========================================================WWDG_CR寄存器中的WDGA位被置’1’启动看门狗递减计数器从0100 0000--&gt;0011 1111会产生一个复位计数器值大于窗口寄存器中的数值时重新装载计数器会产生一个复位必须定期地写入WWDG_CR寄存器,必须在1111 1111(0XFF)和1100 0000(0XC0)之间只有当计数器值小于窗口寄存器的值时，才能进行写操作。==========================================================递减计数器处于自由运行状态，即使看门狗被禁止，递减计数器仍继续递减计数。当看门狗被启用时，T6位必须被设置，以防止立即产生一个复位。T[5:0]位包含了看门狗产生复位之前的计时数目；复位前的延时时间在一个最小值和一个最大值之间变化，这是因为写入WWDG_CR寄存器时，预分频值是未知的。配置寄存器(WWDG_CFR) 中包含窗口的上限值：要避免产生复位，递减计数器必须在其值小于窗口寄存器的数值并且大于0x3F时被重新装载，图155描述了窗口寄存器的工作过程。另一个重装载计数器的方法是利用早期唤醒中断(EWI)。设置WWDG_CFR寄存器中的WEI位开启该中断。当递减计数器到达0x40时，则产生此中断，相应的中断服务程序(ISR)可以用来加载计数器以防止WWDG复位。在WWDG_SR寄存器中写’0’可以清除该中断。注： T6位可以被用来产生一个软件复位(WDGA位被置位，T6位清零)==========================================================看门狗被启用时，T6位必须被设置寄存器(WWDG_CFR) 中包含窗口的上限值递减计数器必须在    其值小于窗口寄存器的数值并且大于0x3F时被重新装载WWDG_CFR寄存器中的WEI位开启该中断，到达0x40时产生中断(ISR)可以用来加载计数器    在WWDG_SR寄存器中写’0’可以清除该中断。控制寄存器(WWDG_CR)     0~7位有效    7号位控制看门狗的开启与关闭        0：禁止看门狗        1：启用看门狗    6号位至0时产生中断配置寄存器(WWDG_CFR)     0~9位有效    9: 提前唤醒中断        此位若置1，则当计数器值达到40h，即产生中断。        此中断只能由硬件在复位后清除。    7、8；时基预分频器的时基可根据如下修改：        00: CK计时器时钟(PCLK1除以4096)除以1         01: CK计时器时钟(PCLK1除以4096)除以2         10: CK计时器时钟(PCLK1除以4096)除以4         11: CK计时器时钟(PCLK1除以4096)除以8     0~6: 7位窗口值        这些位包含了用来与递减计数器进行比较用的窗口值。状态寄存器(WWDG_SR)     0位有效    0: 提前唤醒中断标志        当计数器值达到40h时，此位由硬件置1。        它必须通过软件写’0’来清除。对此位写’1’无效。        若中断未被使能，此位也会被置’1’。在总线图里知WWDG的时钟频率位36MHz</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_18day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_18day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_18day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-7<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><pre><code>一.RTC    1.RTC的简介    RTC叫做Real Time Clock,也叫做实时时钟    在市面上的芯片中,有些芯片内部集成了RTC的外设功能,有些芯片没有集成    我们使用的STM32F103RBT6芯片中集成了RTC的外设功能    (STM32F407ZGT6芯片中集成了RTC的外设功能)        RTC在STM32F103RBT6芯片中属于定时器的外设资源(属于其他定时器)    RTC可以为程序员提供万年历的功能(可以提供年 月 日 星期 时 分 秒的数据)        既然RTC属于定时器的资源    无论何种定时器,都是由 时钟频率 和 计数值 决定定时长短的    2.查找RTC的时钟频率    1)通过时钟树的分析可以了解到        可以为RTC提供时钟频率的时钟源一共有三种        (LSE LSI 和 HSE/128)        但是已知LSI是给独立看门狗(IWDG)提供时钟频率的        HSE是给锁相环(PLL)提供基础时钟频率的        所以会选择LSE为RTC提供时钟频率的    2)通过芯片手册中有关RTC的介绍        RTC选择了有LSE提供时钟频率,会把LSE先进过分频再进行使用        需要经过0x7FFF(32767)分频        ---------------------------------------------------------------        问题 : 为什么不是32768分频        因为硬件默认会把分频系数加1,目的是为了防止程序员写0分频        ---------------------------------------------------------------        3.查找RTC的计数值范围    1)通过芯片手册中有关RTC的介绍        RTC使用了两个16位的寄存器来存储RTC的计数值        存储的计数值是从当前时间到基准时间的秒数        ----------------------------------------------------        例如 : 当前时间是2022年9月7日 星期三 10:05:20        RTC的计数值是            从1970年1月1日 00:00:00到当前时间的秒数        从1970年 - 2021年所有的秒数(平年 闰年)        从2022年1月 - 2022年8月所有的秒数(平年 闰年)        2022年9月1日 - 2022年9月6日所有的秒数        2022年9月7日00时 - 2022年9月7日10时所有的秒数        2022年9月7日10时0分 - 2022年9月7日10时5分所有的秒数        2022年9月7日10时5分0秒-2022年9月7日10时5分20秒所有秒数        ----------------------------------------------------        STM32F103的官方固件只提供了        RTC_SetCounter : 设置计数值(秒数)            需要先把当前时间到基准时间的秒数求出        RTC_GetCounter : 获取计数值(秒数)            需要把读出的计数值根据基准时间转换成年月日时分秒        ----------------------------------------------------        struct time_st        &#123;            int Y;            int M;            int D;            int W;            int h;            int m;            int s;        &#125;;    4)通过芯片的手册了解RTC        为了保证RTC在主设备断电的情况下仍然可以正常工作            需要连接纽扣电池        问题1.怎么判断是第一次操作RTC?        可以在备份寄存器中存储特定的数据进行判断============================作业1.把今天讲过的内容完整的复习一遍2.把STM32F407开发板的RTC搞定3.推进STM32F407开发板的项目工程4.推进最终项目============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_20day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_20day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_20day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-9<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>开发板俯视图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/01.%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BF%AF%E8%A7%86%E5%9B%BE.PNG"></p><p>Nrf通信框架<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/02.Nrf%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6.png"></p><p>Nrf硬件图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/03Nrf%E7%A1%AC%E4%BB%B6%E5%9B%BE.png"></p><p>Nrf的工作模式<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/04.Nrf%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.png"></p><p>SPI协议<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/05.SPI%E5%8D%8F%E8%AE%AE.png"></p><p>Nrf硬件原理图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/06.Nrf%E7%A1%AC%E4%BB%B6%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><p>带边缘计算的项目框架<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/20day/%E5%B8%A6%E8%BE%B9%E7%BC%98%E8%AE%A1%E7%AE%97%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_21day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_21day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_21day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-13<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    短距无线通信模块-&gt;nRF24L01    接口-&gt;SPI接口    SPI一共有4条线    (CSN&lt;片选&gt;\SCK&lt;时钟线&gt;\MOSI&lt;主出从入&gt;\MISO&lt;主入从出&gt;)    全双工的工作模式    nRF可以实现一对一的通信,也可以实现一对多的通信    最多是一对六的通信-&gt;有6个接收数据的通道    在不同的频道下可以实现多对多的通信</code></pre><h1 id="二-短距无线通信模块"><a href="#二-短距无线通信模块" class="headerlink" title="二.短距无线通信模块"></a>二.短距无线通信模块</h1><pre><code>    WiFi模块-&gt;使用的芯片型号是ESP8266(是乐鑫公司的芯片)    本身也是一个32bit的单片机芯片    只不过乐鑫公司在生产ESP8266芯片时在内部已经烧写了TCP/UDP的协议栈    ESP8266的接口是USART/UART的接口需要连接到我们开发板的USART2上    USART2_TXPA2    USART2_RXPA3需要通过STM32的USART2为ESP8266模块发送AT指令(WiFi\GPRS\NB-IoT)</code></pre><p>AT指令集<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/21day/01AT%E6%8C%87%E4%BB%A4%E9%9B%8601.png"></p><p><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/21day/01AT%E6%8C%87%E4%BB%A4%E9%9B%8602.png"></p><p>AT指令使用示例<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/21day/02AT%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.png"></p><h2 id="单连接-TCP-Client"><a href="#单连接-TCP-Client" class="headerlink" title="单连接 TCP Client"></a>单连接 TCP Client</h2><p>ESP8266单连接<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/21day/03ESP8266%E5%8D%95%E8%BF%9E%E6%8E%A501.png"></p><p><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/21day/03ESP8266%E5%8D%95%E8%BF%9E%E6%8E%A502.png"></p><pre><code>        1.设置WiFi模式            &quot;AT+CWMODE=1\r\n&quot;            需要接收&quot;OK&quot;        如果设置成单连接 TCP Client可以修改成=1            注意 :            =1softAP模式            =2station模式            =3softAP+station模式                2.连接路由            &quot;AT+CWJAP=&quot;SSID&quot;,&quot;password&quot;\r\n&quot;            需要接收&quot;OK&quot;            注意 :            1)            SSID是路由器的名称            password是路由器的密码            2)            路由器的名称不能是中文,也不能有空格            尽量是大小写英文字母            3)            路由器的密码必须要有            4)            在小范围之内WiFi信号会有干扰,有可能会影响实验        3.查询设备 IP 地址            &quot;AT+CIFSR\r\n&quot;            注意 :            1)只需要有查询的指令发送即可,不需要接收查询的结果        4.ESP8266 作为 client 连接到 TCP server            &quot;AT+CIPSTART=&quot;TCP&quot;,&quot;IP&quot;,PORT\r\n&quot;            需要接收&quot;OK&quot;            注意 :            1)            IP指的是Server端的IP地址(PC机获取的IP)            PORT指的是Server端的端口号(可以自己设置)        5.发送数据            &quot;AT+CIPSEND=4\r\n&quot;            首先需要接收&quot;OK&quot;            然后需要接收&#39;&gt;&#39;            在&#39;&gt;&#39;之后写上你要发送的数据            发送完数据之后,需要接收&quot;SEND OK&quot;            注意 :            1)            =4代表将来要发送4bytes数据(不算&#39;\0&#39;)            2)            如果算上&#39;\0&#39;            =6&quot;Hello&quot;会造成忙等        6.接收数据            &quot;+IPD,n:xxxxxxxxxx&quot;            注意 :             1)            n代表的是接收到数据的字节数            2)            xxxx代表的是接收到的数据        7.断开 TCP 连接            &quot;AT+CIPCLOSE\r\n&quot;            注意 :            1)只需要发送断开连接的指令,不需要接收应答</code></pre><h2 id="透传模式"><a href="#透传模式" class="headerlink" title="透传模式"></a>透传模式</h2><p>ESP8266透传<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/21day/04ESP8266%E9%80%8F%E4%BC%A0.png"></p><pre><code>        1.在连接完TCP Server端之后需要使能透传模式            &quot;AT+CIPMODE=1\r\n&quot;            需要接收&quot;OK&quot;                2.发送数据            &quot;AT+CIPSEND\r\n&quot;            首先需要接收&quot;OK&quot;            然后需要接收&#39;&gt;&#39;            在&#39;&gt;&#39;之后写上你要发送的数据            注意 :             1)在透传模式下不需要指定发送数据的字节数                3.退出发送数据            &quot;+++&quot;            代表要退出发送数据        4.断开 TCP 连接            &quot;AT+CIPCLOSE\r\n&quot;            注意 :            1)只需要发送断开连接的指令,不需要接收应答=============================任务1.把STM32F103开发板上的TCP client连接调通2.组内找同学把STM32F103开发板上的固定远端的UDP通信调通3.组内找同学把STM32F407开发板上的TCP client连接调通=============================</code></pre><h1 id="esp8266-h"><a href="#esp8266-h" class="headerlink" title="esp8266.h"></a>esp8266.h</h1><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ESP8266_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ESP8266_H</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ESP8266模块是WIFI无线通讯模块,该模块是串口接口</span></span><br><span class="line"><span class="comment">连接到了我们开发板上的USART2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x_conf.h&quot;</span><span class="comment">//包含该头文件所有的外设头文件均已包含</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*wifi_recv_handler)</span><span class="params">(<span class="type">char</span> *buf, <span class="type">int</span> len)</span>;<span class="comment">//通过typedef定义函数指针类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">set_wifi_recv_handler</span><span class="params">(wifi_recv_handler h)</span>;<span class="comment">//设置wifi接收到数据的回调函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">esp8266_init</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//初始化的函数(初始化串口)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">esp8266_link_wifi</span><span class="params">(<span class="type">char</span> *ssid, <span class="type">char</span> *passwd)</span>;<span class="comment">//连接路由(需要路由的名称和路由的密码)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">esp8266_connect</span><span class="params">(<span class="type">char</span> *ip, <span class="type">char</span> *port)</span>;<span class="comment">//连接TCP server</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">esp8266_disconnect</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//断开TCP连接</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">esp8266_send</span><span class="params">(<span class="type">char</span> *msg, <span class="type">char</span> *len)</span>;<span class="comment">//发送数据</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">dataHandler</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> c)</span>;<span class="comment">//处理接收到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h1 id="esp8966-c"><a href="#esp8966-c" class="headerlink" title="esp8966.c"></a>esp8966.c</h1><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp8266.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usart2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> O_F1<span class="comment">//O的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K_F2<span class="comment">//K的状态</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> flag = O_F;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> ok_flag = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> len = <span class="number">0</span>;<span class="comment">//保存数据长度的整数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&quot;+IPD,13:1234567890ABC&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD_S 0<span class="comment">//+的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I_S1<span class="comment">//I的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> P_S2<span class="comment">//P的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D_S3<span class="comment">//D的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> H_S4<span class="comment">//,的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEN_S5<span class="comment">//长度的状态</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_S6<span class="comment">//数据的状态</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> data_flag = ADD_S;<span class="comment">//默认是+的状态</span></span><br><span class="line">wifi_recv_handler wifi_handler = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_wifi_recv_handler</span><span class="params">(wifi_recv_handler h)</span><span class="comment">//设置wifi接收到数据的回调函数</span></span><br><span class="line">&#123;</span><br><span class="line">wifi_handler = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dataHandler</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> c)</span><span class="comment">//处理接收到的数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> len_buf[<span class="number">5</span>];<span class="comment">//接收到数据的字节数</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> data_buf[<span class="number">512</span>];<span class="comment">//存储接收到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(data_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> ADD_S :</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">data_flag = I_S;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> I_S :</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">data_flag = P_S;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">data_flag = ADD_S;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> P_S :</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">data_flag = D_S;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">data_flag = ADD_S;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> D_S :</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">data_flag = H_S;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">data_flag = ADD_S;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> H_S :</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">data_flag = LEN_S;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">data_flag = ADD_S;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> LEN_S :<span class="comment">//+IPD,13:1234567890ABC</span></span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">len_buf[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">len = atoi(len_buf);</span><br><span class="line">data_flag = DATA_S;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">len_buf[i] = c;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> DATA_S:</span><br><span class="line">data_buf[i] = c;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i == len)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">data_flag = ADD_S;</span><br><span class="line"><span class="keyword">if</span>(wifi_handler)</span><br><span class="line">wifi_handler(data_buf, len);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">ok_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ok_flag == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> O_F : </span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">flag = K_F;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> K_F : </span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;K&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = O_F;</span><br><span class="line">ok_flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = O_F;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_init</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//初始化的函数(初始化串口)</span></span><br><span class="line">&#123;</span><br><span class="line">usart_2_init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_link_wifi</span><span class="params">(<span class="type">char</span> *ssid, <span class="type">char</span> *passwd)</span><span class="comment">//连接路由(需要路由的名称和路由的密码)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//AT+RST\r\n 重启无线模块</span></span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+RST\r\n&quot;</span>);</span><br><span class="line">delay_ms(<span class="number">2000</span>);<span class="comment">//重启之后延时两秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AT+CWMODE=1\r\n 选择wifi模式</span></span><br><span class="line">ok_flag = <span class="number">0</span>;</span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+CWMODE=1\r\n&quot;</span>);<span class="comment">//选择模式</span></span><br><span class="line"><span class="keyword">while</span>(ok_flag == <span class="number">0</span>);<span class="comment">//等待esp8266的OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//AT+CWJAP=&quot;SSID&quot;,&quot;password&quot;\r\n 连接路由</span></span><br><span class="line">ok_flag = <span class="number">0</span>;</span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+CWJAP=&quot;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_data(ssid);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_data(passwd);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_data(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(ok_flag == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//AT+CIFSR\r\n 查询分配到的IP地址(必须要查一下,否则无法建立连接)</span></span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+CIFSR\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_connect</span><span class="params">(<span class="type">char</span> *ip, <span class="type">char</span> *port)</span><span class="comment">//连接TCP server</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//AT+CIPSTART=&quot;TCP&quot;,&quot;192.168.3.116&quot;,8080\r\n 建立TCP连接</span></span><br><span class="line">ok_flag = <span class="number">0</span>;</span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+CIPSTART=&quot;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_data(<span class="string">&quot;TCP&quot;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_data(ip);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">usart_2_send_byte(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">usart_2_send_data(port);</span><br><span class="line">usart_2_send_data(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(ok_flag == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_disconnect</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//断开TCP连接</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//AT+CIPCLOSE\r\n 断开TCP连接</span></span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+CIPCLOSE\r\n&quot;</span>);</span><br><span class="line"><span class="comment">//注意:有可能回复有可能不回复,所以不检测closed ok</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">esp8266_send</span><span class="params">(<span class="type">char</span> *msg, <span class="type">char</span> *len)</span><span class="comment">//发送数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//AT+CIPSEND=4\r\n 发送数据</span></span><br><span class="line">ok_flag = <span class="number">0</span>;</span><br><span class="line">usart_2_send_data(<span class="string">&quot;AT+CIPSEND=&quot;</span>);</span><br><span class="line">usart_2_send_data(len);</span><br><span class="line">usart_2_send_data(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(ok_flag == <span class="number">0</span>);<span class="comment">//等待 OK</span></span><br><span class="line"></span><br><span class="line">ok_flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ok_flag == <span class="number">0</span>);<span class="comment">//等待 &gt;</span></span><br><span class="line"></span><br><span class="line">ok_flag = <span class="number">0</span>;</span><br><span class="line">usart_2_send_data(msg);</span><br><span class="line"><span class="keyword">while</span>(ok_flag == <span class="number">0</span>);<span class="comment">//等待 SEND OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_19day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_19day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_19day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-8<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="这一天没有看到老师发布日记"><a href="#这一天没有看到老师发布日记" class="headerlink" title="这一天没有看到老师发布日记"></a>这一天没有看到老师发布日记</h1>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_16day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_16day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_16day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-5<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    串行的接口    USART/UART        USART:通用的同步异步收发器        UART:通用的异步收发器        STM32F103RBT6中有3个USART/UART        目标 :         1.把USART1的所有项目实验调通            USART1的发送一个字节            USART1的发送多个字节            USART1接收(轮询和中断)一个字节数据            USART1解析接收到的字符串数据            把标准输入和标准输出重定向到USART1中            1)使用Micro Lib 2)禁用半主机模式        2.举一反三            把USART1的项目实验移植到USART2/USART3    I²C        1.分析I²C的协议        2. 驱动E²PROM OLED SHT30        3.带着大家把E²PROM驱动起来        4.大家把官方提供的OLED的案例移植到项目工程中        5.大家自己搞定SHT30================================任务1.把USART1的项目实验移植到USART3上2.工业物联网的控制终端的发送器(把相应的指令发送给设备,设备进行解析)3.所有同学以组为单位,两两之间串一遍I²C的协议4.系统中的界面    1)公司的LoGo    2)DHT11的数据(客厅的数据).    3)SHT30的数据(卧室的数据)    4)高精度可调电阻-&gt;虚拟成任意类型的传感器-&gt;可燃气的含量(厨房的数据)    5)额外的传感器    6)日历    7)时间    -------------------------------------------    计秒表 + 看门狗监测系统 + 界面可以通过按键切换================================</code></pre><h1 id="二-ADC"><a href="#二-ADC" class="headerlink" title="二.ADC"></a>二.ADC</h1><pre><code>    1.ADC的实验    1)STM32F103RBT6开发板-&gt;高精度可调电阻-&gt;可以当做任意类似的传感器        -&gt;在扩展IO中可以连接其他的模拟型传感器    2)STM32F407ZGT6开发板-&gt;PM2.5-&gt;CO传感器        -&gt;在扩展IO中可以连接其他的模拟型传感器    3)在STM32F407开发板上查找扩展IO中有没有DAC功能的管脚,尝试驱动DAC        2.ADC的简介    在市面上有很多种类的传感器,可以分为数字型的传感器和模拟型的传感器    数字型的传感器:采集到的就是数字量,可以直接交给CPU来处理    模拟型的传感器:采集到的是模拟量,需要通过AD转换,        转换成了数字量,再交给CPU来处理    ADC : 模数转换器(可以把模拟量转换成数字量)    很多的工程师会把ADC当作电压表进行使用        3.了解STM32F103RBT6芯片上的ADC    打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下        &lt;ST_MCU最新选型手册.pdf&gt;P22        通过最新选型手册的了解        1)STM32F103RBT6芯片内部已经集成了ADC        2)ADC的资源16 x 12bit    打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下        &lt;STM32F103RB.pdf&gt;P19        通过讲硬件的手册了解        1)STM32F103RBT6芯片中只有2个ADC的外设(ADC1和ADC2)        2)这两个ADC都连接到了APB2总线上        3)这两个ADC都可以使用这16个转换通道    ※打开&lt;STM32课程SDK\DataSheet\STM32&gt;目录下&lt;STM32F405OE_STM32F405OEY6TR_STM32F405OG_STM32F405OGY6TR_to_STM32F407ZGT7.pdf&gt;P18        通过讲硬件的手册了解        1)STM32F407芯片中只有3个ADC的外设(ADC1 ADC2 ADC3)        2)这三个ADC都连接到了APB2总线上        3)24个通道中其中有8个通道是ADC1 ADC2 ADC3共用        4)24个通道中其中有8个通道是ADC1 ADC2共用        5)24个通道中其中有8个通道是ADC3使用    12bit指的是量化位        把模拟量转换成数字量所占用的位数就是量化位        将来转换之后最小值是 : 0000 0000 00000        将来转换之后最大值是 : 1111 1111 11114095    ※在ADC中也有LSB的概念        LSB-&gt;指的是一个量化位代表的模拟量        ----------------------------------------        例子        4bit的量化位可以转换0V - 3.3V        0000代表0V        1111代表3.3V        LSB(一个量化位)0001,代表的电压值是多少?        LSB = 0.22V        ----------------------------------------    4.通过芯片的手册了解ADC    打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下        &lt;STM32F10x中文参考手册.pdf&gt;P113        5.开发板原理图中高精度可调电阻的连接    ADC_VOLPC0/ADC_IN10    PC0管脚将来配置为模拟输入功能</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_17day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_17day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_17day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="/images/%E6%AF%95%E4%B8%9A%E8%AE%BA%E6%96%87.pptx" title="毕业论文">点击下载 毕业论文.pptx</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_13day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_13day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_13day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-31<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    串口之I²C    1.I²C总线中包含两条线(SDA数据线 和 SCL时钟线)    2.I²C总线上可以连接很多的I²C接口的设备,设备与设备之间都串联起来的    3.I²C总线规定了,凡是连接到I²C总线上的设备都需要有一个设备地址        一般来说设备地址是7bit    4.I²C总线上的设备需要区分主设备和从设备    5.如果I²C总线上的两个设备都想要和另外的一个设备通信,会触发抢主机制        抢主机制 : 谁先产生开始信号,谁就优先通信    6.I²C总线规定了,在空闲状态下SDA和SCL要保持高电平的状态        所以I²C总线需要外接上拉电阻    7.开始信号和结束信号        开始信号 : 在SCL为高电平时,SDA由高电平拉到低电平        结束信号 : 在SCL为高电平时,SDA由低电平拉到高电平    8.传输数据        1)在SCL为低电平的时候,把数据放到SDA数据线上        2)拉高SCL,延时一段时间,(当SCL为高电平时,SDA保持不变)        3)拉低SCL,切换下一位数据放到SDA数据线上    9.传输一个字节数据需要9个周期 = 8个数据周期 + 1个ACK周期    A.I²C总线属于停等式的流控,传输完一个字节数据需要有应答    B.产生ACK和读取ACK        1)产生ACK : 在第9个周期,拉低SCL,把SDA也拉低,拉高SCL        2)读取ACK : 在第9个周期,当SCL为高电平时,读取SDA的电平    C.I²C总线是高位先出    D.主设备给从设备发送数据        1)主设备产生开始信号        2)主设备发送从设备的设备地址 + 写的标志(0)        3)主设备等待ACK        4)主设备发送一个字节数据        5)主设备等待ACK        ...        n)主设备发送最后一个字节数据        n+1)主设备可以等待或者不等待ACK        n+2)主设备产生结束信号    E.主设备读取从设备的数据        1)主设备产生开始信号        2)主设备发送从设备的设备地址 + 读的标志(1)        3)主设备等待ACK        4)主设备等待读取一个字节数据        5)主设备产生ACK        ...        n)主设备读取最后一个字节数据        n+1)主设备不产生ACK        n+2)主设备产生结束信号</code></pre><h1 id="二-I²C接口设备之E²PROM"><a href="#二-I²C接口设备之E²PROM" class="headerlink" title="二.I²C接口设备之E²PROM"></a>二.I²C接口设备之E²PROM</h1><pre><code>    1.简单了解E²PROM    E²PROM : 也叫做EEPROM,电可擦除可编程的只读存储器    作用 : 是一种存储类的设备    特点 : 存储到E²PROM中的数据,设备掉电之后,数据不会丢失    注意 : E²PROM并不是硬盘    应用 : 使用E²PROM存储特殊的数据    (门禁打卡设备、测量设备、仪器仪表、用来存储BIOS或者BootLoader)        2.ROM的发展历史    ROM 只读存储器 特点是内部存储的数据只能读取,不能写入或者修改    PROM 可编程的只读存储器 特点是内部存储的数据可以通过编程方法修改一次    EPROM 可擦除可编程的只读存储器 特点是内部存储的数据可以修改多次                    修改方法有限制                    需要通过紫外线照射存储介质    EEPROM 电可擦除可编程的只读存储器 特点是内部存储的数据可以修改多次                    通过电信号即可清除数据    3.通过手册了解E²PROM    打开&lt;STM32RBT6\DataSheet\其他&gt;目录下    &lt;AT24C02_ATMEL Corporation.pdf&gt;    1)我们的开发板上使用的E²PROM是阿特梅尔公司的模块    2)使用的是8管脚的封装形式    (A0 A1 A2&lt;设备地址&gt; GND&lt;接地&gt; SDA&lt;数据线&gt; SCL&lt;时钟线&gt;)    (WP(写保护) VCC&lt;接电源&gt;)    3)使用的是I²C接口的E²PROM    4)规格    型号规格存储大小Page    AT24C011K128byte16个Page    AT24C022K256byte32个Page    AT24C044K512byte32个Page    AT24C088K1024byte64个Page    AT24C1616K2048byte128个Page</code></pre><p>eeprom<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/13day/eeprom.png"></p><pre><code>    5)任何规格的E²PROM的设备地址的高四位都是固定的了1010        1K/2K规格可以通过A2 A1 A0管脚选择设备地址        4K规格可以通过A2 A1管脚选择设备地址        8K规格可以通过A2管脚选择设备地址        16K规格没有管脚可以选择设备地址    6)通过开发板原理图的解析可以了解        我们开发板上的E²PROM的设备地址是        10100000(写操作的设备地址)0xA0        10100001(读操作的设备地址)0xA1    7)写操作        1&gt;按字节来写            a&gt;产生开始信号            b&gt;发送设备地址 + 写的标志(10100000&lt;0xA0&gt;)            c&gt;等待ACK            d&gt;发送内部存储空间的地址(0x00 - 0xFF)            e&gt;等待ACK            f&gt;发送一个字节数据            g&gt;等待ACK            h&gt;产生结束信号        2&gt;按页来写(注意:有页内回滚)            a&gt;产生开始信号            b&gt;发送设备地址 + 写的标志(10100000&lt;0xA0&gt;)            c&gt;等待ACK            d&gt;发送内部存储空间的地址(0x00 - 0xFF)            e&gt;等待ACK            f&gt;发送一个字节数据            g&gt;等待ACK            ...            n&gt;发送最后一个字节数据            n+1&gt;等待ACK            n+2&gt;产生结束信号</code></pre><p>页内回滚<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/13day/%E9%A1%B5%E5%86%85%E5%9B%9E%E6%BB%9A.png"></p><pre><code>    8)读操作        1&gt;当前地址读            a&gt;产生开始信号            b&gt;发送设备地址 + 读的标志(10100001&lt;0xA1&gt;)            c&gt;等待ACK            d&gt;读取一个字节数据            e&gt;不产生ACK            f&gt;产生结束信号        2&gt;随机地址读            a&gt;产生开始信号            b&gt;发送设备地址 + 写的标志(10100000&lt;0xA0&gt;)            c&gt;等待ACK            d&gt;发送内部存储空间的地址            e&gt;等待ACK            f&gt;产生开始信号            g&gt;发送设备地址 + 读的标志(10100001&lt;0xA1&gt;)            h&gt;等待ACK            i&gt;读取一个字节数据            j&gt;不产生ACK            k&gt;产生结束信号        3&gt;顺序读(整个存储空间的回滚)            可以直接拼接到当前地址读或者随机地址读的后面</code></pre><h1 id="三-使用GPIO模拟I²C的协议的程序-gt-驱动E²PROM"><a href="#三-使用GPIO模拟I²C的协议的程序-gt-驱动E²PROM" class="headerlink" title="三.使用GPIO模拟I²C的协议的程序-&gt;驱动E²PROM"></a>三.使用GPIO模拟I²C的协议的程序-&gt;驱动E²PROM</h1>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_14day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_14day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_14day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-1<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    串行的接口        分类 : USART/UART、I²C、SPI、I²S、CAN、USB、SDI0、Eth        USART/UART驱动起来了-&gt;WiFi模块是USART的接口        I²C总线-&gt;使用GPIO模拟I²C的协议-&gt;E²PROM、OLD、SHT30    E²PROM        电可擦除可编程的只读存储器        通过官方手册了解E²PROM        1)E²PROM使用的是两线串行的接口(I²C的接口)        2)比较常见的是8管脚的封装形式        (VCC&lt;接电源&gt; GND&lt;接地&gt; A2 A1 A0&lt;设备地址的输入&gt;)        (SDA&lt;数据线&gt; SCL&lt;时钟线&gt; WP&lt;写保护&gt;)        3)规格        型号规格存储大小页        AT24C011K128byte16page        AT24C022K256byte32page        AT24C044K512byte32page        AT24C088K1024byte64page        AT24C1616K2048byte128page        4)设备地址        所有规格的E²PROM的设备地址高四位是固定的1010        后三位设备地址通过A2 A1 A0进行选择        最低位是读写标志位        5)读写操作        两种写操作            按字节写和按页写                    三种读操作            当前地址读和随机地址读和顺序读</code></pre><h1 id="二-I²C设备之OLED"><a href="#二-I²C设备之OLED" class="headerlink" title="二.I²C设备之OLED"></a>二.I²C设备之OLED</h1><pre><code>    1.OLED的简介    OLED叫做有机发光二极管,在嵌入式领域中属于显示类型的设备    和LCD(液晶显示屏)显示的方法不同,    LCD在显示时需要背光灯,OLED在显示时不需要背光灯    显示屏是显示屏,触摸屏是触摸屏,是两个设备    如果将来操作的设备既有显示屏也有触摸屏,就要写两份驱动程序    一个是显示屏驱动,一个是触摸屏驱动    2.屏幕的显示    屏幕上是由N多个像素点组成的,所以大家平常所说的屏幕分辨率    指的是像素点的个数    1024×768    1920×1080    之所以屏幕可以显示出各种颜色是因为像素点会在显存中占用存储空间    像素点会在显存中占用多大的存储空间?    和像素点的位色有关(位色可以分为16位色和32位色 )    比如说显示设备是16位色,说明一个像素点在显存中占用16位(2byte)    比如说显示设备是32位色,说明一个像素点在显存中占用32位(4byte)    配色方案    常用的显示设备的配色方案(RGB YUV)    16位色RGB配色方案XXXXX YYYYYY ZZZZZ            RGB        0xF800全红        0x07E0全绿        0x001F全蓝        0xFFFF全白        0x0000全黑    32位色RGB配色方案RRRRRRRR XXXXXXXX YYYYYYYY ZZZZZZZZ            保留的   R      G        B        0xFF0000全红        0xFF00全绿        0xFF全蓝    3.开发板上的显示屏    STM32F103-&gt;OLED屏幕-&gt;0.96寸-&gt;128×64-&gt;I²C接口    STM32F407-&gt;LCD屏幕-&gt;2.8寸-&gt;320×240-&gt;FSMC(内存)接口    4.从官网找资料    OLED屏幕-&gt;亿阳电子</code></pre><h1 id="LCD-液晶显示器320-240"><a href="#LCD-液晶显示器320-240" class="headerlink" title="LCD(液晶显示器320 * 240)"></a>LCD(液晶显示器320 * 240)</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><pre><code>    单片机:    uart(串口屏)        液晶显示器接的是串口,能通过串口把数据发送给LCD,就能够显示        例:通过串口把坐标发送过去,再把显示的字符(字的编码)发送过去        (一般来说这种屏都是自带字库的)    spi(SPI总线)        液晶显示器接的是SPI总线    sram(内存接口)        LCD连接到了主芯片的内存接口上的,访问LCD就和访问内存一样,        通过指针的方式去访问    SOC : RGB LVDS HDMI VGA MIPI    我们的stm32开发板的液晶显示用的是sram接口,相当于接到了内存接口上    所以我们先看一下内存的访问</code></pre><h2 id="内存的访问-通过三总线来访问-lt-01m4的总线和SRAM的总线-gt"><a href="#内存的访问-通过三总线来访问-lt-01m4的总线和SRAM的总线-gt" class="headerlink" title="内存的访问(通过三总线来访问)&lt;01m4的总线和SRAM的总线&gt;"></a>内存的访问(通过三总线来访问)&lt;01m4的总线和SRAM的总线&gt;</h2><p>m4的总线和SRAM的总线<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/01m4%E7%9A%84%E6%80%BB%E7%BA%BF%E5%92%8CSRAM%E7%9A%84%E6%80%BB%E7%BA%BF.png"></p><pre><code>    addr传输地址    --------------    --------------    --------------    --------------    data传输数据    --------------    --------------    ctrl控制读写时序/片选...    例:    假如执行*(int *)0x4 = 1;    三总线的电平信号应该是这样的    addr    第0位地址线--------------0    第1位地址线--------------0    第2位地址线--------------1    第3位地址线--------------0    data    第0位数据线--------------1    第1位数据线--------------0    假如执行*(int *)0xC = 3;    三总线的电平信号应该是这样的    addr    第0位地址线--------------0    第1位地址线--------------0    第2位地址线--------------1    第3位地址线--------------1    data    第0位数据线--------------1    第1位数据线--------------1    看&lt;02LCD电路图&gt;</code></pre><p>02LCD电路图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/02LCD%E7%94%B5%E8%B7%AF%E5%9B%BE.png"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><FSMC_A12>简介</h2><pre><code>    因为FSMC_A12这个管脚只区分地址线的第12位所以(1)和(2) | (3)和(4)执行效果一样    (1)(*(int *)0x1000) = 2;    (2)(*(int *)0x1001) = 2;    (3)(*(int *)0x0000) = 2;    (4)(*(int *)0x0001) = 2;    地址线只区分第12位是因为把这一位当作命令来使用,下面我们来区分    (1)和(3) | (2)和(4)的区别    LCD的背部是有一个控制芯片(LCD自带)的,    LCD模块上的引脚是连接控制芯片的,    控制芯片在控制LCD的显示,    我们开发板上使用的LCD控制芯片是9341        9341内部有很多寄存器、显存    当想要在LCD上画点首先需要指定坐标、横屏显示|竖屏显示...    -------------------------------    (100, 100)竖 显示点(红色)    9341寄存器0x1234存储X轴坐标        *(int *)0x1234 = 100;    -------------------------------    这些信息都需要在9341中的寄存器里设置    我们之前操作GPIO知道,每一个寄存器都有一个地址,为了和我们的地址总线的地址区分,我们管寄存器的地址叫做[命令cmd]    当我们将来往寄存器里写数据,我们的LCD是这样规定的    1.先把命令写过来    2.再把数据写过来    ---------------------------------------------------------------    例 : 假如寄存器的地址[命令]是0x10,想要给这个寄存器写数据2    0x10 &lt;------- 2    不管是0x10还是数据2,都是要通过内存接口发送给LCD,走的都是数据线,对于STM32来说&lt;0x10&gt;和&lt;2&gt;都是数据,    所以发送时必须要区分开,发送的是命令还是数据(用的就是地址线的第12位来区分)    所以需要知道地址线的第12位是高电平表示命令,还是低电平表示命令    需要查看&lt;LCD的手册&gt;        地址线的第12位为1的时候表示数据    地址线的第12位为0的时候表示命令    1.先把命令写过来    (*(int *)0x0000) = 0x10;    2.再把数据写过来    (*(int *)0x1000) = 2    执行完这两步操作数据2就写到了&lt;0x10&gt;的那个寄存器中了    ---------------------------------------------------------------    对于显存来说也是这样的方式,显存本身就是一段存储空间,内部就会有地址&lt;命令&gt;    如果在LCD上画一个点    1.首先把显存的&lt;命令&gt;发过去    2.再把数据发过去(点的坐标、颜色)    接下来我们来看看片选</code></pre><h2 id="片选"><a href="#片选" class="headerlink" title="片选"></a>片选</h2><p>片选简介<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/04%E7%89%87%E9%80%89%E7%AE%80%E4%BB%8B.png"></p><pre><code>    内存控制器可以支持多个设备(SRAM LCD DM9000...)    我们查看&lt;STM32手册&gt;中的FSMC来看看我们的内存控制器,可以支持哪些设备    &lt;P1191&gt;-------PSRAM(4个存储区域)代表有4个片选    &lt;P1192&gt;-------NOR/PSRAM(我们的LCD接的是这块)                ---&gt;FSMC_NE[4:1]4个片选                ---&gt;FSMC_NBL[1:0]控制访问位宽的                (有可能接8位内存或者接16位内存)    &lt;P1194&gt;-------NOR/PSRAM            4 x 64MB可以接4片内存,每片64MB大小            内存的范围是0x6000 0000 - 0x6FFF FFFF            每一片内存的地址不会重复,所以            0x6000 0000第一片内存起始地址                        0x6400 0000第二片内存起始地址                        0x6800 0000第三片内存起始地址                        0x6C00 0000第四片内存起始地址    -------------------------------    3130292827262524    011000XX    011001XX    011010XX    011011XX    -------------------------------                其实当我们使用第一片内存的空间地址时,自动会让片选1有效(内部译码器已经规定好了)    我们通过LCD硬件原理图中得到 &lt;FSMC_NE4&gt;说明我们的LCD使用的是片选4    所以我们将来访问LCD就需要访问 0x6C00 0000 - 0x6FFF FFFF这个地址范围    通过上面一系列的信息(地址线 + 片选)我们知道了    往这个地址写的是 0x6C000000 命令    往这个地址写的是 0x6C001000 数据    &lt;P1194&gt;表185说的也是片选如果第26和27位            00片选1            01片选2            10片选3            11片选4        &lt;P1195&gt;表186说的是访问内存的位宽区别        当我们选择8位位宽来访问内存,会把地址线的0~25作为地址        如果选择16位的方式来访问，HADDR[25:1]&gt;&gt;1才是真实地址        ---------------------------------------------------        原理:        我们在访问内存时,内存中有很多字节        如果按照8位(1字节)来访问内存                只看后四位        0x1000--------- 0000        0x1001--------- 0001        0x1002--------- 0010        0x1003--------- 0011        0x1004--------- 0100        0x1005--------- 0101        0x1006--------- 0110        0x1007--------- 0111        上面都是每一个字节的地址,如果按照16位(2字节)来访问就应该是                只看后四位        0x1000--------- 0000        0x1002--------- 0010        0x1004--------- 0100        0x1006--------- 0110        0x1008--------- 1000        0x100A--------- 1010        以16位方式来访问,最低位肯定是0,所以16位访问方式        地址线的[25:1]需要 右移 1位        ---------------------------------------------------        所以经过上面位宽的选择我们之前分析的        往这个地址写的是 0x6C000000 命令        往这个地址写的是 0x6C001000 数据        有问题        写命令的没有问题,但是写数据的有问题        当我们选择16位的方式访问LCD时        把0x6C001000放到地址线的时候会变成0x6C000800        硬件会帮我们把[25：1]右移1位,所以就不符合我们的LCD了        所以我们在选择地址的时候应该选择0x6C002000        当我们写数据时这个地址右移1位就会变成0x6C001000                命令0x6C000000        数据0x6C002000    ------------------------------------------    (100, 100)0x1234    1.*(int *)0x6C000000 = 0x1234;    2.*(int *)0x6C002000 = 100;        把100写到0x1234    LCD_CMD= 0x1234;    LCD_DATA = 100;    ------------------------------------------</code></pre><h2 id="LCD显示"><a href="#LCD显示" class="headerlink" title="LCD显示"></a>LCD显示</h2><pre><code>    LCD固件    在LCD上画的任何东西,都是一个点一个点画的(点阵)    颜色RGB(通过三原色表示)YUV(通过分量来表示Y亮度 UV色度)    我们用的是RGB方式    RGB888        一个像素点占24位        11111111 11111111 11111111白色        最红 最绿   最蓝    RGB565        一个像素点占16位        11111 111111 11111白色        红绿蓝    我们的LCD(9341)用的是RGB565,分辨率是320 * 240    显存需要320 * 240 * 2(byte)字节</code></pre><p>LCD调节亮度<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/03LCD%E8%B0%83%E8%8A%82%E4%BA%AE%E5%BA%A6.png"><br>lcd扫描<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/05lcd%E6%89%AB%E6%8F%8F.png"><br>开发板俯视图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/06%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BF%AF%E8%A7%86%E5%9B%BE.PNG"><br>cfont文件中显示A<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/cfont%E6%96%87%E4%BB%B6%E4%B8%AD%E6%98%BE%E7%A4%BAA.png"><br>FSMC的配置<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/FSMC%E7%9A%84%E9%85%8D%E7%BD%AE.png"><br>俯视图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/%E4%BF%AF%E8%A7%86%E5%9B%BE.png"><br>取字模<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/14day/stm32f407zgt6%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84LCD/%E5%8F%96%E5%AD%97%E6%A8%A1.png"></p><pre><code>    固件分析lcd.h<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> shang[<span class="number">128</span>] = &#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xE0</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x71</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x1C</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x1F</span>,<span class="number">0x80</span>,<span class="number">0x10</span>,<span class="number">0x01</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0x1F</span>,<span class="number">0xFF</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x22</span>,<span class="number">0x3F</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x42</span>,<span class="number">0x3D</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0xC2</span>,<span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x82</span>,<span class="number">0x00</span>,<span class="number">0x20</span>,<span class="number">0x07</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x03</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x1C</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x06</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF8</span>,<span class="number">0x00</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x80</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> guan[<span class="number">128</span>] = </span><br><span class="line">&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x44</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x42</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xC3</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x81</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x83</span>,<span class="number">0xE0</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xFE</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0xF0</span>,<span class="number">0x3C</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0xC0</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x03</span>,<span class="number">0xFF</span>,<span class="number">0xE1</span>,<span class="number">0x80</span>,<span class="number">0x03</span>,<span class="number">0xFF</span>,<span class="number">0x83</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x7F</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0x7F</span>,<span class="number">0x1F</span>,<span class="number">0xE0</span>,</span><br><span class="line"><span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x1E</span>,<span class="number">0x70</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x10</span>,<span class="number">0x06</span>,<span class="number">0x01</span>,<span class="number">0xE0</span>,<span class="number">0x18</span>,<span class="number">0x07</span>,<span class="number">0xFF</span>,<span class="number">0xF0</span>,<span class="number">0x18</span>,</span><br><span class="line"><span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x38</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(参数)</span></span><br><span class="line">&#123;</span><br><span class="line">圆心坐标 x ,y</span><br><span class="line">dir = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span>(dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line"><span class="keyword">if</span>(y == <span class="number">240</span> - r - <span class="number">1</span>)</span><br><span class="line">dir = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">320</span> - r - <span class="number">1</span>)</span><br><span class="line">dir = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dir = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : x--, y--; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : x++, y--; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : x++, y++; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : x--, y++; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">lcd_draw_cir(x, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_15day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_15day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_15day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-9-2<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><pre><code>一.I²C接口设备之SHT30    1.SHT30传感器的简介    在我们使用的STM32F103开发板上有两个用来采集温湿度的传感器    DHT11和SHT30    DHT11传感器属于入门级别的传感器(做实验时会经常使用的传感器)    SHT30传感器属于工业级传感器(做产品时会经常使用的传感器)    2.从官网中查找资料        1)测量范围 湿度:0%-100%温度:-40℃ - 125℃        2)误差范围 湿度:±2%温度:±0.2℃        3)通过温度的误差发现        SHT30传感器,既可以采集到整数数据,也可以采集到小数数据        4)SHT30传感器是I²C的接口    3.通过手册了解SHT30    打开&lt;STM32RBT6\DataSheet\传感器&gt;目录下&lt;sht30_datasheet.pdf&gt;        1)8管脚的封装形式        2)SHT30传感器本身是模拟型的传感器,            内部自带AD转换,可以自行转换        3)两种设备地址        ---------------------------------------------        手册中的描述        如果ADDR管脚接VSS(接地)使用的是设备地址A0x44        如果ADDR管脚接VDD(接电)使用的是设备地址B0x45        ---------------------------------------------        分析内容        设备地址A0x44转换成二进制01000100        设备地址B0x45转换成二进制01000101        因为I²C总线规定设备地址是7bit的,最低位是读写标志位        但是手册中说的设备地址A和设备地址B最低位被占用了        所以0x44和0x45并不是最终的设备地址        因为0x44和0x45最低位被占用了,        用来区分设备地址A和设备地址B的,但是最高位没有被占用        需要把设备地址A和设备地址B都左移一位        设备地址A01000100 &lt;&lt; 1 100010000x88        设备地址B01000101 &lt;&lt; 1 100010100x8A        所以最终的设备地址是        设备地址A0x88        设备地址B0x8A        ---------------------------------------------        上述的内容将来在很多的嵌入式设备中都会碰到,要多留一个心眼!        ---------------------------------------------        4)经过开发板原理图的分析        ADDR管脚连接了GND,所以我们开发板上的SHT30的设备地址是        0x88        5)设置采样频率        需要发送采样的指令0x2737            1&gt;产生开始信号            2&gt;发送设备地址 + 写的标志(0x88)            3&gt;等待ACK            4&gt;发送采样指令的高字节(0x27)            5&gt;等待ACK            6&gt;发送采样指令的低字节(0x37)            7&gt;等待ACK            8&gt;产生结束信号        6)发送读取数据的指令        读取数据的指令0xE000            1&gt;产生开始信号            2&gt;发送设备地址 + 写的标志(0x88)            3&gt;等待ACK            4&gt;发送读取数据指令的高字节(0xE0)            5&gt;等待ACK            6&gt;发送读取数据指令的低字节(0x00)            7&gt;等待ACK        7)读取数据            1&gt;产生开始信号            2&gt;发送设备地址 + 读的标志(0x89)            3&gt;等待ACK            4&gt;读取温度的高字节数据            5&gt;产生ACK            6&gt;读取温度的低字节数据            7&gt;产生ACK            8&gt;读取校验字节            9&gt;产生ACK            A&gt;读取湿度的高字节数据            B&gt;产生ACK            C&gt;读取湿度的低字节数据            D&gt;产生ACK            E&gt;读取检验字节            F&gt;不产生ACK            G&gt;产生结束信号        8)读取出的数据不能直接使用,需要转换        需要把温度的高字节和低字节的数据拼成一个2byte的数据        需要把湿度的高字节和低字节的数据拼成一个2byte的数据        代入公式转换        湿度 = 100 * (double)(2byte湿度数据) / 65535;        温度 = -45 + 175 * (double)(2byte温度数据) / 65535;        9)最终结果的显示        可以通过USART1或者OLED显示出来==============================任务1.和同组的同学串一遍手册分析出的内容2.搞一个新的项目工程,写SHT30的驱动程序==============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_10day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_10day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_10day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-26<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    74HC138-&gt;数码管的公共端        是一个三八译码器,功能是一个选择器        16管脚的封装形式        VCC GND        A0 A1 A2(三个输入)        E1 E2 E3(控 模式)        Y0 - Y7(8个输出)    74HC595-&gt;数码管的数据段        是一个可以把串行数据转换成并行数据的模块        16管脚的封装形式        VCC GND        DS(串行数据的输入)        Q0 - Q7(并行数据的输出)        Q7’级联        OE(输出使能)        MR(主复位)        SH_CP        ST_CP        由三个部分组成        (&lt;8bit移位寄存器&gt;&lt;8bit存储寄存器&gt;&lt;状态输出&gt;)</code></pre><p>选择器<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/10day/%E9%80%89%E6%8B%A9%E5%99%A8.png"></p><pre><code>    派发STM32F407ZGT6开发板</code></pre><h1 id="二-串行的接口"><a href="#二-串行的接口" class="headerlink" title="二.串行的接口"></a>二.串行的接口</h1><pre><code>    1.串口的简介    串口也叫做串行的接口,串行的通讯接口或者串行的通信接口    (在Windows系统环境中串口表现为COM接口)    (在Linux系统环境中串口表现为tty设备&lt;/dev/ttyxx&gt;)    串行的通信指的是数据一位一位的按顺序(高位先出 | 低位先出)进行传输    串行的接口操作起来比较简单,只需要一条数据线就可以完成传输数据    注意 : 并口也叫做并行的接口.指的是数据多位多位进行传输    并不是说并口可以一次发送多位数据,就要比串口传输速度快,不一定    2.串口的工作模式        单工模式A----&gt;------B        A设备只发送数据,B设备只接收数据,数据线上只有一种传输方向        半双工模式A--&gt;-----&lt;--B        A设备可以收发数据,B设备也可以收发数据        但是在同一时间,数据线上只能有一种传输方向        发送的同时不能接收,接收的同时不能发送        全双工模式  ------&gt;-----                A    B                  ------&lt;-----        A设备可以收发数据,B设备也可以收发数据        发送的同时可以接收,接收的同时可以发送    3.不同电平标准的串口    注意 : 如果两个设备需要通过串口进行通信,首先要确保电平标准一致    如果电平标准不一致,需要使用电平转换模块        TTL电平标准的串口            0V代表数据03.3V/5V代表数据1            传输距离差不多1米左右        RS232电平标准的串口            (3V - 12V)代表数据0(-3V - -12V)代表数据1            传输距离差不多15米左右        RS485电平标准的串口(工业级的总线&lt;抗干扰性极强&gt;)            在单工模式或者半双工模式下最少需要两条数据线            在全双工模式下需要四条数据线            因为传输的是两条电线的电压差            传输距离差不多1000米左右    4.我们开发板上串口的分类    在STM32F103RBT6芯片中串口的分类    SPI、I²C、I²S、USART/UART、CEC、USB、CAN、以太网接口、SDIO    本次主要讲的是USART/UART    5.USART/UART    USART : 通用的同步异步收发器        既支持同步模式也支持异步模式    UART   : 通用的异步收发器        只支持异步模式    6.同步和异步    同步 : 发送方发出数据之后,需要等待接收方回复应答,接收到应答之后再发送        下一个数据包        同步是阻塞模式    比如说 : I²C、SPI属于同步的通信    异步 : 发送方发出数据之后,不需要等待接收方回复应答,直接发送下一个数据包        异步是非阻塞模式    比如说 : UART属于异步的通信    7.我们开发板上的USART/UART    我们使用的STM32F103RBT6芯片中一共有3个USART/UART    USART1纽扣电池的上面    USART2无线模块的接口位置    USART3扩展IO    目的 : 带着大家把USART1的实验完成,自己搞定USART2/USART3的驱动        8.驱动USART1    USART1_TXPA9推挽复用    USART1_RXPA10浮空输入    在通讯之前需要规定好双方的波特率    115200 8N1    115200波特率    88个数据位(1个字节数据)    N没有奇偶校验    11个停止位注意 : 上位机程序(串口调试助手)不要打开多个！！！=================================作业1.把本周讲过的内容完整的复习一遍2.举一反三(根据驱动USART1的程序把USART3搞定)3.封装函数    extern void usart_1_send_data(char *buf);//可以发送多个字节数据4.通过USART1显示DHT11采集的数据    &quot;HUM:XX TEMP:XX&quot;5.通过USART1把结构体类型的数据发送出去    struct data    &#123;        float Hum;//湿度        float Temp;//温度        int pm_value;//PM2.5        char buf[16];//存储额外的数据    &#125;;    struct data d = &#123;23.45, 34.56, 9527, &quot;Hello World&quot;&#125;;=================================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_11day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_11day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_11day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-29<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    串口    1.以串行的方式(数据按照顺序&lt;高位先出|低位先出&gt;一位一位的进行传输)    传输数据    2.串口的工作模式(单工模式 半双工模式 全双工模式 )    3.不同电平标准的串口(TTL、RS232、RS485)    4.在STM32F103RBT6芯片中,串口外设    (IIC、SPI、USART/UART、USB、CAN)    5.研究USART/UART    USART:通用的同步异步收发器    UART:通用的异步收发器    在STM32F103RBT6芯片中有3个USART/UART    在开发板上的位置        USART1纽扣电池的上面        USART2无线模块的接口        USART3扩展IO上    6.驱动USART1    void usart_1_init(void)    &#123;        1)通过APB2总线使能GPIOA组和USART1的时钟        2)初始化GPIOA组的管脚            1&gt;把PA9管脚配置为推挽的复用模式            2&gt;把PA10管脚配置为浮空的输入模式        3)初始化USART1            1&gt;选择115200的波特率            2&gt;关闭硬件流控            3&gt;选择发送和接收模式            4&gt;选择没有奇偶校验            5&gt;选择8个数据位            6&gt;选择1个停止位        4)初始化NVIC            1&gt;配置组优先级和子优先级的所占比例            2&gt;初始化NVIC                选择USART1的中断号                使能该中断                选择组优先级的级别                选择子优先级的级别        5)选择由USART1的接收触发中断        6)使能USART1的功能    &#125;    void usart_1_send_byte(u8 data)    &#123;        1)把形参数据通过官方固件进行发送        2)以死等的方式等待USART1的数据发送成功        3)清除USART1等待发送成功的标志状态    &#125;    u8 usart_1_recv_byte(void)    &#123;        1)判断USART1是否接收到了数据        2)接收数据        3)清除USART1接收到数据的标志状态        4)把接收到的数据返回    &#125;3.封装函数    extern void usart_1_send_data(char *buf);//可以发送多个字节数据4.通过USART1显示DHT11采集的数据(自己找张纸写一下itoa函数的实现)    &quot;HUM:XX TEMP:XX&quot;5.通过USART1把结构体类型的数据发送出去    struct data    &#123;        float Hum;//湿度        float Temp;//温度        int pm_value;//PM2.5        char buf[16];//存储额外的数据    &#125;;    struct data d = &#123;23.45, 34.56, 9527, &quot;Hello World&quot;&#125;;</code></pre><h1 id="二-串口附加的内容"><a href="#二-串口附加的内容" class="headerlink" title="二.串口附加的内容"></a>二.串口附加的内容</h1><pre><code>    int a = 100;    printf(&quot;a = %d\n&quot;, a);    printf(&quot;%d-%c-%s-%f\n&quot;, 9527, &#39;A&#39;, &quot;Hello&quot;, 3.14);    int printf(const void *format, ...)//不定参的函数    &#123;        int i = 0;        for(i = 0; format[i] != &#39;\0&#39;; i++)        &#123;            if(format[i] == &#39;%&#39;)            &#123;                i++;                switch(format[i])                &#123;                    case &#39;d&#39; :                     case &#39;c&#39; :                    case &#39;s&#39; :                    case &#39;f&#39; :                &#125;            &#125;            else            &#123;                fgetc();            &#125;        &#125;    &#125;    1.标准库中没有实现itoa函数,但是有sprintf函数    printf一族的函数    printf-&gt;把双引号的内容打印输出到标准输出中    sprintf-&gt;把双引号的内容打印输出到字符数组中    fprintf-&gt;把双引号的内容打印输出到文件中    如果在默认环境中直接使用printf或者scanf函数,单片机的程序会直接跑飞    因为printf和scanf函数它的操作对象是标准输入和标准输出,    是有操作系统的环境下,但是单片机是裸板,没有操作系统    2.如果想要在STM32环境中使用printf和scanf函数,需要做一些特殊处理    需要把printf函数和scanf函数重定向到串口的发送和串口的接收    推荐两种方法        1)使用微库(Micro Lib)        可以使用微库来替代C语言的标准库,        微库主要是给容量比较小的芯片进行使用的,        但是如果芯片本身容量够用不建议使用微库,        因为微库实现的函数相较于C语言标准库来说不完整,        而且在使用一些大型功能的函数的时候,        微库的效率要比C语言标准库低            1&gt;开启微库            第三行菜单栏-&gt;Options for target-&gt;target菜单中-&gt;            在右边栏中-&gt;选中USE Micro LIB            2&gt;把printf和scanf函数的实现重定向到            USART1的发送和接收,            把fgetc和fputc函数的功能重定向到            USART1的发送和接收            int fgetc(FILE *f);            int fputc(int c, FILE *f);        2)禁用半主机模式        半主机模式是由ARM核心提供的一种机制        主要是因为ARM核心在研发的时候,ARM公司并不确定将来会和        哪家半导体厂商合作,也不确定将来半导体厂商会在芯片上连接        什么样的输入设备和输出设备        所以,ARM公司在研发核心的时候会启用一种半主机模式        ARM平台会通过仿真器/调制器可以把ARM核心中的输入输出        重定向到X86平台        现在我们需要把输入输出重定向到USART1的发送和接收上        所以需要禁用半主机模式    </code></pre><h1 id="三-引出后续内容"><a href="#三-引出后续内容" class="headerlink" title="三.引出后续内容"></a>三.引出后续内容</h1><pre><code>    1.完成了发送字符和发送字符串的函数        将来操作无线模块可以发送AT指令        AT指令是由&#39;A&#39;和&#39;T&#39;组成的字符串        SSID是路由器的名称,password是路由器的密码        AT+CWJAP=&quot;SSID&quot;,&quot;password&quot;        &quot;AT+CWJAP=&quot;Easthome&quot;,&quot;123456&quot;\r\n&quot;    usart_2_send_data(&quot;AT+CWJAP=&quot;Easthome&quot;,&quot;123456&quot;\r\n&quot;);    usart_2_send_data(&quot;AT+CWJAP=&quot;);    usart_2_send_byte(&#39;&quot;&#39;);    usart_2_send_data(&quot;Easthome&quot;);    usart_2_send_byte(&#39;&quot;&#39;);    usart_2_send_byte(&#39;,&#39;);    usart_2_send_byte(&#39;&quot;&#39;);    usart_2_send_data(&quot;123456&quot;);    usart_2_send_byte(&#39;&quot;&#39;);    usart_2_send_data(&quot;\r\n&quot;);===========================================作业    1.复习    2.模拟工业物联网控制台指令收发器    在串口调试助手中发送&quot;L0_ON&quot;,开发板接收到之后点亮LED0    在串口调试助手中发送&quot;L1_ON&quot;,开发板接收到之后点亮LED1    在串口调试助手中发送&quot;L2_ON&quot;,开发板接收到之后点亮LED2    在串口调试助手中发送&quot;BE_ON&quot;,开发板接收到之后打开蜂鸣器    在串口调试助手中发送&quot;L0_OFF&quot;,开发板接收到之后关闭LED0    在串口调试助手中发送&quot;L1_OFF&quot;,开发板接收到之后关闭LED1    在串口调试助手中发送&quot;L2_OFF&quot;,开发板接收到之后关闭LED2    在串口调试助手中发送&quot;BE_OFF&quot;,开发板接收到之后关闭蜂鸣器    3.模拟ESP8266内部的AT指令操作    接收一个字符串-&gt;驱动WiFi(内部支持AT指令)        在串口调试助手中发送&quot;+IPD,10:0123456789&quot;    +IPD,XX:YYYYYYYYYY    X部分是接收到的数据的字节数    Y部分是真正的数据    4.根据开发板原理图找到USART3的管脚,和组内成员测试===========================================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_12day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_12day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_12day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-30<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    USART1的驱动    初始化    发送数据        发送一个字节数据        发送多个字节数据            通过遍历有效数据            把数据按照一个字节一个字节的方式进行发送        printf进行重定向(重定向到USART1的发送)            使用微库            禁用半主机模式            以上两种方法都需要重新实现fgetc以及fputc函数    接收数据        轮询接收数据        中断接收数据            使用有限状态机的方法解析字符串数据    &quot;+IPD,XX:YYYYYYY&quot;    XX指的是接收到数据的字节数    YY指的是真实数据    &quot;+IPD,12:abcdefghijkl&quot;#define A_FLAG 0#define I_FLAG 1#define P_FLAG 2#define D_FLAG 3#define H_FLAG 4#define M_FLAG 5#define S_FLAG 6int flag = A_FLAG;char bytes[4] = &#123;0&#125;;//存储数据的字节数(字符串版本)int i = 0;//循环变量int length = 0;//存储数据的字节数(整数版本)char data[128] = &#123;0&#125;;//存储数据void recv_handler(u8 c)&#123;    switch(flag)    &#123;        case A_FLAG : if(c == &#39;+&#39;)                    flag = I_FLAG;                break;        case I_FLAG :if(c == &#39;I&#39;)                    flag = P_FLAG;                else                    flag = A_FLAG;                break;        case P_FLAG :if(c == &#39;P&#39;)                    flag = D_FLAG;                else                    flag = A_FLAG;                break;        case D_FLAG:if(c == &#39;D&#39;)                    flag = H_FLAG;                else                    flag = A_FLAG;                break;        case H_FLAG :if(c == &#39;,&#39;)                    flag = M_FLAG;                else                    flag = A_FLAG;                break;        case M_FLAG :if(c == &#39;:&#39;)                    flag = S_FLAG;                else                    bytes[i++] = c;                break;        case S_FLAG :length = atoi(bytes);                while(length--)                    data[] = c;    &#125;&#125;</code></pre><h1 id="二-串口之I²C"><a href="#二-串口之I²C" class="headerlink" title="二.串口之I²C"></a>二.串口之I²C</h1><pre><code>    1.I²C的简介    IIC也称为I2C或者I²C(专业的写法就是I²C),属于串行总线中的一种,    也是数据按顺序一位一位进行发送    I²C必须要有两条线(一条是数据线&lt;SDA&gt;、一条是时钟线&lt;SCL&gt;),是半双工的工作模式    2.I²C与USART的对比    USART : 通用的同步异步收发器    两条数据线(一条是发送、一条是接收)    属于全双工的工作模式    由于没有时钟线,所以设备通过USART通信之前需要规定好双方的波特率    I²C : 集成电路总线    两条线(一条是数据线&lt;SDA&gt;、一条是时钟线&lt;SCL&gt;)    属于半双工的工作模式    由于有时钟线,可以自行调节读写速率,所以不需要规定双方的比特率    3.I²C总线协议的目的    需要驱动开发板上的OLED屏幕、EEPROM、SHT30    1)需要带着大家把EEPROM的外设驱动起来    2)需要带着大家把OLED的驱动移植成功    3)自己想办法驱动SHT30        4.通过官方手册了解I²C的协议    打开&lt;STM32RBT6\DataSheet\其他&gt;目录下&lt;IIC.pdf&gt;P7 - P14中的图    1)I²C总线需要两条线(SDA/SCL),在I²C总线上可以连接很多的设备,        设备与设备之间是串联的关系    2)凡是连接到I²C总线上的设备都需要有一个设备地址        注意:一般来说设备地址是7bit的    --------------------------------------------------------------------------    面试题    1.I²C总线理论上可以连接多少个设备?理论上128个设备(设备地址)    --------------------------------------------------------------------------    3)I²C总线进行通信时会分为主设备和从设备        主设备是主动的,从设备是被动的        I²C总线本身非常公平,任何连接到I²C总线上的设备都既可以做主也可以做从        (注意:有些设备由于本身的原因只能做从设备做不了主设备)        如果两个设备同时都想要通信,会触发抢主的机制        抢到主的设备优先通信,没抢到主的设备等待通信完成之后,再重新抢主        (注意:抢主的机制,就是谁先产生开始信号,谁就优先通信)    4)I²C总线在空闲状态时,SDA和SCL要呈现高电平的状态(需要外接上拉电阻)    5)开始信号和结束信号        开始信号 : 在SCL为高电平的时候,SDA由高电平拉到低电平        结束信号 : 在SCL为高电平的时候,SDA由低电平拉到高电平    6)传输数据        1&gt;在SCL为低电平的时候,把数据放到SDA数据线上        2&gt;拉高SCL,当SCL为高电平的时候,SDA的电平要保持不变        3&gt;拉低SCL,在SCL为低电平的时候,切换下一位数据放到SDA数据线上    7)I²C总线是高位先出    8)I²C总线在传输一个字节数据时需要9个周期        9个周期 = 8个数据周期 + 1个ACK(应答)周期    9)I²C总线属于停等式的流控,每发送完一个字节数据都需要有一个ACK应答    A)产生应答 : 在SCL的第9个周期,SCL拉低,从设备拉低SDA,拉高SCL.延时一段时间        把SCL拉低,从设备拉高SDA    B)读取应答 : 在SCL的第9个周期,在SCL为高电平时读取SDA的电平        如果读取到了高电平代表没有ACK,如果读取到了低电平代表有ACK    C)I²C总线产生开始信号之后,        发送的第一个字节内容是 = 7bit设备地址 + 1bit读写标志位    D)主设备发送数据给从设备        1&gt;主设备产生开始信号        2&gt;主设备发送从设备的设备地址 + 写的标志(0)        3&gt;主设备等待ACK        4&gt;主设备发送一个字节数据        5&gt;主设备等待ACK        ...        n&gt;主设备发送最后一个字节数据        n+1&gt;主设备可以等待ACK或者不等待ACK        n+2&gt;主设备产生结束信号    E)主设备读取从设备发送的数据        1&gt;主设备产生开始信号        2&gt;主设备发送从设备的设备地址 + 读的标志(1)        3&gt;主设备等待ACK        4&gt;主设备等待接收一个字节数据        5&gt;主设备产生ACK        ...        n&gt;主设备等待接收最后一个字节数据        n+1&gt;主设备不需要产生ACK        n+2&gt;主设备产生结束信号</code></pre><p>IIC<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/01.IIC.png"></p><p>02.IIC硬件连接<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/02.IIC%E7%A1%AC%E4%BB%B6%E8%BF%9E%E6%8E%A5.png"></p><p>03.IIC协议要求<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/03.IIC%E5%8D%8F%E8%AE%AE%E8%A6%81%E6%B1%82.png"></p><p>04.IIC协议(开始信号结束信号)<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/04.IIC%E5%8D%8F%E8%AE%AE(%E5%BC%80%E5%A7%8B%E4%BF%A1%E5%8F%B7%E7%BB%93%E6%9D%9F%E4%BF%A1%E5%8F%B7).png"></p><p>05.IIC协议_详细<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/05.IIC%E5%8D%8F%E8%AE%AE_%E8%AF%A6%E7%BB%86.png"></p><p>06.IIC协议_ACK产生<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/06.IIC%E5%8D%8F%E8%AE%AE_ACK%E4%BA%A7%E7%94%9F.png"></p><p>07.IIC_主的编程<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/07.IIC_%E4%B8%BB%E7%9A%84%E7%BC%96%E7%A8%8B.png"></p><p>开发板上的IIC设备<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E7%9A%84IIC%E8%AE%BE%E5%A4%87.png"></p><p>学生发的笔试题<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/12day/%E5%AD%A6%E7%94%9F%E5%8F%91%E7%9A%84%E7%AC%94%E8%AF%95%E9%A2%98.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_08day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_08day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_08day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-24<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    其他的定时器主要讲的是看门狗    1.通过最新选型手册了解-&gt;有两个看门狗外设资源-&gt;属于定时器外设    2.看门狗使用的环境    3.喂狗的操作    4.独立看门狗和窗口看门狗的区别    5.独立看门狗    IWDG_KR(键寄存器)&lt;接收特定的值,执行特定的操作&gt;    0x5555开启(IWDG_PR和IWDG_RLR寄存器)写访问(关闭写保护)    0xCCCC开启看门狗    0xAAAA喂狗的操作    IWDG_PR(预分频值寄存器) &lt;用来给时钟频率分频的&gt;    000 4分频100 64分频    001 8分频101 128分频    010 16分频110 256分频    011 32分频111 245分频    IWDG_RLR(重装载值寄存器) &lt;用来保存计数值的&gt;    计数值范围[12个0 - 12个1]&lt;0 - 4095&gt;        传感器    市面上比较常见的传感器    传感器的接口    通过DHT11的手册分析DHT11传感器    1.温湿度的传感器    2.4管脚的封装形式        1PINVCC        2PINDATA        3PINNC        4PINGND    3.测量范围 : 湿度20 - 90%  温度0 - 50℃    4.误差范围 : 湿度±5%         温度±2℃    5.分辨力1 : 只能采集到整数的数据,采集不了小数数据    6.串行接口(单线双向)        串行接口 : 以串行的方式传输数据,数据按照顺序一位一位发送        单线双向 : 半双工的工作模式    7.高位先出    8.一次完整的数据需要40bit = 8bit湿度的整数数据 + 8bit湿度的小数数据            + 8bit温度的整数数据 + 8bit温度的小数数据            + 8bit校验和    9.分析读写时序    10.串行接口发送数据接收数据(高位先出、低位先出)</code></pre><h1 id="二-驱动DHT11"><a href="#二-驱动DHT11" class="headerlink" title="二.驱动DHT11"></a>二.驱动DHT11</h1><h1 id="三-DS18B20"><a href="#三-DS18B20" class="headerlink" title="三.DS18B20"></a>三.DS18B20</h1><pre><code>    专门用来检测温度的传感器    打开&lt;STM32RBT6\DataSheet\传感器&gt;目录下&lt;DS18B20.pdf&gt;    1.DS18B20是3管脚的封装形式(VCC DQ GND)    2.DS18B20是一线传输的传感器(只有一条数据线&lt;既需要输入也需要输出&gt;)    3.电压范围3.0V - 5.5V    4.测量范围-55℃ - +125℃    5.误差范围(在-10℃ - +85℃)会有±0.5℃的误差    6.DS18B20既可以采集到整数数据也可以采集到小数数据    7.DS18B20采集到的数据会存放在9bit - 12bit的存储空间中    8.转换12bit的温度数据最多需要消耗750ms    9.在DS18B20传感器内部有9个字节的暂存器        第0个字节温度的低字节数据        第1个字节温度的高字节数据        第2个字节温度的上限        第3个字节温度的下限        第4个字节配置        第5 6 7字节保留        第8个字节校验    A.通过配置暂存器的第4个字节(配置)来选择采集温度数据所占位数        0 R1 R0 1 1 1 1 1        第0-4位都是1        通过R1 R0选择温度所占位数        0 09bit        0 110bit        1 011bit        1 112bit        第7位是0    B.用来存储温度的暂存器        温度的高字节的高5位是符号位(0代表正1代表负)        DS18B20的分辨力是0.0625℃        DS18B20的暂存器存储的也是补码数据        所以将来从DS18B20的暂存器中读出的数据是补码    -0.5°C    原码11111000 00001000    补码11111111 11111000    注意 : 读取数据有一个特殊值    假如将来读到的数据是        11111111 00000000    补码11111111 00000000    原码11111001 00000000    因为高字节和低字节的数据都要+1        低字节的+1 : 补码转换成原码时候的+1        高字节的+1 : 是因为产生了进位所以要+1    C.DS18B20内部支持很多的指令    D.手册中给驱动工程师写了案例    E.分析DS18B20的时序图</code></pre><h1 id="四-数码管"><a href="#四-数码管" class="headerlink" title="四.数码管"></a>四.数码管</h1><pre><code>    1.显示类的设备    LCD显示屏、OLED屏幕、段码屏(需要厂家定制)、点阵屏、光立方、数码管    作用就是用来显示数据的    其中数码管可以显示数字0 - 9包括一些简单的英文字母    2.数码管    常见的数码管有七段数码管或者八段数码管    其中每一个段就相当于是一个LED灯    八段数码管要比七段数码管多一个用于显示小数的小数点    3.共阴极数码管和共阳极数码管    共阴极数码管 : 数码管中所有数据段的阴极都连接到了一起,接地            给数据段的阳极输出高电平,可以点亮数码管    共阳极数码管 : 数码管中所有数据段的阳极都连接到了一起,接电源            给数据段的阴极输出低电平,可以点亮数码管    各自的编码 :     共阳极数码管的编码    uchar code table[]=&#123;0xc0,0xf9,0xa4,0xb0,//0 1 2 3            0x99,0x92,0x82,0xf8,//4 5 6 7            0x80,0x90,0x88,0x83,//8 9 A B            0xc6,0xa1,0x86,0x8e&#125;;//C D E F    共阴极数码管的编码：    uchar code table[]=&#123;0x3f,0x06,0x5b,0x4f,//0 1 2 3            0x66,0x6d,0x7d,0x07,//4 5 6 7            0x7f,0x6f,0x77,0x7c,//8 9 A B            0x39,0x5e,0x79,0x71&#125;;//C D E F    4.四位共阴极数码管    我们的开发板上连接的是四位共阴极的数码管    产生的问题    如果四位数码管的所有数据段都连接到芯片的管脚上就会占用32个管脚    这样对于芯片的管脚太浪费了    ------------------------------------------------------------------------    为了解决芯片管脚浪费的问题    把四位数码管的所有的A段都连接到了一起    把四位数码管的所有的B段都连接到了一起    ...    把四位数码管的所有的DP段都连接到了一起    这样处理只会消耗芯片的8个管脚    产生的问题    给8个数据段写入编码,四个数码管会显示相同的数据    ------------------------------------------------------------------------    四位数码管的公共端接到芯片的管脚上    将来想要让某个数码管显示数据,就让该数码管的公共端有效,    其他数码管的公共端无效即可    产生的问题    四位数码管不能同时显示数据(只能一个一个显示)    ------------------------------------------------------------------------    可以利用人类眼睛的视觉暂留处理=============================作业1.把今天讲过的内容完完整整的复习一遍=============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_09day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_09day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_09day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-25<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.根据分析的DHT11的读写时序来写DHT11传感器的驱动    2.分析DS18B20传感器的内容        1)三管脚的封装形式(VCC DQ GND)        2)一线传输(以串行的方式传输数据)&lt;半双工的工作模式&gt;        3)工作电压范围3.0V - 5.5V        4)测量范围-55℃ - +125℃        5)误差范围(在-10℃ - 85℃)会有±0.5℃的误差        6)可以采集到整数的数据和小数的数据        7)在DS18B20的内部会有9个字节的暂存器        第0个字节温度的低字节数据        第1个字节温度的高字节数据            高字节的高5位是符号位            存储的是温度的补码数据        第2个字节温度的上限        第3个字节温度的下限        第4个字节配置            是用来配置DS18B20采集温度所占位数            0 R1 R0 1 1 1 1 1            009bit的温度数据            0110bit的温度数据            1011bit的温度数据            1112bit的温度数据        第5 6 7字节保留        第8个字节检验        8)在DS18B20传感器中支持很多的指令        9)DS18B20官方手册给了发送指令的案例        A)分析DS18B20的读写时序</code></pre><h1 id="二-数码管"><a href="#二-数码管" class="headerlink" title="二.数码管"></a>二.数码管</h1><pre><code>    我们的开发板上使用的四位共阴极的数码管    1.显示类的设备    市面上的显示类型的设备有很多种    LCD、OLED、数码管、段码屏、点阵屏、光立方...    2.数码管    数码管可以分为七段数码管和八段数码管    八段数码管要比七段数码管多一个用于显示小数的小数点    数码管中的每一个段就相当于是一个LED灯    3.共阴极数码管和共阳极数码管    共阴极数码管 : 数码管上所有的LED灯的阴极都连接到了一起,接地    共阳极数码管 : 数码管上所有的LED灯的阳极都连接到了一起,接电源    共阴极数码管的编码和共阳极数码管的编码正好相反    共阳极数码管的编码 :    uchar code table[]=&#123;0xc0,0xf9,0xa4,0xb0,//0 1 2 3            0x99,0x92,0x82,0xf8,//4 5 6 7            0x80,0x90,0x88,0x83,//8 9 A B            0xc6,0xa1,0x86,0x8e&#125;;//C D E F    共阴极数码管的编码 :    uchar code table[]=&#123;0x3f,0x06,0x5b,0x4f,//0 1 2 3            0x66,0x6d,0x7d,0x07,//4 5 6 7            0x7f,0x6f,0x77,0x7c,//8 9 A B            0x39,0x5e,0x79,0x71&#125;;//C D E F    如何获取数码管的编码    1)可以百度查找    2)可以通过转换软件直接转换    4.四位数码管    四位数码管可以分别显示千位 百位 十位 个位    已知一个数码管有8个LED灯需要8个数据段    四位数码管有32个LED灯需要32个数据段    如果直接连接到芯片的管脚上需要消耗芯片的32个管脚    这样的方式对于芯片的管脚来说太浪费了    5.四位数码管的问题</code></pre><p>原理图<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/09day/7_%E5%8E%9F%E7%90%86%E5%9B%BE.png"></p><pre><code>        1)芯片管脚的浪费        把所有数码管的A段都连接到一起        把所有数码管的B段都连接到一起        ...        把所有数码管的DP段都连接到一起        2)相同数据段都连接到了一起        给四位数码管一个数据编码,这4个数码管会显示相同的数据        3)把四位数码管的4个公共端也都连接到GPIO的管脚上        将来想要让某个数码管显示数据,就让给数码管的公共端输出低电平        其他数码管输出高电平        4)经过2) 3)的处理产生了一个问题,            四位数码管不能同时显示不同的数据        利用人眼睛的视觉暂留    6.分析开发板原理图        开发板上的四位共阴极的数码管        公共端连接到了74HC138模块上        数据段连接到了74HC595模块上        如果想要驱动数码管,首先需要驱动74HC138和74HC595    7.分析74HC138</code></pre><p>74HC138<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/09day/5_74HC138.png"></p><pre><code>        74HC138是一个典型的三八译码器(是作为一个选择器来使用的)        三个输入,八个输出(给一定的输入就会用相应的输出)    打开&lt;STM32RBT6\DataSheet\其他&gt;目录下&lt;74HC138.pdf&gt;        P3封装形式(了解管脚功能)        P4真值表        查看开发板原理图            8.</code></pre><p>74HC595<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/09day/6_74HC595.png"></p><pre><code>        74HC595是一个可以把串行数据转换成并行数据的模块    打开&lt;STM32RBT6\DataSheet\其他&gt;目录下&lt;74HC595.pdf&gt;        P4封装形式(了解管脚功能)        P5工作原理分析            9.根据开发板原理图把需要操作的管脚找到    HC138_A0PC1174HC138中的控制推挽输出    HC138_A1PC1274HC138中的控制推挽输出    HC138_A2PD274HC138中的控制推挽输出    HC595_SCLKPB5移位寄存器的时钟推挽输出    HC595_LCLKPB4存储寄存器的时钟推挽输出    HC595_DATAPB3把串行数据存储到推挽输出                移位寄存器中==============================任务1.把9527显示到数码管上2.把DHT11采集的温湿度的数据显示到数码管上==============================作业1.把今天讲过的内容完整的复习一遍2.把开发板作为记秒表的设备    KEY0开始记秒表    KEY1暂停    KEY2清零    00.00    秒数.==============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_03day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_03day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_03day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-17<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    从表象到里象的方式去了解设备    1.从外观入手        开发板上外接了哪些模块、使用芯片的型号    2.画图了解芯片内部结构        CPU + 内存 + 硬盘 + 外设    3.介绍了ARM公司和ST公司        ARM-CORTEX-A针对高端应用(手机 平板电脑 安卓电视)        ARM-CORTEX-R针对实时操作系统(军工、航天、医疗)        ARM-CORTEX-M针对工控领域(智能终端设备)    4.通过手册了解芯片        最新选型手册 : 外设数量、存储大小、封装形式    5.开发方式    6.搭建模板项目工程</code></pre><h1 id="二-通过硬件的手册了解芯片内部的结构"><a href="#二-通过硬件的手册了解芯片内部的结构" class="headerlink" title="二.通过硬件的手册了解芯片内部的结构"></a>二.通过硬件的手册了解芯片内部的结构</h1><pre><code>    打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下&lt;STM32F103RB.pdf&gt;    P19芯片内部的结构        1.STGM32F103RBT6芯片使用的CPU是ARM-CORTEX-M3主频是72MHz    2.CPU是通过三总线来访问外设的    3.三总线包括 : 数据总线(传输数据) 地址总线(传输地址) 控制总线(控制读写)    --------------------------------------------------------    例子 :    在某工程中,要求给地址为0xaa55的空间复制一个整型的数据,    数据为0x55aa    0xaa55 = 0x55aa;.//不可以,因为左值是一个常量    *(volatile unsigned int *)(0xaa55) = 0x55aa;    --------------------------------------------------------    4.在STM32芯片中AHB AHB1 AHB2都是三总线,叫做高速总线        APB1 APB2也是三总线,叫做外设总线    5.GPIO的管脚是从0开始计数的        GPIOxy        [x = A B C D]        [y = 0 1 2 ... 15]    6.大部分的外设都是连接到了外设总线上,所以当某个外设工作时    需要先通过相应的外设总线打开外设的时钟,该外设才能工作        P23芯片的管脚    GPIOA[0 - 15]    GPIOB[0 - 15]    GPIOC[0 - 15]    GPIOD[0 1 2]    P26芯片管脚的复用    芯片的管脚是多功能复用型的管脚        输入功能            上拉输入            下拉输入            浮空输入        输出功能            推挽输出            开漏输出        复用功能            推挽复用            开漏复用        模拟功能            模拟输入</code></pre><h1 id="三-GPIO外设之输出功能"><a href="#三-GPIO外设之输出功能" class="headerlink" title="三.GPIO外设之输出功能"></a>三.GPIO外设之输出功能</h1><pre><code>    输入功能相当于是检测,输出功能相当于是控制    输出功能分为推挽输出和开漏(漏级)输出    推挽输出 : 管脚既可以输出高电平,也可以输出低电平    开漏输出 : 管脚只能输出低电平,输出不了高电平    LED-&gt;PC9管脚    如果PC9管脚输出高电平,LED灯灭    如果PC9管脚输出低电平,LED灯亮</code></pre><p>01LED灯<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/03day/01LED%E7%81%AF.png"></p><pre><code>    问题 : 芯片的管脚是多功能复用型的管脚,如何给管脚选择输出功能?    答 : 可以通过操作GPIO外设的寄存器来选择输出的功能    问题 : GPIO都有哪些寄存器?    答 : 可以通过查询芯片的手册了解GPIO的寄存器以及操作方式打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下&lt;STM32F10x中文参考手册.pdf&gt;寄存器的真实地址 = 基地址 + 偏移地址例如 : GPIOC_CRL的真实地址 = GPIOC组的基地址 + CRL寄存器的偏移地址        = 0x40011000 + 0x00因为需要操作PC9管脚，所以需要使用端口配置高寄存器GPIOC_CRH的真实地址 = GPIOC组的基地址 + CRH寄存器的偏移地址        = 0x40011000 + 0x04#define GPIOC_CRH *(volatile unsigned int *)(0x40011000 + 0x04)GPIOC_CRH |= (3 &lt;&lt; 4);//把PC9管脚配置为输出功能并且为50MHz的输出速率-----------------------------------------------------------------------------300000000 00000000 00000000 000000113&lt;&lt;400000000 00000000 00000000 00110000    |GPIOC_CRHxxxxxxxx xxxxxxxx xxxxxxxx xx##xxxx    =GPIOC_CRHxxxxxxxx xxxxxxxx xxxxxxxx xx11xxxx-----------------------------------------------------------------------------GPIOC_CRH &amp;= ~(3 &lt;&lt; 6);.//把PC9管脚配置为推挽输出-----------------------------------------------------------------------------300000000 00000000 00000000 000000113&lt;&lt;600000000 00000000 00000000 11000000~(3&lt;&lt;6)11111111 11111111 11111111 00111111    &amp;GPIOC_CRHxxxxxxxx xxxxxxxx xxxxxxxx ##11xxxx    =GPIOC_CRHxxxxxxxx xxxxxxxx xxxxxxxx 0011xxxx-----------------------------------------------------------------------------#define GPIOC_ODR *(volatile unsigned int *)(0x40011000 + 0x0C)GPIOC_ODR &amp;= ~(1 &lt;&lt; 9);//把PC9管脚输出低电平(亮灯)GPIOC_ODR |= (1 &lt;&lt; 9);//把PC9管脚输出高电平(灭灯)</code></pre><h1 id="四-通过开发板原理图查看芯片的管脚"><a href="#四-通过开发板原理图查看芯片的管脚" class="headerlink" title="四.通过开发板原理图查看芯片的管脚"></a>四.通过开发板原理图查看芯片的管脚</h1><pre><code>    打开&lt;STM32RBT6\开发板原理图&gt;目录下&lt;MCU.pdf&gt;和&lt;Periph.pdf&gt;    LED0PC1    LED1PC2    LED2PC3    输出高电平,灯亮    输出低电平,灯灭    需要操作GPIOC_CRL(端口配置低寄存器)以及        GPIOC_ODR(端口输出数据寄存器)</code></pre><h1 id="五-写程序驱动LED灯"><a href="#五-写程序驱动LED灯" class="headerlink" title="五.写程序驱动LED灯"></a>五.写程序驱动LED灯</h1><pre><code>    1.通过开发板原理图找到LED灯连接的管脚    2.分析模块的工作方式    3.把最近的一个项目工程拷贝一份重命名一下    4.在&lt;02led/mylib&gt;目录中新建&lt;led.c&gt;和&lt;led.h&gt;    5.在&lt;02led/project&gt;目录中找到项目工程文件,并且打开    6.在Keil的左边侧边栏中的mylib组内添加led.c文件</code></pre><h1 id="六-举一反三"><a href="#六-举一反三" class="headerlink" title="六.举一反三"></a>六.举一反三</h1><pre><code>    大家通过&lt;02led&gt;的项目工程,尝试着搭建&lt;03beep&gt;的项目工程    效果    在流水灯的基础上加入蜂鸣器    0 1 2    0-&gt;1-&gt;2-&gt;0-&gt;1-&gt;2    灯亮的同时蜂鸣器响,灯灭的同时蜂鸣器关闭=================================作业1.把今天讲过的内容完完整整的复习一遍2.把举一反三的内容做出来3.刷题课外自己找音乐的编码把音乐通过蜂鸣器播放出来=================================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_04day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_04day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_04day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-18<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.通过讲硬件的手册了解芯片内部结构        CPU使用的是ARM-CORTEX-M3的核心,主频是72MHz        CPU是通过三总线(数据 地址 控制)来访问外设的        在STM32中AHB AHB1 AHB2都是三总线叫做高速总线        在STM32中APB1 APB2也是三总线叫做外设总线        芯片的管脚是多功能复用型的管脚    2.GPIO的输出        驱动LED灯        选择了操作外设的寄存器的开发方式(需要使用C语言的位运算符)        寄存器的真实地址 = 基地址 + 偏移地址        *(volatile unsigned int *)(0x40011000 + 0x0C)        举一反三        驱动蜂鸣器        BEEPPC7        管脚输出高电平,蜂鸣器响        管脚输出低电平,蜂鸣器不响</code></pre><h1 id="二-GPIO的输入"><a href="#二-GPIO的输入" class="headerlink" title="二.GPIO的输入"></a>二.GPIO的输入</h1><pre><code>    输入功能相当于检测,输出功能相当于控制    输入功能分为    上拉输入管脚在没有外设操作的情况下,默认呈现的是高电平的状态            对于低电平有触发效果    下拉输入管脚在没有外设操作的情况下,默认呈现的是低电平的状态            对于高电平有触发效果    浮空输入管脚在没有外设操作的情况下,默认呈现的既不是高也不是低            会对于外界的影响而变化        (当在操作串口外设功能时会用到浮空输入)    驱动开发板上的功能按键    1.查看开发板原理图        KEY0PC9上拉输入        KEY1PC8上拉输入        KEY2PA0下拉输入        KEY0 KEY1在没有按下时应当检测到高电平,按下应当检测到低电平        KEY2在没有按下时应当检测到低电平,按下应当检测到高电平    2.查看芯片的手册    #define GPIOC_IDR *(volatile unsigned int *)(GPIOC_BASE + 0x08)    如何读取第9位的电平高低？    ret = (GPIOC_IDR &gt;&gt; 9) &amp; 0x01;    3.写功能按键的驱动程序    ST的官方固件大部分的参数都是按照位图来定义的    以位图的形式定义    GPIOA0x00010001    GPIOB0x00020010    GPIOC0x00040100    GPIOD0x00081000    GPIOA | GPIOB = 0011    不是以位图的形式定义    GPIOA0x00010001    GPIOB0x00020010    GPIOC0x00030011    GPIOD0x00040100    GPIOA | GPIOB = 0011</code></pre><h1 id="三-换一种开发方式"><a href="#三-换一种开发方式" class="headerlink" title="三.换一种开发方式"></a>三.换一种开发方式</h1><pre><code>    需要调用ST公司的官方固件    手册是辅助大家开发的,千万不要本末倒置</code></pre><h1 id="四-演示未来的开发方式"><a href="#四-演示未来的开发方式" class="headerlink" title="四.演示未来的开发方式"></a>四.演示未来的开发方式</h1><pre><code>    STM32CUBEMX + Keil===============================作业1.把今天讲过的内容完整的复习一遍2.把&lt;01test&gt;项目工程拷贝一份,用LIB库实现LED灯、蜂鸣器、功能按键3.完成需求    通过3个功能按键,控制3个LED灯(开关)    当按下抬起KEY0,LED0常亮,当再一次按下抬起KEY0,LED0常灭    当按下抬起KEY1,LED1常亮,当再一次按下抬起KEY1,LED1常灭    当按下抬起KEY2,LED2常亮,当再一次按下抬起KEY2,LED2常灭===============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_05day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_05day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_05day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-19<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.GPIO的输出实验-&gt;蜂鸣器    2.GPIO的输入实验-&gt;功能按键        检测按键是否被按下        (轮询 和 中断)    3.更换开发方式-&gt;调用ST公司的LIB库    4.演示STM32CUBEMX工具的使用</code></pre><h1 id="二-位带-bitband"><a href="#二-位带-bitband" class="headerlink" title="二.位带(bitband)"></a>二.位带(bitband)</h1><pre><code>    位带可以以原子操作的方式操作寄存器中的某些位    1.引出位带    ----------------------------------------------------    例子 :     想要把十进制整数100,赋值到0x12345678地址中?    *(volatile unsigned int *)(0x12345678) = 100;    一次性操作32bit    ----------------------------------------------------    例子:    想要把0x12345678地址中的第9bit,置1    *(volatile unsigned int *)(0x12345678) |= (1 &lt;&lt; 9);    想要把0x12345678地址中的第8bit,清0    *(volatile unsigned int *)(0x12345678) &amp;= ~(1 &lt;&lt; 8);    一次操作1bit    ----------------------------------------------------    但是上述直接给某一个位赋值的操作,不是原子操作    原子操作 : 就是不可分割的操作,原子操作在执行结束前,        不会被任何信号或者任何中断打断        2.介绍位带    位带并不是C语言提供的,是硬件提供的,并不是STM32芯片提供的,        而是由ARM-CORTEX-M3的核心提供的    ----------------------------------------------------    位带和位域有点类似    ----------------------------------------------------    打开&lt;STM32RBT6\DataSheet\ARM-CORTEX-M&gt;目录下        &lt;Cortex-M3权威指南CnR2（电子书）.pdf&gt;    P83查看存储器的映射    ARM-CORTEX-M3支持访问4Gb的空间大小(物理的空间)    只有片上SRAM开头的1Mb空间和片上外设的1MB空间支持位带访问    位带的操作其实    就是把位带区中的每一位都做一个地址别名,映射到位带别名区    将来在访问位带别名区的空间时,就相当于是在访问位带区中某一位    位带区的空间有1M个字节,等于有8M个位,每一位都做一个地址别名映射到    位带别名区,映射的地址需要以4字节的方式对齐,所以    位带区的1MB会在位带别名区膨胀成32MB    虽然片上SRAM和片上外设都支持位带访问,    但是片上外设的位带操作会用的更多一些(尤其是GPIO的输入与输出)    3.位带转换的表达式    可以把位带转换的操作封装成宏函数#define BITBAND(ADDR, BITNUM)((ADDR&amp;0xF0000000)+0x2000000+((ADDR&amp;0xFFFFF)&lt;&lt;5)+(BITNUM&lt;&lt;2))#define MEM_ADDR(ADDR) *(volatile unsigned int *)(ADDR)#define BIT_BAND(ADDR,BITNUM) MEM_ADDR(BITBAND(ADDR, BITNUM))                    #define GPIOA_IDR (GPIOA_BASE + 0x08)#define GPIOA_ODR (GPIOA_BASE + 0x0C)#define GPIOB_IDR (GPIOB_BASE + 0x08)#define GPIOB_ODR (GPIOB_BASE + 0x0C)#define GPIOC_IDR (GPIOC_BASE + 0x08)#define GPIOC_ODR (GPIOC_BASE + 0x0C)#define GPIOD_IDR (GPIOD_BASE + 0x08)#define GPIOD_ODR (GPIOD_BASE + 0x0C)#define PAOut(BITNUM) BIT_BAND(GPIOA_ODR, BITNUM)#define PAIn(BITNUM) BIT_BAND(GPIOA_IDR, BITNUM)PAOut(9) = 1;//把PA9管脚拉高PAOut(8) = 0;//把PA8管脚拉低    ret = PAIn(0);//读取PA0管脚的电平高低    4.在项目工程中引入位带的操作    </code></pre><h1 id="三-定时器"><a href="#三-定时器" class="headerlink" title="三.定时器"></a>三.定时器</h1><pre><code>    流水灯的程序中需要使用延时(精确延时 和 粗略延时)    精确延时需要使用定时器    无论何种定时器都是由两个因素来决定定时长短的    时钟频率 和 计数值计数值10    10      72000000  72000    72         72 / 1000时钟频率1Hz  10Hz  72MHz      72MHz  72MHz  72MHz定时时间10s   1s   1s              1ms       1us       1ns    1s = 1000ms = 1000000us = 1000000000ns</code></pre><h1 id="四-系统定时器"><a href="#四-系统定时器" class="headerlink" title="四.系统定时器"></a>四.系统定时器</h1><pre><code>    通过最新选型手册可知,在STM32芯片中有非常丰富的定时器资源    可以分为普通定时器和其他(特殊)定时器    除了STM32芯片为程序员提供了定时器资源以外,ARM-CORTEX-M3的核心    也为程序员提供了定时器的资源    由ARM核心提供的定时器资源叫做系统定时器(system timer | systick)    1.系统定时器的时钟频率打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下&lt;STM32F10x中文参考手册.pdf&gt;P46    在STM32芯片中有多个时钟源    HSI系统内部的高速时钟8MHz    HSE系统外部的高速时钟8MHz    PLL锁相环(倍频器)72MHz    LSI系统内部的低速时钟40KHz    LSE系统外部的低速时钟32.768KHz    系统定时器的时钟频率 = SYSCLK / 8 或者 SYSCLK    SYSCLK的时钟可以由HSI 或者HSE或者PLL提供    已知HSI和HSE都是8MHz的时钟频率,都不足以达到72MHz    所以只能是由PLL为SYSCLK提供时钟频率    PLL是一个锁相环,是一个倍频器,本身是不会产生时钟频率的,    需要有基础的时钟频率才能进行倍频    PLL的基础时钟频率可以由HSI或者HSE来提供    默认会选择HSE为PLL提供基础的时钟频率    芯片外部的晶振产生的时钟频率要比芯片内部自己产生的时钟频率稳定的多    2.系统定时器的计数值范围    打开&lt;STM32RBT6\DataSheet\ARM-CORTEX-M&gt;目录下    &lt;Cortex-M3权威指南CnR2（电子书）.pdf&gt;    P189    控制及状态寄存器        第0位开启系统定时器的计数                0:关闭1:开启        第1位是否触发中断                0:不触发1:触发        第2位时钟源的选择                0:外部的1:内部的        第3-15位保留        第16位用于判断计数器是否计数到0        第17-31位保留    重装载值寄存器        第0-23位用来存放重装载值        第24-31位保留    当前值寄存器        第0-23位用来存放当前计数值        第24-31位保留    计数值的范围是[24个0 - 24个1]（0 - 16M-1）    3.调用官方固件驱动系统定时器    官方提供的固件有问题        1)只有开启系统定时器,没有关闭系统定时器        2)默认开启了中断==============================作业1.把这周讲过的内容完完整整的复习一遍2.把这周写过的项目工程再重新写一遍==============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_06day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_06day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_06day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-22<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    驱动LED灯、蜂鸣器、功能按键、系统定时器    直接操作外设寄存器、官方LIB库、官方HAL库    是由ARM核心支持的位带的操作    系统定时器(system timer | systick)    是由ARM核心提供的定时器资源    决定定时长短是由时钟频率和计数值    时钟频率是通过时钟树的分析得出的SYSCLK / 8 或者 SYSCLK    计数值是通过ARM的手册分析得出    控制及状态寄存器一共有32bit        第0位开启定时器的        第1位是否触发外部请求        第2位时钟源的选择        第3-15位保留        第16位判断计数是否计到0        第17-31位保留    重装载值寄存器一共有32bit        第0-23位存储重装载值[0 - 16M-1]        第24-31位保留    当前值寄存器        第0-23位当前计数值[0 - 16M-1]        第24-31位保留</code></pre><h1 id="二-中断"><a href="#二-中断" class="headerlink" title="二.中断"></a>二.中断</h1><pre><code>    之前写了LED灯的流水灯程序-&gt;延时使用的是粗略延时(空循环)        使用精确的延时-&gt;使用了系统定时器    之前写了功能按键的程序-&gt;轮询的方法检测按键是否被按下        while(1)        &#123;            button_status(0);        &#125;        由于轮询的方法浪费资源,可以替换成中断的方法    目的 : 把轮询检测按键的程序,修改成中断的方式处理功能按键    1.了解轮询和中断的关系        轮询 : CPU被绑定到检测的函数上,一直不断的调用        是非常消耗CPU资源        中断 : 在中断到来之前CPU可以处理任何事情,当中断到来之后        会打断CPU,CPU调用中断处理函数    2.介绍中断控制器        VIC : 向量中断控制器        NVIC : 可嵌套的向量中断控制器        GIC : 通用的中断控制器        一般来说VIC和NVIC是在单片机中使用的中断控制器        一般来说GIC是在高端芯片中使用的中断控制器        VIC和NVIC 相对于 GIC来说,在硬件上支持中断向量        NVIC 相对于 VIC来说,在硬件上支持中断嵌套    3.我们芯片上的中断控制器        在STM32F103RBT6芯片中使用的是NVIC        前提 :         有些手册会把NVIC画到ARM核心的内部        有些手册会把NVIC画到ARM核心的外部        有些手册会把NVIC画到紧贴着ARM核心        想要表达的含义就是NVIC和ARM核心是紧密相联的关系    NVIC和ARM-CORTEX-M3之间是紧密相联的关系    NVIC中断控制器会做两个操作        1)会为每一个连接到NVIC上的中断源分配一个中断号        2)处理优先级的问题            组优先级(抢占优先级)            子优先级(占先式优先级)</code></pre><p>nvic<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/06day/nvic.png"></p><pre><code>    4.GPIO触发中断的方法        GPIO想要触发中断需要借助EXTI外设        EXTI叫做外部中断        EXTI仅仅是NVIC上的一个中断源而已打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下&lt;STM32F10x中文参考手册.pdf&gt;    P89NVIC以及异常向量表    P91EXTI的描述        每组GPIO的0号管脚可以触发EXTI0        每组GPIO的1号管脚可以触发EXTI1        ...        每组GPIO的15号管脚可以触发EXTI15    ----------------------------------------------------    已知KEY0按键使用的是PC9管脚,    将来GPIOC9管脚想要触发中断需要使用EXTI9    ----------------------------------------------------    EXTI9只能由PC9触发吗?    也可以是PA9 PB9 PC9触发,需要通过 AFIO外设 进行选择    ----------------------------------------------------    NVIC : 可嵌套的向量中断控制器    EXTI : 外部中断    EXTI仅仅是NVIC上的一个中断源而已    ----------------------------------------------------    中断号是中断号,外部中断号是外部中断号,是不一样的    中断号 : 和异常向量表中异常处理函数的顺序有关    外部中断号 : 和GPIO的管脚编号有关    ----------------------------------------------------    有些外部中断会自己享用一个中断号,有些外部中断会共用一个中断号    </code></pre><h1 id="三-驱动外部中断"><a href="#三-驱动外部中断" class="headerlink" title="三.驱动外部中断"></a>三.驱动外部中断</h1><pre><code>    把轮询检测按键的程序修改成中断的方式    KEY0PC9EXTI9上拉输入下降沿触发    KEY1PC8EXTI8上拉输入下降沿触发    KEY2PA0EXTI0下拉输入上升沿触发    需要通过AFIO外设为外部中断选择触发的管脚    1.初始化eint        1)通过APB2总线使能GPIOC组和GPIOA组以及AFIO的时钟        (因为需要通过AFIO为外部中断选择触发的管脚)        2)初始化功能按键使用的GPIO管脚            1&gt;把PC9 PC8管脚配置为上拉输入模式            2&gt;把PA0管脚配置为下拉输入模式        3)为外部中断选择触发的管脚            1&gt;为EXTI9选择由PC9触发            2&gt;为EXTI8选择由PC8触发            3&gt;为EXTI0选择由PA0触发        4)初始化NVIC            1&gt;配置组优先级和子优先级的所占比例            2&gt;选择中断号            3&gt;使能该中断            4&gt;配置组优先级的级别            5&gt;配置子优先级的级别</code></pre><p>优先级所占比例<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/06day/%E4%BC%98%E5%85%88%E7%BA%A7%E6%89%80%E5%8D%A0%E6%AF%94%E4%BE%8B.png"></p><pre><code>        5)初始化EXTI            1&gt;选择外部中断号            2&gt;使能该外部中断            3&gt;选择中断的模式            4&gt;选择触发的方式============================作业1.把今天讲过的内容完完整整的复习一遍2.把外部中断的项目工程重新搭建一遍3.使用中断 + 消抖的方法实现按键开关的项目工程============================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_07day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_07day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_07day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-23<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.目的    之前写过检测按键是否被按下的程序-&gt;使用的是轮询的方式检测-&gt;CPU很忙    是把轮询检测的程序修改成了中断的方式-&gt;需要使用中断控制器    2.介绍芯片中常见的中断控制器    VIC向量中断控制器单片机芯片中常用    NVIC可嵌套的向量中断控制器单片机芯片中常用    GIC通用的中断控制器高端芯片中常用    3.在STM32F103RBT6芯片中使用的是NVIC中断控制器    NVIC中断控制器会处理两个事情        1)为每一个连接到NVIC上的中断源分配一个中断号        2)处理优先级(组优先级 和 子优先级)    异常向量表中存储的是异常处理函数的函数名(异常处理函数的入口地址)    异常向量表中异常处理函数的顺序和中断号是一一对应    4.GPIO需要借助EXTI来触发中断    EXTI叫做外部中断    每一组GPIO的0号管脚都可以触发EXTI0    每一组GPIO的1号管脚都可以触发EXTI1    ...    每一组GPIO的15号管脚都可以触发EXTI15    需要通过AFIO外设为外部中断选择触发的GPIO管脚    </code></pre><h1 id="二-看门狗"><a href="#二-看门狗" class="headerlink" title="二.看门狗"></a>二.看门狗</h1><pre><code>    STM32F103RBT6芯片使用的核心是ARM-CORTEX-M3的核心    在工控领域中经常会使用到看门狗外设,所以今天主要讲看门狗外设    1.从最新选型手册中了解看门狗信息打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下&lt;ST_MCU最新选型手册.pdf&gt;    P21    看门狗属于定时器的资源,在STM32芯片中属于其他定时器资源    在STM32芯片中有两个看门狗,分别是独立看门狗 和 窗口看门狗    2.产生的问题    1)查找看门狗的时钟频率?40KHz    2)查找看门狗的计数值范围?[0 - 4095]    3)看门狗提供的其他功能是什么?重启系统    3.看门狗的使用环境    在工业的工作环境中,嵌入式设备经常会面临一些恶劣的工作环境:超高温、    超低温、非常湿润、非常干燥、强烈的电磁干扰,这些环境都会影响嵌入式设备    的正常工作,有可能会造成设备死机 或者 设备中运行的程序直接跑飞    所以可以使用看门狗帮助程序员监测嵌入式设备是否死机或者程序跑飞    一旦设备死机了或者程序跑飞了,看门狗可以帮助程序员重启系统    4.看门狗的简介    既然看门狗属于定时器的资源,那么决定定时长短是由时钟频率和计数值范围    来决定的,    和普通定时器不同,普通定时器定时到了之后,去处理程序员指定要做的事情    看门狗定时到了之后,直接重启系统(效果和按下reset按键一样)    如果设备死机了,看门狗可以帮助程序员重启系统    如果设备没有死机,看门狗不需要重启系统    (只要让看门狗的计数器永远计不到0,看门狗就不会重启系统了)    5.喂狗(feed dog)    需要每隔一段时间,往看门狗的计数器中重新写入计数值,让看门狗永远计不到0    6.介绍STM32芯片内部的看门狗    在STM32芯片中有两种看门狗    独立看门狗 : (IWDG)    窗口看门狗 : (WWDG)    注意 : 一般来说高端的芯片中只有一个看门狗,更像是独立看门狗    7.独立看门狗和窗口看门狗的区别    相同点        1)IWDG和WWDG都是由STM32芯片提供的外设资源        2)IWDG和WWDG功能一样,都会因为设备死机或者程序跑飞,            重启系统        3)IWDG和WWDG都可以自行调节喂狗时间    不同点        1)时钟源不同            IWDG使用的是独立RC(LSI&lt;40KHz&gt;)提供的时钟            不需要使用总线使能时钟            WWDG使用是APB1总线提供的时钟            需要通过APB1总线使能WWDG的时钟        2)产生中断不同            IWDG是没有中断的,只要IWDG计到0,直接重启系统            WWDG是有中断,只要计数器超时,可以触发中断        3)计数的方式不同            IWDG使用的是12bit的计数器            WWDG使用的是7bit的计数器        4)喂狗的时间范围不同            IWDG只要计数器计到0之前,任意时间喂狗都可以            WWDG会有一个上阙值和下阙值</code></pre><h1 id="三-独立看门狗"><a href="#三-独立看门狗" class="headerlink" title="三.独立看门狗"></a>三.独立看门狗</h1><pre><code>    打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下    &lt;STM32F10x中文参考手册.pdf&gt;    P276    IWDG使用的是LSI(40KHz)的时钟源    IWDG是一个递减的计数器(向下计数)    IWDG的计数器计数到0时会产生系统复位        IWDG_KR(键寄存器)&lt;写入特定的值会有特定的操作&gt;    0xAAAA喂狗的操作    0x5555开启IWDG_PR和OWDG_RLR寄存器的写访问    0xCCCC开启看门狗        IWDG_PR(预分频寄存器)&lt;给IWDG的时钟频率进行分频的&gt;    注意 : 在操作IWDG_PR寄存器之前需要先给IWDG_KR寄存器写入0x5555    开启IWDG_PR寄存器的写访问(关闭写保护)    000 4分频100 64分频    001 8分频101 128分频    010 16分频110 256分频    011 32分频111 256分频    IWDG_RLR(重装载值寄存器)&lt;是用来存储计数值的&gt;    注意 : 在操作IWDG_RLR寄存器之前需要先给IWDG_KR寄存器写入0x5555    开启IWDG_RLR寄存器的写访问(关闭写保护)    该寄存器只有低12bit有效    可以存储的计数值是[12个0 - 12个1]&lt;0 - 4095&gt;</code></pre><h1 id="四-传感器"><a href="#四-传感器" class="headerlink" title="四.传感器"></a>四.传感器</h1><pre><code>    1.传感器的简介    在物联网嵌入式的项目框架中,需要使用嵌入式设备采集感知周围的数据    那么需要使用传感器进行采集和感知,在市面上的传感器的种类有很多    检测气体 : 温度、湿度、空气中的微颗粒物(PM2.5、PM1.0)        稀有气体的含量(一氧化碳、二氧化碳、氧气、甲烷、乙醇、甲醛)    检测液体 : 温度、浑浊度、PH值、液位    检测固体 : 土壤湿度、微量元素的含量    检测人体 : 体温、血压、血糖、心率    ...    本身市面上的传感器的种类有很多很多种    2.传感器接口的简介    GPIO接口、串口接口(USART/UART、IIC、SPI...)、并口接口    数字型的传感器 : 可以直接采集到数字量,可以直接交给CPU去处理    模拟型的传感器 : 采集到的是模拟量,需要经过AD转换,        转换成了数字量再交给CPU去处理</code></pre><h1 id="五-DHT11传感器"><a href="#五-DHT11传感器" class="headerlink" title="五.DHT11传感器"></a>五.DHT11传感器</h1><pre><code>    DHT11传感器是一个温湿度的传感器(是专门用来检测温度和湿度的)    外观上来看是4引脚的封装形式    打开&lt;STM32RBT6\DataSheet\传感器&gt;目录下    &lt;DHT11说明书.pdf&gt;和&lt;DHT22.pdf&gt;    1.DHT11是一个数字型的传感器    2.DHT11是用来采集温湿度的数据    3.DHT11是4引脚的封装形式    4.测量范围湿度:20%-90%温度:0℃-50℃    5.误差范围湿度:±5%温度:±2℃    6.分辨力为1DHT11只能检测到整数数据    7.1pin连接电源 2pin连接MCU 3pinNC(悬空&lt;没有连接&gt;) 4pin连接地</code></pre><p>上拉电阻<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/07day/%E4%B8%8A%E6%8B%89%E7%94%B5%E9%98%BB.png"><br>下拉电阻<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/07day/%E4%B8%8B%E6%8B%89%E7%94%B5%E9%98%BB.png"></p><pre><code>    8.DHT11是串行接口 : 指的是数据以串行的方式进行传输         串行的方式 : 指的是按顺序一位一位的传输数据    9.单线双向指的是半双工工作模式(发送的同时不能接收,接收的同时不能发送)</code></pre><p>串行传输<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/07day/%E4%B8%B2%E8%A1%8C%E4%BC%A0%E8%BE%93.png"></p><pre><code>    A.一次完整的数据传输为40bit,高位先出.        例子 : DHT11的数据管脚连接到了STM32的PC10管脚    需要通过PC10管脚发送数据或者接收数据    1)通过PC10管脚发送数据(高位先出)    data = 10110100;    data&amp;PCOut(10)第1次循环10110100100000001第2次循环01101000100000000第3次循环11010000100000001第4次循环10100000100000001第5次循环01000000100000000第6次循环10000000100000001第7次循环00000000100000000第8次循环00000000100000000        void func(u8 data)//通过PC10管脚把形参data存储的数据发送        &#123;            u8 i = 0;//循环变量            for(i =0 ; i &lt; 8; i++)            &#123;                if(data &amp; 0x80)                    PCOut(10) = 1;                else                    PCOut(10) = 0;                data &lt;&lt;= 1;            &#125;        &#125;    2)通过PC10管脚发送数据(低位先出)    data&amp;PCOut(10)第1次循环10110100000000010第2次循环01011010000000010第3次循环00101101000000011第4次循环00010110000000010第5次循环00001011000000011第6次循环00000101000000011第7次循环00000010000000010第8次循环00000001000000011        void func(u8 data)        &#123;            u8 i = 0;//循环变量            for(i = 0; i &lt; 8; i++)            &#123;                if(data &amp; 0x01)                    PCOut(10) = 1;                else                    PCOut(10) = 0;                data &gt;&gt;= 1;            &#125;        &#125;    3)通过PC10管脚读取数据(高位先出)    DHT11要发送10110100    PCIn(10)data &lt;&lt;=1data第1次循环10000000000000001第2次循环00000001000000010第3次循环10000010000000101第4次循环10000101000001011第5次循环00001011000010110第6次循环10010110000101101第7次循环00101101001011010第8次循环01011010010110100        u8 func(void)        &#123;            u8 data = 0;//保存读取到的数据            u8 i = 0;//循环变量                        for(i = 0; i &lt; 8; i++)            &#123;                data &lt;&lt;= 1;                if(PCIn(10) == 1)                    data |= 1;            &#125;                        return data;        &#125;    4))通过PC10管脚读取数据(低位先出)    DHT11要发送10110100    PCIn(10)data &gt;&gt;=1data第1次循环00000000000000000第2次循环00000000000000000第3次循环10000000010000000第4次循环00100000001000000第5次循环10010000010100000第6次循环10101000011010000第7次循环00110100001101000第8次循环10011010010110100        u8 func(void)        &#123;            u8 data = 0;//保存读取到的数据            u8 i = 0;//循环变量                        for(i = 0; i &lt; 8; i++)            &#123;                data &gt;&gt;= 1;                if(PCIn(10) == 1)                    data |= 0x80;            &#125;                        return data;        &#125;===========================作业1.把今天讲过的内容完完整整的复习一遍2.可以使用操作寄存器的方法驱动一下独立看门狗3.根据手册操作一下窗口看门狗4.在纸上写一遍串行接口发送数据和接收数据(高位先出和低位先出)===========================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_01day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_01day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_01day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-15<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-进入新的阶段"><a href="#一-进入新的阶段" class="headerlink" title="一.进入新的阶段"></a>一.进入新的阶段</h1><pre><code>    STM32阶段(智能终端设备阶段)    原由    1.为了从应用层到底层内核驱动的过渡    2.在高端的开发板上讲带操作系统的驱动,裸板驱动在STM32上讲    3.国家大力的推广5G技术(海量物联)-&gt;所以需要讲智能终端设备</code></pre><h1 id="二-阶段性项目"><a href="#二-阶段性项目" class="headerlink" title="二.阶段性项目"></a>二.阶段性项目</h1><pre><code>    物联网智能终端的产品    基础的物联网项目架构    分为4个层次        感知层        网络层        平台层        应用层    新型的物联网项目框架会加入边缘计算设备    物联网的两个分支    智能终端设备 : 单片机的内容    边缘计算设备 : 高端芯片的内容    小爱同学    天猫精灵    小度小度</code></pre><p>基础的物联网项目架构<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/01day/%E5%9F%BA%E7%A1%80%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84.png"></p><h1 id="三-安装开发环境"><a href="#三-安装开发环境" class="headerlink" title="三.安装开发环境"></a>三.安装开发环境</h1><pre><code>    同学们在飞秋上，下载压缩包&lt;STM32RBT6_SDK.zip&gt;    同学们在电脑上安装一个好用的PDF阅读器    1.把windows操作系统上的文件扩展名先显示出来    2.把压缩包&lt;STM32RBT6_SDK.zip&gt;解压一下    3.工具包文件的认知        &lt;DataSheet&gt;存放的都是数据手册        &lt;ST官方固件&gt;存放的都是ST公司的官方固件        &lt;开发板原理图&gt;存放的是开发板原理图        &lt;开发工具&gt;存放的是单片机开发会用到的工具    4.安装集成的开发环境    在&lt;STM32RBT6\开发工具\MDK520&gt;中&lt;MDK520.exe&gt;    双击安装        1)在安装Keil时安装路径！！！千万不要有中文！！！        2)在安装Keil时有填写 姓 名 公司名称 邮箱 都写数字 1 即可        3)在安装最后有可能会弹出小对话框问是否安装驱动,选择安装        4)安装结束会弹出网页以及联网安装补丁,都选择关闭    手动安装补丁    在&lt;STM32RBT6\开发工具\MDK520&gt;中5个.pack结尾的文件    安装从上往下的顺序,依次双击安装        仿真器的驱动    STLink仿真器的驱动    在&lt;STM32RBT6\开发工具\STLink V2驱动\STLINK_V2_USBDriver&gt;中    如果Windows系统是64bit的就安装&lt;dpinst_amd64.exe&gt;    如果Windows系统是32bit的就安装&lt;dpinst_x86.exe&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32_note_02day</title>
      <link href="/2023/02/16/embsky/STM32/stm32_02day/"/>
      <url>/2023/02/16/embsky/STM32/stm32_02day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-16<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.搭建了物联网项目框架        感知层智能终端设备的裸板驱动            STM32F103RBT6        网络层WiFi模块        平台层华为OceanConnect//太繁琐(安全性高)            小米小米IoT//企业用户            阿里AIoT//繁琐(安全性高)            百度天工//添加设备丰富            移动OneNet//简单            联通中国联通物联网//没用过            东方瑞通ESLink        应用层只要是提供了云平台都会提供应用层的APP    2.在基础版本的物联网项目框架中引入边缘计算设备    3.两个分支        智能终端设备        边缘计算设备    4.安装开发环境学习的时候注重的是过程工作的时候注重的是结果</code></pre><h1 id="二-从表象到里象的方式了解开发板"><a href="#二-从表象到里象的方式了解开发板" class="headerlink" title="二.从表象到里象的方式了解开发板"></a>二.从表象到里象的方式了解开发板</h1><pre><code>    1.从外观入手(查看配件有哪些以及芯片的型号)    打开&lt;STM32RBT6\开发板原理图&gt;目录下&lt;stm32-mix.jpg&gt;    2.了解芯片的结构    通过画图了解    无论是SOC(高端的芯片)还是MCU(单片机芯片)    都是可以自己组成微型的计算机系统    STM32F103RBT6 = CPU + 内存 + 硬盘 + 外设        CPU = ARM-CORTEX-M3(用来做大量计算,处理数据)        内存 = 运行程序时会占用的空间        硬盘 = 保存烧写的程序        外设 = 操作芯片功能的接口</code></pre><p>01MCU内部结构<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/02day/01MCU%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png"></p><pre><code>    S5P6818 = CPU + 内存 + 硬盘 + 外设        CPU = ARM-CORTEX-A53(用来做大量计算,处理数据)        内存 = 运行硬盘中固件会占用的空间        硬盘 = 存储的是芯片厂商烧写好的固件(Read Only)        外设 = 操作芯片功能的接口    注意 : 高端芯片外部需要外接内存，外接硬盘</code></pre><p>01SOC内部结构<br><img src="/images/2022-8-15_STM32/2022-8-15_STM32/note/02day/02SOC%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png"></p><h1 id="三-介绍ARM公司和ST公司"><a href="#三-介绍ARM公司和ST公司" class="headerlink" title="三.介绍ARM公司和ST公司"></a>三.介绍ARM公司和ST公司</h1><pre><code>    ARM公司是在英国剑桥成立，在2016年年底被日本软银收购    嵌入式领域芯片架构    曾经三足鼎立        PPC游戏机/掌机        MIPS路由器/交换机、网络探头        ARM手机    现在        MIPS        ARM各种电子产品    ST公司，意法半导体公司，在2020年国家统计数据，    咱们国家使用ST公司的芯片NO.1</code></pre><h1 id="四-开发方式"><a href="#四-开发方式" class="headerlink" title="四.开发方式"></a>四.开发方式</h1><pre><code>    1.传统开发方式        使用C语言的位运算符操作芯片外设的寄存器        &lt;&lt; &gt;&gt; &amp; | ~ ^        对于驱动开发工程师来说容易出错        需要驱动开发工程师写驱动 + 业务逻辑    2.流行开发方式        使用ST公司的官方固件(LIB库)        涉及到函数调用即可        需要驱动开发工程师写驱动 + 业务逻辑    3.未来开发方式        使用STM32CUBEMX开发工具 + 官方固件(HAL库)        涉及到函数调用即可        需要驱动开发工程师写业务逻辑</code></pre><h1 id="五-搭建模板项目工程"><a href="#五-搭建模板项目工程" class="headerlink" title="五.搭建模板项目工程"></a>五.搭建模板项目工程</h1><pre><code>    1.模板项目工程只有在刚开始会教大家搭建，后面的项目工程直接拷贝使用    2.搭建模板项目工程的流程必须要会    3.搭建模板项目工程的方法并不唯一前提准备 : 把Windows系统下,文件的扩展名显示出来    1.创建目录结构    在&lt;桌面&gt;上新建文件夹,重命名为&lt;stm32f103&gt;    在&lt;桌面\stm32f103&gt;目录中新建文件夹,重命名为&lt;01test&gt;    在&lt;桌面\stm32f103\01test&gt;目录中新建文件夹        cmsis存放有关arm-cortex-m系列的文件        fwlib存放的是ST公司的官方固件        mylib存放的是程序员自己写的固件        project存放的是项目工程文件        user存放的是主文件&lt;STM32RBT6\ST官方固件\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport&gt;目录下的所有文件拷贝到&lt;桌面\stm32f103\01test\cmsis&gt;&lt;STM32RBT6\ST官方固件\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm&gt;目录下的&lt;startup_stm32f10x_md.s&gt;拷贝到&lt;桌面\stm32f103\01test\cmsis&gt;&lt;STM32RBT6\ST官方固件\STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver&gt;目录下的&lt;inc&gt;和&lt;src&gt;拷贝到&lt;桌面\stm32f103\01test\fwlib&gt;&lt;STM32RBT6\ST官方固件\STM32F10x_StdPeriph_Lib_V3.5.0\Project\STM32F10x_StdPeriph_Template&gt;目录下的&lt;main.c&gt; &lt;stm32f10x_conf.h&gt; &lt;stm32f10x_it.c&gt;&lt;stm32f10x_it.h&gt; &lt;system_stm32f10x.c&gt;&lt;system_stm32f10x.h&gt;拷贝到&lt;桌面\stm32f103\01test\user&gt;    2.通过Keil搭建项目工程    Define    STM32F10X_MD,USE_STDPERIPH_DRIVER        1&gt;在桌面上运行KEIL软件        2&gt;如果默认打开的keil界面显示的是上一次的项目工程可以在keil的菜单栏&lt;Project&gt;中选择Close Project        3&gt;在keil的菜单栏&lt;Project&gt;中选择New μVision Project        4&gt;弹出了Create New Project对话框,选择新的项目工程创建的位置(选择之前项目工程创建的位置)        5&gt;弹出了Select Device For Target对话框，可以在Search这一栏录入要操作的芯片型号&lt;STM32F103RB&gt;        6&gt;点击左下角显示的找到的芯片型号，右边Description显示了芯片信息之后，点击OK        7&gt;会弹出Manager Run-Time Environment的对话框，直接关闭        8&gt;把keil默认的项目工程的层次结构调整成和windows下自己搭建的层次结构一致        9&gt;点击第三行菜单栏中的Manager Project Items        A&gt;在Project Targets这一栏中，把Target 1 修改成 Target //注意:双击蓝色的这一条可以编辑        B&gt;在Groups这一栏中，把Source Group1去掉，添加上cmsis fwlib mylib user 4个组        C&gt;首先在Groups这一栏中，选择cmsis这个组，然后在对话框右下角点击Add Files        D&gt;弹出对话框&lt;Add Files To Group &#39;cmsis&#39;&gt;，默认的查找范围是project，找到自己创建的cmsis目录        //注意:在这一步添加文件，只需要添加.c .s文件即可，不需要添加.h文件        E&gt;在cmsis目录中选择core_cm3.c文件和startup_stm32f10x_md.s添加到cmsis组中即可        F&gt;选择fwlib的组继续添加文件，找到stm32f10x_rcc.c文件，添加到fwlib组中        G&gt;选择user的组继续添加文件，找到main.c stm32f10x_it.c system_stm32f10x.c，添加到user组中        H&gt;在Manager Project Items的对话框中点击OK        I&gt;在keil界面的左边的Project栏中，找到main.c文件，双击打开        J&gt;在main.c文件中全选文件内容，全部删掉，加入自己写得main函数//注意:在文件最后一定要多加几个空行        K&gt;在keil的第三行菜单栏中选择 Options for Target &#39;Target&#39;这一项        L&gt;在对话框中选择C/C++这一项，在Define：这一栏中填入 STM32F10X_MD,USE_STDPERIPH_DRIVER        M&gt;在C/C++这一项中，找到Include Paths，在这一项中添加头文件的路径        N&gt;在Include Paths这一行最后有一个三个点的按钮，点击，弹出Folder Setup对话框        O&gt;在Folder Setup对话框中选择4个路径即可 cmsis fwlib\inc mylib user        P&gt;添加完之后，点击OK，跳出对话框        Q&gt;开始编译项目工程，点击keil的第三行菜单栏的Rebuild的按钮        R&gt;在keil中设置仿真器，(1.安装仿真器的驱动 2.把开发板连接到电脑上 3.开发板上电)        S&gt;在keil的第三行菜单栏中选择 Options for Target &#39;Target&#39;这一项        T&gt;在Options for Target &#39;Target&#39;对话框的菜单栏中选择Debug，在Debug菜单中的右测下拉菜单中选择ST-Link Debugger        U&gt;选择ST-Link Debugger之后选择之后的Settings按钮，弹出Cortex-M  Target  Driver Setup对话框        V&gt;如果在SWDIO中确定有一串十六进制的数字，那么keil识别了开发板的仿真器        W&gt;在Cortex-M  Target  Driver Setup对话框中选择，Flash Download菜单，在Download Function中选择上Reset and Run        X&gt;在对话框中选择OK，退出对话框        Y&gt;在KEIL的第三行菜单栏中选择 Download 按钮，下载程序(确保程序编译没有错误没有警告)=================================1.重新搭建项目工程=================================</code></pre><h1 id="六-通过数据手册了解芯片内部的结构"><a href="#六-通过数据手册了解芯片内部的结构" class="headerlink" title="六.通过数据手册了解芯片内部的结构"></a>六.通过数据手册了解芯片内部的结构</h1><pre><code>    1.通过数据手册了解芯片内部外设的数量打开&lt;STM32RBT6\DataSheet\STM32&gt;目录下&lt;ST_MCU最新选型手册.pdf&gt;    硬盘128Kb    内存20Kb    封装形式64管脚的封装形式    定时器4个16bit的定时器(普通定时器) + 其他定时器            2个看门狗、实时时钟、24bit向下计数定时器    ADC(模/数转换器)16×12bit    GPIO51个    串口2个SPI、2个I²C、3个USART/UART、            1个USB、1个CAN    电压范围2.0V - 3.6V    &lt;最新选型手册&gt;在公司中是在项目立项的时候会使用(技术总监、组长)    1.你选择的芯片的外设资源可以满足你的所有需求    2.在满足第一点的条件下，其他外设资源越少越好</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> stm32_note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C开发笔试题</title>
      <link href="/2023/02/16/embsky/C%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95%E9%A2%98/"/>
      <url>/2023/02/16/embsky/C%E5%BC%80%E5%8F%91%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://pan.baidu.com/s/1NeJomt4s6WGplWDW4pCFAQ?pwd=9527">C开发笔试题.zip 提取码：9527</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> C开发笔试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言执行流程</title>
      <link href="/2023/02/16/embsky/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/02/16/embsky/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="/images/C%E8%AF%AD%E8%A8%80%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="C语言执行流程"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言执行流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_链表面试题</title>
      <link href="/2023/02/16/embsky/04ds/%E9%93%BE%E8%A1%A8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/02/16/embsky/04ds/%E9%93%BE%E8%A1%A8%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><pre><code># 移出链表元素给你一个无头单向不循环链表的首结点l和一个整数 val ，请你删除链表中所有等于 val 的节点，并返回新的首结点 。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">removeElements</span><span class="params">(<span class="keyword">struct</span> llist_node* l, <span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>* <span class="title">cur</span> =</span> l;<span class="comment">//指向要删除的结点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>* <span class="title">back</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向要删除的结点的前一个位置</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="literal">NULL</span>)<span class="comment">//判断是否遍历完所有结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cur-&gt;val == val)<span class="comment">//判断当前指向的结点是否是要删除的结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(back == <span class="literal">NULL</span>)<span class="comment">//判断删除的是否是链表的首结点</span></span><br><span class="line">            &#123;</span><br><span class="line">l = cur-&gt;next;<span class="comment">//让l指针指向下一个结点</span></span><br><span class="line">                <span class="built_in">free</span>(cur);<span class="comment">//释放首结点</span></span><br><span class="line">                cur = l;<span class="comment">//让cur指针指向新的首结点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//如果删除的不是首结点就按照普通的删除方法进行</span></span><br><span class="line">            &#123;</span><br><span class="line">                back-&gt;next = cur-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(cur);</span><br><span class="line">                cur = back-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果不是要删除的结点，找下一个结点</span></span><br><span class="line">        &#123;</span><br><span class="line">            back = cur;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;<span class="comment">//返回指向首结点的指针l</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># 反转链表给你一个无头单向不循环链表的首结点l ，请你反转链表，并返回反转后的链表首结点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">reverseList</span><span class="params">(<span class="keyword">struct</span> llist_node* l)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> l;<span class="comment">//cur指针指向当前操作的结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;<span class="comment">//p指针指向原链表中cur的下一个位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span> =</span> <span class="literal">NULL</span>;<span class="comment">//next指针指向反转链表后cur的下一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)<span class="comment">//判断是否遍历完整个链表</span></span><br><span class="line">&#123;</span><br><span class="line">p = cur-&gt;next;<span class="comment">//p指针指向原链表中cur的下一个位置</span></span><br><span class="line">cur-&gt;next = next;<span class="comment">//让cur指针指向的结点的next指向前一个位置</span></span><br><span class="line">next = cur;<span class="comment">//移动next</span></span><br><span class="line">cur = p;<span class="comment">//移动cur</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># 链表的中间结点给定一个头结点为handler的单向不循环链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//快慢指针</span></span><br><span class="line"><span class="comment">//慢指针一次走一步，慢指针一次走两步</span></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">middleNode</span><span class="params">(<span class="keyword">struct</span> llist_node* handler)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">s</span> =</span> handler;<span class="comment">//慢指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">f</span> =</span> handler;<span class="comment">//快指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(f != <span class="literal">NULL</span> &amp;&amp; f-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = s-&gt;next;</span><br><span class="line">f = f-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># 链表中倒数第k个结点给定一个头结点为handler的单向不循环链表，输出该链表中倒数第k个结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//先让一个指针走k个结点，再让另外一个指针跟着走</span></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">FindKthToTail</span><span class="params">(<span class="keyword">struct</span> llist_node* handler, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">s</span> =</span> handler;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">f</span> =</span> handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f == <span class="literal">NULL</span>)<span class="comment">//判断k值是否大于链表节点数</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">f = f-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(f != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = s-&gt;next;</span><br><span class="line">f = f-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># 合并两个有序链表将两个升序的无头单向不循环链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">mergeTwoLists</span><span class="params">(<span class="keyword">struct</span> llist_node* l1, <span class="keyword">struct</span> llist_node* l2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">l</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l1 == <span class="literal">NULL</span>)<span class="comment">//判断l1链表是否不存在</span></span><br><span class="line"><span class="keyword">return</span> l2;</span><br><span class="line"><span class="keyword">if</span>(l2 == <span class="literal">NULL</span>)<span class="comment">//判断l2链表是否不存在</span></span><br><span class="line"><span class="keyword">return</span> l1;</span><br><span class="line"><span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">l = cur = l1;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">l = cur = l2;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = l1;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = l2;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l1 == <span class="literal">NULL</span>)</span><br><span class="line">cur-&gt;next = l2;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cur-&gt;next = l1;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># 链表分割现有一无头单向不循环链表的首结点指针l，给一定值x，编写一段代码将所有小于x的结点排在其余结点之前，且不能改变原来的数据顺序，返回重新排列后的链表的头指针。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">partition</span><span class="params">(<span class="keyword">struct</span> llist_node* l, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> l;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">minhead</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">maxhead</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">mincur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">maxcur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">minhead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> llist_node));</span><br><span class="line">maxhead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> llist_node));</span><br><span class="line">minhead-&gt;next = maxhead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">mincur = minhead;</span><br><span class="line">maxcur = maxhead;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;val &lt; x)</span><br><span class="line">&#123;</span><br><span class="line">mincur-&gt;next  = cur;</span><br><span class="line">mincur = mincur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">maxcur-&gt;next = cur;</span><br><span class="line">maxcur = maxcur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">mincur-&gt;next = maxhead-&gt;next;</span><br><span class="line">maxcur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">l = minhead-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(minhead);</span><br><span class="line"><span class="built_in">free</span>(maxhead);</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure># 链表的回文结构`现有一无头单向不循环链表的首结点指针l，请返回一个bool值，代表其是否为回文结构。`# 环形链表`给你一个单向链表的头结点 head ，判断链表中是否有环。`# 单向不循环链表的排序<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct llist_node</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int val;</span></span><br><span class="line"><span class="comment">struct llist_node *next;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">struct</span> llist_node *<span class="title function_">pop_sort</span><span class="params">(<span class="keyword">struct</span> llist_node *l)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> llist_node *p, *q, *tail;</span><br><span class="line">    tail = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((l-&gt;next-&gt;next) != tail)</span><br><span class="line">    &#123;</span><br><span class="line">        p = l;</span><br><span class="line">        q = l-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(q-&gt;next != tail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((q-&gt;val) &gt; (q-&gt;next-&gt;val))</span><br><span class="line">            &#123;</span><br><span class="line">                p-&gt;next = q-&gt;next;</span><br><span class="line">                q-&gt;next = q-&gt;next-&gt;next;</span><br><span class="line">                p-&gt;next-&gt;next = q;</span><br><span class="line">                q = p-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_08day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_08day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_08day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-10<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>一.温故知新    栈式的存储结构        先进后出    队列式的存储结构        先进先出    无论是顺序表还是链表都可以实现    栈式    struct node    &#123;        int stack[6];        int ind;    &#125;;    队列    struct node    &#123;        int queue[6];        int front;        int rear;    &#125;;    静态库和动态库早测 1.链表中倒数第k个结点给定一个头结点为handler的单向不循环链表输出该链表中倒数第k个结点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> llist_node *<span class="title function_">func</span><span class="params">(<span class="keyword">struct</span> llist_node *l, <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">s</span> =</span> l;<span class="comment">//慢指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">f</span> =</span> l;<span class="comment">//快指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f == <span class="literal">NULL</span>)<span class="comment">//判断链表是否提前结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">f = f-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(f != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">s = s-&gt;next;</span><br><span class="line">f = f-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2.合并两个有序链表将两个升序的无头单向不循环链表合并为一个新的升序链表并返回新链表是通过拼接给定的两个链表的所有节点组成的<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> llist_node *<span class="title function_">func</span><span class="params">(<span class="keyword">struct</span> llist_node *l1, <span class="keyword">struct</span> llist_node *l2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">l</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向合并之后的链表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l1 == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> l2;</span><br><span class="line"><span class="keyword">if</span>(l2 == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> l1;</span><br><span class="line"><span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">l = cur = l1;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">l = cur = l2;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = l1;</span><br><span class="line">l1 = l1-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next = l2;</span><br><span class="line">l2 = l2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">cur-&gt;next = l1;</span><br><span class="line"><span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">cur-&gt;next = l2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>3.简答题给定一个有头单向不循环链表的头结点handler和要删除的结点p</code></pre><h1 id="内核链表"><a href="#内核链表" class="headerlink" title="内核链表"></a>内核链表</h1><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/usr/src/linux-hwe<span class="number">-5.4</span>-headers<span class="number">-5.4</span><span class="number">.0</span><span class="number">-122</span>/include/linux</span><br><span class="line"><span class="built_in">list</span>.h</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD_INIT(name) &#123; &amp;(name), &amp;(name) &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD(name) \</span></span><br><span class="line"><span class="meta">    struct list_head name = LIST_HEAD_INIT(name)</span></span><br><span class="line"></span><br><span class="line">LIST_HEAD(handler);</span><br></pre></td></tr></table></figure>替换成struct list_head handler = &#123;&amp;handler, &amp;handler&#125;;==============================作业1.把今天讲过的内容完完整整的复习一遍2.把使用内核链表的功能补充完整3.把早测的内容在电脑上写一遍4.刷题5.写项目==============================</code></pre><h2 id="test-c"><a href="#test-c" class="headerlink" title="test.c"></a>test.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">node</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s = %p\n&quot;</span>, &amp;s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.id = %p\n&quot;</span>, &amp;s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.name = %p\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.math = %p\n&quot;</span>, &amp;s.math);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.node = %p\n&quot;</span>, &amp;s.node);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SIZE=%ld\n&quot;</span>, (<span class="type">size_t</span>)&amp;(((<span class="keyword">struct</span> stu *)<span class="number">0</span>)-&gt;node));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct stu a = 0;//假如说a的地址是0x12345678</span></span><br><span class="line"><span class="comment">struct stu *p = &amp;a;//p 保存的地址是0x12345678</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">p-&gt;node</span></span><br><span class="line"><span class="comment">(size_t)&amp;((struct stu *)(0)-&gt;node)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="kernellist"><a href="#kernellist" class="headerlink" title="kernellist"></a>kernellist</h1><h2 id="list-h"><a href="#list-h" class="headerlink" title="list.h"></a>list.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _MYTEST_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _MYTEST_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> offsetof(TYPE, MEMBER) ((size_t) &amp;((TYPE *)0)-&gt;MEMBER)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> container_of(ptr, type, member) (&#123;\</span></span><br><span class="line"><span class="meta">const typeof( ((type *)0)-&gt;member ) *__mptr = (ptr);\</span></span><br><span class="line"><span class="meta">(type *)( (char *)__mptr - offsetof(type,member) );&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD_INIT(name) &#123; &amp;(name), &amp;(name) &#125;</span></span><br><span class="line"><span class="comment">//struct list_head name = &#123;&amp;name, &amp;name&#125;;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_HEAD(name) \</span></span><br><span class="line"><span class="meta">struct list_head name = LIST_HEAD_INIT(name)</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">INIT_LIST_HEAD</span><span class="params">(<span class="keyword">struct</span> list_head *<span class="built_in">list</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">list</span>-&gt;next = <span class="built_in">list</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;prev = <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __list_add(<span class="keyword">struct</span> list_head *new,</span><br><span class="line">      <span class="keyword">struct</span> list_head *prev,</span><br><span class="line">      <span class="keyword">struct</span> list_head *next)</span><br><span class="line">&#123;</span><br><span class="line">next-&gt;prev = new;</span><br><span class="line">new-&gt;next = next;</span><br><span class="line">new-&gt;prev = prev;</span><br><span class="line">prev-&gt;next = new;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="keyword">struct</span> list_head *new, <span class="keyword">struct</span> list_head *head)</span></span><br><span class="line">&#123;</span><br><span class="line">__list_add(new, head, head-&gt;next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">list_add_tail</span><span class="params">(<span class="keyword">struct</span> list_head *new, <span class="keyword">struct</span> list_head *head)</span></span><br><span class="line">&#123;</span><br><span class="line">__list_add(new, head-&gt;prev, head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __list_del(<span class="keyword">struct</span> list_head * prev, <span class="keyword">struct</span> list_head * next)</span><br><span class="line">&#123;</span><br><span class="line">next-&gt;prev = prev;</span><br><span class="line">prev-&gt;next = next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">list_del</span><span class="params">(<span class="keyword">struct</span> list_head *entry)</span></span><br><span class="line">&#123;</span><br><span class="line">__list_del(entry-&gt;prev, entry-&gt;next);</span><br><span class="line">entry-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">entry-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> list_entry(ptr, type, member) \</span></span><br><span class="line"><span class="meta">container_of(ptr, type, member)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> list_for_each(pos, head) \</span></span><br><span class="line"><span class="meta">for (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">list_for_each(pos, head)</span></span><br><span class="line"><span class="comment">遍历链表</span></span><br><span class="line"><span class="comment">pos指向每个数据节点的node</span></span><br><span class="line"><span class="comment">head指向头节点的指针</span></span><br><span class="line"><span class="comment">list_entry(ptr, type, member)</span></span><br><span class="line"><span class="comment">得到数据的首地址</span></span><br><span class="line"><span class="comment">ptrnode的地址</span></span><br><span class="line"><span class="comment">type客户的结构体名</span></span><br><span class="line"><span class="comment">member结构体中node的成员名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="kernellist-c"><a href="#kernellist-c" class="headerlink" title="kernellist.c"></a>kernellist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内核链表</span></span><br><span class="line"><span class="comment">有头双向循环链表</span></span><br><span class="line"><span class="comment">1.创建头结点</span></span><br><span class="line"><span class="comment">2.插入数据结点(头插法 尾插法)</span></span><br><span class="line"><span class="comment">3.遍历链表</span></span><br><span class="line"><span class="comment">4.销毁链表</span></span><br><span class="line"><span class="comment">==================</span></span><br><span class="line"><span class="comment">5.查找结点</span></span><br><span class="line"><span class="comment">6.删除结点</span></span><br><span class="line"><span class="comment">7.拿出结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">node</span>;</span></span><br><span class="line">&#125;STU;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> STU *p = data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d\n&quot;</span>, p-&gt;id, p-&gt;name, p-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">id_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> STU *p = data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;id - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">name_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> STU *p = data;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *k = key;</span><br><span class="line"><span class="keyword">return</span> !(<span class="built_in">strcmp</span>(p-&gt;name, k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LIST_HEAD(handler);<span class="comment">//创建头结点</span></span><br><span class="line">STU *data = <span class="literal">NULL</span>;<span class="comment">//将来指向开辟的空间,存储数据</span></span><br><span class="line">STU *datap = <span class="literal">NULL</span>;<span class="comment">//将来指向数据结点的首地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">pos</span> =</span> <span class="literal">NULL</span>;<span class="comment">//pos指针指向每个数据结点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;<span class="comment">//要查找的ID号</span></span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;<span class="comment">//要查找的名字</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">data = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(STU));<span class="comment">//开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(data == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">data-&gt;id = <span class="number">100</span> + i;</span><br><span class="line"><span class="built_in">sprintf</span>(data-&gt;name, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line">data-&gt;math = <span class="number">100</span> - i;</span><br><span class="line"><span class="comment">//list_add(&amp;data-&gt;node, &amp;handler);//头插法</span></span><br><span class="line">list_add_tail(&amp;data-&gt;node, &amp;handler);<span class="comment">//尾插法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不要加 ; 因为list_for_each是一个宏</span></span><br><span class="line">list_for_each(pos, &amp;handler)<span class="comment">//遍历链表</span></span><br><span class="line">&#123;</span><br><span class="line">datap = list_entry(pos, STU, node);</span><br><span class="line"><span class="comment">//获取数据结点的首地址</span></span><br><span class="line">print(datap);<span class="comment">//打印数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">list_for_each(pos, &amp;handler)<span class="comment">//查找结点</span></span><br><span class="line">&#123;</span><br><span class="line">datap = list_entry(pos, STU, node);</span><br><span class="line"><span class="keyword">if</span>(name_cmp(datap, <span class="string">&quot;stu9&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Find It!\n&quot;</span>);</span><br><span class="line">print(datap);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">list_for_each(pos, &amp;handler)<span class="comment">//销毁链表</span></span><br><span class="line">&#123;</span><br><span class="line">datap = list_entry(pos, STU, node);<span class="comment">//找到首地址</span></span><br><span class="line">list_del(pos);<span class="comment">//把数据结点从链表摘除</span></span><br><span class="line"><span class="built_in">free</span>(datap);<span class="comment">//释放空间</span></span><br><span class="line">pos = &amp;handler;<span class="comment">//指向头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_09day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_09day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_09day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-11<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><pre><code>一.温故知新    内核链表链表的排序1.交换链表中数据结点的数据<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p-&gt;val &gt; p-&gt;next-&gt;val</span><br><span class="line">tmp = p-&gt;val;</span><br><span class="line">p-&gt;val = p-&gt;next-&gt;val;</span><br><span class="line">p-&gt;next-&gt;val = tmp;</span><br></pre></td></tr></table></figure>2.交换链表的结点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> llist_node *<span class="title function_">pop_sort</span><span class="params">(<span class="keyword">struct</span> llist_node *l)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">newl</span> =</span> <span class="literal">NULL</span>;<span class="comment">//头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;<span class="comment">//标记交换之前的结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">q</span> =</span> <span class="literal">NULL</span>;<span class="comment">//标记交换的结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">tail</span> =</span> <span class="literal">NULL</span>;<span class="comment">//标记最值的位置</span></span><br><span class="line"></span><br><span class="line">newl = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> llist_node));<span class="comment">//创建头</span></span><br><span class="line"></span><br><span class="line">newl-&gt;next = l;<span class="comment">//把新创建出的头结点拼到无头链表上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(newl-&gt;next-&gt;next != tail)</span><br><span class="line">&#123;</span><br><span class="line">p = newl;<span class="comment">//标记新的位置</span></span><br><span class="line">q = newl-&gt;next;<span class="comment">//标记新的位置</span></span><br><span class="line"><span class="keyword">while</span>(q-&gt;next != tail)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;val &gt; q-&gt;next-&gt;val)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">q-&gt;next = q-&gt;next-&gt;next;</span><br><span class="line">p-&gt;next-&gt;next = q;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">tail = q;</span><br><span class="line">&#125;</span><br><span class="line">l = newl-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(newl);<span class="comment">//销毁头</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> l;<span class="comment">//返回无头链表的新的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="二叉树画图"><a href="#二叉树画图" class="headerlink" title="二叉树画图"></a>二叉树画图</h1><h2 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h2><pre><code>先序(根左右)遍历中序(左根右)遍历后序(左右根)遍历</code></pre><h2 id="遍历练习"><a href="#遍历练习" class="headerlink" title="遍历练习"></a>遍历练习</h2><pre><code>(1)    先序遍历:ABDHJKECFGILM    中序遍历:DJHKBEAFCLIMG</code></pre><p><img src="/images/04ds/09day/02tree.png"></p><pre><code>(2)    中序遍历:DHFBACGE    后序遍历:HFDBGECA</code></pre><p><img src="/images/04ds/09day/03tree.png"></p><pre><code>(3)    中序遍历:DJGBHEAFIC    后序遍历:JGDHEBIFCA</code></pre><p><img src="/images/04ds/09day/04tree.png"></p><pre><code>(4)    先序遍历:ABCDEFGHIJ    中序遍历:CBEDAGHFJI</code></pre> <pre><code>(5)    先序遍历:1 2 3 7 6 5 4 9 8    中序遍历:1 2 3 4 5 6 7 8 9</code></pre><p><img src="/images/04ds/09day/05tree.png"></p><h1 id="使用二叉链表的方法实现二叉树"><a href="#使用二叉链表的方法实现二叉树" class="headerlink" title="使用二叉链表的方法实现二叉树"></a>使用二叉链表的方法实现二叉树</h1><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用二叉链表的方法实现二叉树</span></span><br><span class="line"><span class="comment">树中的结点 = [数据域] + [指向左子树的指针] +</span></span><br><span class="line"><span class="comment">[指向右子树的指针]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//定义数据的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span>//定义树中结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">data</span>;</span><span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">l</span>;</span><span class="comment">//指向左子树的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">r</span>;</span><span class="comment">//指向右子树的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">tree</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向树的根</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tree_insert</span><span class="params">(<span class="keyword">struct</span> tree_node **root, <span class="keyword">struct</span> stu data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*root == <span class="literal">NULL</span>)<span class="comment">//判断是否为空树</span></span><br><span class="line">&#123;</span><br><span class="line">*root = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tree_node));</span><br><span class="line"><span class="keyword">if</span>(*root == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">(*root)-&gt;data = data;</span><br><span class="line">(*root)-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">(*root)-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((*root)-&gt;data.id &gt; data.id)</span><br><span class="line">tree_insert(&amp;(*root)-&gt;l, data);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tree_insert(&amp;(*root)-&gt;r, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> stu data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d\n&quot;</span>, data.id, data.name, data.math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_display</span><span class="params">(<span class="keyword">struct</span> tree_node *tree)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tree == <span class="literal">NULL</span>)<span class="comment">//判断是否是空树</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">tree_display(tree-&gt;l);</span><br><span class="line">tree_display(tree-&gt;r);</span><br><span class="line">print(tree-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_destroy</span><span class="params">(<span class="keyword">struct</span> tree_node *tree)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tree == <span class="literal">NULL</span>)<span class="comment">//判断是否是空树</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">tree_destroy(tree-&gt;l);</span><br><span class="line">tree_destroy(tree-&gt;r);</span><br><span class="line"><span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> stu *<span class="title function_">tree_find</span><span class="params">(<span class="keyword">struct</span> tree_node *root, <span class="type">int</span> find_id)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="comment">//判断是否是空树</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;data.id == find_id)</span><br><span class="line"><span class="keyword">return</span> &amp;root-&gt;data;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;data.id &gt; find_id)</span><br><span class="line">tree_find(root-&gt;l, find_id);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">tree_find(root-&gt;r, find_id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> tree_node *<span class="title function_">find_max</span><span class="params">(<span class="keyword">struct</span> tree_node *root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="comment">//判断是否是空树</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;r == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">find_max(root-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> tree_node *<span class="title function_">find_min</span><span class="params">(<span class="keyword">struct</span> tree_node *root)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="comment">//判断是否是空树</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(root-&gt;l == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">find_min(root-&gt;l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tree_delete</span><span class="params">(<span class="keyword">struct</span> tree_node **root, <span class="type">int</span> find_id)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> **<span class="title">node</span> =</span> root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;<span class="comment">//标记要删除的结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*node != <span class="literal">NULL</span> &amp;&amp; (*node)-&gt;data.id != find_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((*node)-&gt;data.id &gt; find_id)</span><br><span class="line">node = &amp;(*node)-&gt;l;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">node = &amp;(*node)-&gt;r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*node == <span class="literal">NULL</span>)<span class="comment">//没有找到要删除的结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">cur = *node;<span class="comment">//标记删除的位置</span></span><br><span class="line"><span class="keyword">if</span>(cur-&gt;l == <span class="literal">NULL</span>)<span class="comment">//判断要删除的结点是否没有左子树</span></span><br><span class="line">*node = cur-&gt;r;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*node = cur-&gt;l;<span class="comment">//让左子树往上顶</span></span><br><span class="line">find_max(cur-&gt;l)-&gt;r = cur-&gt;r;</span><br><span class="line"><span class="comment">//把右子树挂到左子树的最大结点的右边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> buf[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">data</span>;</span><span class="comment">//存储数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">datap</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向找到的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> find_id = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(buf) / <span class="keyword">sizeof</span>(*buf); i++)</span><br><span class="line">&#123;</span><br><span class="line">data.id = buf[i];</span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, buf[i]);</span><br><span class="line">data.math = <span class="number">100</span> - buf[i];</span><br><span class="line">tree_insert(&amp;tree, data);<span class="comment">//插入数据结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tree_display(tree);<span class="comment">//遍历树</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">datap = tree_find(tree, find_id);</span><br><span class="line"><span class="keyword">if</span>(datap == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Not Find It!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Find It!\n&quot;</span>);</span><br><span class="line">print(*datap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = tree_delete(&amp;tree, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">tree_display(tree);<span class="comment">//遍历树</span></span><br><span class="line"></span><br><span class="line">tree_destroy(tree);<span class="comment">//销毁树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_06day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_06day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_06day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-8<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>一.温故知新线性表        是n个具有相同类型的数据元素的集合        线性表是一种使用比较广泛的数据结构        线性表在逻辑上是线性的结构,也就相当于是一条直线        但是在物理结构上并不一定是连续的        线性表在物理存储时,通常以数组或者链表的形式存储    顺序表        是用一段连续的存储空间依次存储数据元素的线性结构        一般情况下使用的就是数组,在数组中做增删改查的操作        定长的顺序表 : 使用定长的数组            适用于确定成员个数的场景        不定长的顺序表 : 使用动态开辟的数组            可以根据需求灵活开辟空间    链表        在逻辑结构上是线性的存储,        但是在物理结构体并不是连续的存储结构        链表中数据的顺序根据链表中结点的指针的指向来确定顺序表的优缺点    优点 : 使用的是连续的存储空间            可以使用下标快速定位到某个成员    缺点 : 定长的顺序表定义之后不能再扩容            插入新的成员以及删除成员,需要挪动后续所有成员链表的优缺点    优点 : 插入新的成员和删除成员方便,不会造成空间的浪费    缺点 : 访问链表的成员不方便总结 : 顺序表和链表是相辅相成的,需要在适合的场景下使用如果写项目工程使用有头双向循环链表合适如果在笔试面试中碰到链表的题目,一般来说考无头单向链表===================================早测1.移出链表元素给你一个无头单向不循环链表的首结点l和一个整数 val 请你删除链表中所有等于 val 的节点，并返回新的首结点 。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> llist_node* <span class="title function_">remove</span><span class="params">(<span class="keyword">struct</span> llist_node* l, <span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> l;<span class="comment">//指向要删除的结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">back</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//指向要删除的结点的前一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)<span class="comment">//判断是否遍历完所有的结点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;val == val)<span class="comment">//判断是否是要删除的数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(back == <span class="literal">NULL</span>)<span class="comment">//判断删除的是否是第一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">l = l-&gt;next;<span class="comment">//改变l的位置</span></span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放第一个结点</span></span><br><span class="line">cur = l;<span class="comment">//改变cur的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = back-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">back = cur;</span><br><span class="line">cur = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>===================================线性表    两种特殊的线性存储结构(受限制的存储形式)    栈式存储结构        一定要和内存中的栈区区分开        stack        特点 : 先进后出        可以把栈式存储结构抽象成有底的容器        把数据存储到栈式存储结构中入栈|进栈|压栈|push        从栈式存储结构中取出数据出栈|退栈|弹栈|pop        存入数据或者取出数据的一端栈顶|ind        另外一端栈底    由于栈式存储结构属于线性表中特殊的存储形式    所以既可以用顺序表来实现,也可以用链表来实现        入栈时需要判断,栈是否满了        出栈时需要判断,栈是否空了    队列式存储结构=================================作业1.把今天讲过的内容完完整整的复习一遍2.把栈式存储结构(三种方式)再重新实现一遍3.把早测的功能函数再重新实现一遍=================================<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">l</span><br><span class="line">|</span><br><span class="line">V</span><br><span class="line"><span class="number">11</span>-&gt;<span class="number">22</span>-&gt;<span class="number">11</span>-&gt;<span class="number">33</span>-&gt;<span class="number">11</span>-&gt;<span class="number">44</span>-&gt;<span class="number">11</span>-&gt;<span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="数组栈"><a href="#数组栈" class="headerlink" title="数组栈"></a>数组栈</h1><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;<span class="comment">//数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用来接收返回值</span></span><br><span class="line"><span class="type">int</span> save = <span class="number">0</span>;<span class="comment">//用来保存出栈的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(*data); i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = stack_push(data[i]);<span class="comment">//入栈</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)<span class="comment">//判断是否栈满</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack Is Full!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack_display();<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = stack_pop(&amp;save);<span class="comment">//出栈</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack Is Empty!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Save = %d\n&quot;</span>, save);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line">stack_display();<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line">stack_push(<span class="number">999</span>);</span><br><span class="line">stack_display();<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="stack-h"><a href="#stack-h" class="headerlink" title="stack.h"></a>stack.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __STACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STACK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKSIZE 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stack_arr[STACKSIZE];<span class="comment">//栈</span></span><br><span class="line"><span class="type">int</span> stack_ind;<span class="comment">//栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(<span class="type">int</span> data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(<span class="type">int</span> *save)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_display</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="stack-c"><a href="#stack-c" class="headerlink" title="stack.c"></a>stack.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(stack_ind - STACKSIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(stack_ind);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isfull())<span class="comment">//判断是否栈满了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">stack_arr[stack_ind++] = data;<span class="comment">//入栈</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(<span class="type">int</span> *save)</span><span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isempty())<span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">*save = stack_arr[--stack_ind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_display</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = stack_ind;<span class="comment">//循环变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, stack_arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;===================\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span> : main.o <span class="built_in">stack</span>.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o <span class="built_in">stack</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="指针栈"><a href="#指针栈" class="headerlink" title="指针栈"></a>指针栈</h1><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">STACK *s = <span class="literal">NULL</span>;<span class="comment">//s指针指向栈</span></span><br><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用于接收返回值的变量</span></span><br><span class="line"><span class="type">int</span> save = <span class="number">0</span>;<span class="comment">//用于接收出栈的数据</span></span><br><span class="line"></span><br><span class="line">s = stack_create();<span class="comment">//开辟栈式存储结构的空间</span></span><br><span class="line"><span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟空间失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(*data); i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = stack_push(s, data[i]);<span class="comment">//入栈</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)<span class="comment">//判断栈是否满了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack Is Full!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack_display(s);<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = stack_pop(s, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack Is Empty!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Save = %d\n&quot;</span>, save);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">stack_display(s);<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line">stack_push(s, <span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">stack_display(s);<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line">stack_destroy(s);<span class="comment">//销毁栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="stack-h-1"><a href="#stack-h-1" class="headerlink" title="stack.h"></a>stack.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __STACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STACK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKSIZE 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> stack_buf[STACKSIZE];</span><br><span class="line"><span class="type">int</span> stack_ind;</span><br><span class="line">&#125;STACK;</span><br><span class="line"></span><br><span class="line">STACK *<span class="title function_">stack_create</span><span class="params">()</span>;<span class="comment">//创建栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(STACK *s, <span class="type">int</span> data)</span>;<span class="comment">//入栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(STACK *s, <span class="type">int</span> *save)</span>;<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_display</span><span class="params">(STACK *s)</span>;<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_destroy</span><span class="params">(STACK *s)</span>;<span class="comment">//销毁栈</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="stack-c-1"><a href="#stack-c-1" class="headerlink" title="stack.c"></a>stack.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">STACK *<span class="title function_">stack_create</span><span class="params">()</span><span class="comment">//创建栈</span></span><br><span class="line">&#123;</span><br><span class="line">STACK *s = <span class="literal">NULL</span>;<span class="comment">//s指针指向开辟的空间</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(STACK));<span class="comment">//开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">s-&gt;stack_ind = <span class="number">0</span>;<span class="comment">//把栈顶元素先清零</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isfull</span><span class="params">(STACK *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(s-&gt;stack_ind - STACKSIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(STACK *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(s-&gt;stack_ind);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(STACK *s, <span class="type">int</span> data)</span><span class="comment">//入栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isfull(s))<span class="comment">//判断栈是否满了</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">s-&gt;stack_buf[s-&gt;stack_ind++] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(STACK *s, <span class="type">int</span> *save)</span><span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isempty(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">*save = s-&gt;stack_buf[--s-&gt;stack_ind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_display</span><span class="params">(STACK *s)</span><span class="comment">//遍历栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = s-&gt;stack_ind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s-&gt;stack_buf[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_destroy</span><span class="params">(STACK *s)</span><span class="comment">//销毁栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-1"><a href="#makefile-1" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span> : main.o <span class="built_in">stack</span>.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o <span class="built_in">stack</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="链表栈"><a href="#链表栈" class="headerlink" title="链表栈"></a>链表栈</h1><h2 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">STACK *s = <span class="literal">NULL</span>;<span class="comment">//s指针指向栈</span></span><br><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用于接收返回值的变量</span></span><br><span class="line"><span class="type">int</span> save = <span class="number">0</span>;<span class="comment">//用于接收出栈的数据</span></span><br><span class="line"></span><br><span class="line">s = stack_create();<span class="comment">//开辟栈式存储结构的空间</span></span><br><span class="line"><span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟空间失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(*data); i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = stack_push(s, data[i]);<span class="comment">//入栈</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)<span class="comment">//判断栈是否满了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack Is Full!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack_display(s);<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = stack_pop(s, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Stack Is Empty!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Save = %d\n&quot;</span>, save);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*******************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">stack_display(s);<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line">stack_push(s, <span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">stack_display(s);<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line">stack_destroy(s);<span class="comment">//销毁栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="stack-h-2"><a href="#stack-h-2" class="headerlink" title="stack.h"></a>stack.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __STACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STACK_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> LLIST STACK;</span><br><span class="line"></span><br><span class="line">STACK *<span class="title function_">stack_create</span><span class="params">()</span>;<span class="comment">//创建栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(STACK *s, <span class="type">int</span> data)</span>;<span class="comment">//入栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(STACK *s, <span class="type">int</span> *save)</span>;<span class="comment">//出栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_display</span><span class="params">(STACK *s)</span>;<span class="comment">//遍历栈</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_destroy</span><span class="params">(STACK *s)</span>;<span class="comment">//销毁栈</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="stack-c-2"><a href="#stack-c-2" class="headerlink" title="stack.c"></a>stack.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">STACK *<span class="title function_">stack_create</span><span class="params">()</span><span class="comment">//创建栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> llist_create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isempty</span><span class="params">(STACK *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> llist_empty(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_push</span><span class="params">(STACK *s, <span class="type">int</span> data)</span><span class="comment">//入栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> llist_insert(s, &amp;data, HEADINSERT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(STACK *s, <span class="type">int</span> *save)</span><span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(isempty(s))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">_fetch(s, save);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_display</span><span class="params">(STACK *s)</span><span class="comment">//遍历栈</span></span><br><span class="line">&#123;</span><br><span class="line">llist_display(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_destroy</span><span class="params">(STACK *s)</span><span class="comment">//销毁栈</span></span><br><span class="line">&#123;</span><br><span class="line">llist_destroy(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h"><a href="#llist-h" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0<span class="comment">//头插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1<span class="comment">//尾插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//字符数组的成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//链表中结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;<span class="comment">//数据域</span></span><br><span class="line"><span class="comment">//char name[NAMESIZE];//数据域</span></span><br><span class="line"><span class="comment">//int math;//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">prev</span>;</span><span class="comment">//prev指针指向前一个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//next指针指向后一个结点</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//查找结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">void</span> *)</span>;<span class="comment">//取出结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_empty</span><span class="params">(LLIST *)</span>;<span class="comment">//判断链表为空链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fetch(LLIST *, <span class="type">void</span> *);<span class="comment">//取出第一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c"><a href="#llist-c" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟空间失败,结束函数,返回NULL</span></span><br><span class="line"></span><br><span class="line">handler-&gt;prev = handler-&gt;next = handler;</span><br><span class="line"><span class="comment">//让头结点的前后指针都指向自己</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//返回指向头结点的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *p = handler;<span class="comment">//代替handler指针进行移动</span></span><br><span class="line">LLIST *newnode = <span class="literal">NULL</span>;<span class="comment">//指向新创建的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为数据结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟空间失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode, data, <span class="keyword">sizeof</span>(LLIST));<span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : p = p-&gt;prev; <span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;prev = p;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向每一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur = handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cur-&gt;id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=handler-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放数据结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;id==*(<span class="type">int</span> *)find_data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_empty</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> handler == handler-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fetch(LLIST *handler, <span class="type">void</span> *save)<span class="comment">//取出第一个数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = handler-&gt;next;</span><br><span class="line"></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(cur-&gt;id));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-2"><a href="#makefile-2" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span> : main.o llist.o <span class="built_in">stack</span>.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o <span class="built_in">stack</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h1><h2 id="main-c-3"><a href="#main-c-3" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HANOISIZE 7</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> hanoi[HANOISIZE];</span><br><span class="line"><span class="type">int</span> ind;</span><br><span class="line">&#125;hanoi_arr[<span class="number">3</span>] = &#123;&#123;&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;, <span class="number">7</span>&#125;, &#123;&#125;, &#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)<span class="comment">//铁柱的遍历</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; hanoi_arr[i].ind; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, hanoi_arr[i].hanoi[j]);</span><br><span class="line"><span class="keyword">for</span>(; j &lt; <span class="number">10</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> src, <span class="type">int</span> dest)</span></span><br><span class="line">&#123;</span><br><span class="line">hanoi_arr[src].ind--;</span><br><span class="line">hanoi_arr[dest].hanoi[hanoi_arr[dest].ind] = hanoi_arr[src].hanoi[hanoi_arr[src].ind];</span><br><span class="line">hanoi_arr[dest].ind++;</span><br><span class="line">draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">play</span><span class="params">(<span class="type">int</span> src, <span class="type">int</span> dest, <span class="type">int</span> tmp, <span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">move(src, dest);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">play(src, tmp, dest, num - <span class="number">1</span>);</span><br><span class="line">move(src, dest);</span><br><span class="line">play(tmp, dest, src, num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">draw();</span><br><span class="line"></span><br><span class="line">play(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, HANOISIZE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_07day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_07day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_07day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-9<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>一.温故知新    栈式的存储结构(受限制的存储结构)    特点 : 先进后出    线性表中的特殊存储形式    通过顺序表来实现栈式存储结构    通过链表来实现栈式存储结构#define STACKSIZE 6struct node&#123;    int stack_buf[STACKSIZE];    int stack_ind;&#125;;    队列式的存储结构(受限制的存储结构)    特点 : 先进先出    线性表中的特殊存储形式    通过顺序表来实现队列式的存储结构    通过链表来实现队列式的存储结构#define QUEUESIZE 6struct node&#123;    int queue[QUEUESIZE];    int front;    int rear;&#125;;早测快慢指针struct llist_node &#123;    int val;    struct llist_node *next;&#125;;1.反转链表给你一个无头单向不循环链表的首结点l ，请你反转链表，并返回反转后的链表首结点<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> llist_node *<span class="title function_">func</span><span class="params">(<span class="keyword">struct</span> llist_node *l)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> l;<span class="comment">//指向当前要反转的结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向原链表cur之后的位置</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向反转链表之后cur之后的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)<span class="comment">//遍历所有结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = cur-&gt;next;</span><br><span class="line">cur-&gt;next = next;</span><br><span class="line">next = cur;</span><br><span class="line">cur = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2.链表的中间结点给定一个头结点为handler的单向不循环链表,返回链表的中间结点如果有两个中间结点，则返回第二个中间结点。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> llist_node *<span class="title function_">fund</span><span class="params">(<span class="keyword">struct</span> llist_node *handler)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">s</span> =</span> handler;<span class="comment">//慢指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">f</span> =</span> handler;<span class="comment">//快指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(f != <span class="literal">NULL</span> &amp;&amp; f-&gt;next != <span class="literal">NULL</span>)<span class="comment">//判断只有一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">s = s-&gt;next;</span><br><span class="line">f = f-&gt;next-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>===================================作业1.把今天讲过的内容完完整整的复习一遍2.把队列式的存储结构的实现方法再写一遍3.写个链表,把早测的功能函数写程序实现===================================</code></pre><h1 id="库的制作"><a href="#库的制作" class="headerlink" title="库的制作"></a>库的制作</h1><pre><code>在Linux环境中,以.a结尾的库文件是静态库文件在Linux环境中,以.so结尾的库文件是动态库文件静态库 : 是在程序编译时会被连接到目标代码中,当编译完之后        程序运行时将不再需要该静态库,        所以可执行程序的体积比较大动态库 : 是在程序编译时仅仅简单的引用,当编译完之后        程序运行时需要该动态库,        所以可执行程序的体积比较小查看可执行代码的依赖的共享库：ldd命令 – 打印程序依赖的共享库注意 : 如果静态库和动态库同时存在的情况下优先使用动态库</code></pre><h2 id="静态库的制作方法"><a href="#静态库的制作方法" class="headerlink" title="静态库的制作方法"></a>静态库的制作方法</h2><pre><code>1.把.c文件编译成.o目标文件    gcc -c -o xxxx.o xxxx.c2.把.o目标文件编译成.a静态库文件    ar -cr libxxxx.a xxxx.o3.生成索引    ranlib libxxxx.a4.把静态库放到/lib目录中    mv libxxxx.a /lib5.把头文件放到/usr/include目录中    mv xxxx.h /usr/include6.编译主程序    gcc main.c -lxxxx如果没有把libxxxx.a和xxxx.h文件放到指定目录下    gcc main.c -I[头文件的路径] -L[库文件的路径] -lxxxx注意 : [头文件的路径] 和 [库文件的路径]只写路径不写文件名    -I指定头文件的路径    -L指定库文件的路径    -l链接库的名字</code></pre><h2 id="动态库的制作"><a href="#动态库的制作" class="headerlink" title="动态库的制作"></a>动态库的制作</h2><pre><code>1.把.c文件编译成.o目标文件    gcc -fPIC -c -o xxx.o xxx.c    -fPIC使用gcc编译必须与位置无关2.把.o目标文件编译成动态库文件    gcc -shared -o libxxx.so xxx.o3.把动态库文件移动到/lib目录中    mv libxxx.so /lib4.把头文件移动到/usr/include目录中    mv xxx.h /usr/include5.编译文件    gcc main.c -lxxx-------------------------------------long arr[5] = &#123;11,22,33,44,55&#125;;与位置有关    比如 : arr 0x1000    arr[0]*(long *)(0x1000)    arr[1]*(long *)(0x1008)与位置无关    比如 : arr 0x2000    arr[0]*(long *)(0x2000)    arr[1]*((long *)(0x2000) + 1);-------------------------------------</code></pre><h1 id="quueu-arr队列"><a href="#quueu-arr队列" class="headerlink" title="quueu_arr队列"></a>quueu_arr队列</h1><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">QUEUE *q = <span class="literal">NULL</span>;<span class="comment">//q指针指向队列</span></span><br><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用来接收返回值的变量</span></span><br><span class="line"><span class="type">int</span> save = <span class="number">0</span>;<span class="comment">//用来保存出队的数据</span></span><br><span class="line"></span><br><span class="line">q = queue_create();<span class="comment">//创建队列</span></span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(*data); i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = queue_en(q, data[i]);<span class="comment">//入队</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)<span class="comment">//判断队列是否满了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue Is Full!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue_display(q);<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = queue_de(q, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue Is Empty!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Save = %d\n&quot;</span>, save);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">queue_display(q);<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line">queue_en(q, <span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">queue_display(q);<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line">queue_destroy(q);<span class="comment">//释放队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="queue-h"><a href="#queue-h" class="headerlink" title="queue.h"></a>queue.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __QUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUEUESIZE 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">queue</span>[QUEUESIZE];<span class="comment">//队列</span></span><br><span class="line"><span class="type">int</span> front;<span class="comment">//队头</span></span><br><span class="line"><span class="type">int</span> rear;<span class="comment">//队尾</span></span><br><span class="line">&#125;QUEUE;</span><br><span class="line"></span><br><span class="line">QUEUE *<span class="title function_">queue_create</span><span class="params">()</span>;<span class="comment">//创建队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_en</span><span class="params">(QUEUE *q, <span class="type">int</span> data)</span>;<span class="comment">//入队</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_de</span><span class="params">(QUEUE *q, <span class="type">int</span> *save)</span>;<span class="comment">//出队</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_display</span><span class="params">(QUEUE *q)</span>;<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(QUEUE *q)</span>;<span class="comment">//销毁队列</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="queue-c"><a href="#queue-c" class="headerlink" title="queue.c"></a>queue.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QUEUE *<span class="title function_">queue_create</span><span class="params">()</span><span class="comment">//创建队列</span></span><br><span class="line">&#123;</span><br><span class="line">QUEUE *q = <span class="literal">NULL</span>;<span class="comment">//将来指向队列</span></span><br><span class="line"></span><br><span class="line">q = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QUEUE));<span class="comment">//为队列开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">q-&gt;front = q-&gt;rear = <span class="number">0</span>;<span class="comment">//把队头和队尾都标记到0的位置</span></span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_en</span><span class="params">(QUEUE *q, <span class="type">int</span> data)</span><span class="comment">//入队</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((q-&gt;rear + <span class="number">1</span>) % QUEUESIZE == q-&gt;front)<span class="comment">//判断队满</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % QUEUESIZE;<span class="comment">//移动队尾的标志</span></span><br><span class="line">q-&gt;<span class="built_in">queue</span>[q-&gt;rear] = data;<span class="comment">//入队数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_de</span><span class="params">(QUEUE *q, <span class="type">int</span> *save)</span><span class="comment">//出队</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q-&gt;front == q-&gt;rear)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">q-&gt;front = (q-&gt;front + <span class="number">1</span>) % QUEUESIZE;</span><br><span class="line">*save = q-&gt;<span class="built_in">queue</span>[q-&gt;front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_display</span><span class="params">(QUEUE *q)</span><span class="comment">//遍历队列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = (q-&gt;front + <span class="number">1</span>) % QUEUESIZE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(q-&gt;front == q-&gt;rear)<span class="comment">//判断是否是空队列</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(i != q-&gt;rear)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, q-&gt;<span class="built_in">queue</span>[i]);</span><br><span class="line">i = (i + <span class="number">1</span>) % QUEUESIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q-&gt;<span class="built_in">queue</span>[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(QUEUE *q)</span><span class="comment">//销毁队列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span> : main.o <span class="built_in">queue</span>.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o <span class="built_in">queue</span></span><br></pre></td></tr></table></figure></code></pre><h1 id="queue-llist-队列"><a href="#queue-llist-队列" class="headerlink" title="queue_llist_队列"></a>queue_llist_队列</h1><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">QUEUE *q = <span class="literal">NULL</span>;<span class="comment">//q指针指向队列</span></span><br><span class="line"><span class="type">int</span> data[] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用来接收返回值的变量</span></span><br><span class="line"><span class="type">int</span> save = <span class="number">0</span>;<span class="comment">//用来保存出队的数据</span></span><br><span class="line"></span><br><span class="line">q = queue_create();<span class="comment">//创建队列</span></span><br><span class="line"><span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(*data); i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = queue_en(q, data[i]);<span class="comment">//入队</span></span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)<span class="comment">//判断队列是否满了</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue Is Full!\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue_display(q);<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = queue_de(q, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Queue Is Empty!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Save = %d\n&quot;</span>, save);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***********************\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">queue_display(q);<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line">queue_en(q, <span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">queue_display(q);<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line">queue_destroy(q);<span class="comment">//释放队列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="queue-h-1"><a href="#queue-h-1" class="headerlink" title="queue.h"></a>queue.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __QUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> LLIST QUEUE;</span><br><span class="line"></span><br><span class="line">QUEUE *<span class="title function_">queue_create</span><span class="params">()</span>;<span class="comment">//创建队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_en</span><span class="params">(QUEUE *q, <span class="type">int</span> data)</span>;<span class="comment">//入队</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_de</span><span class="params">(QUEUE *q, <span class="type">int</span> *save)</span>;<span class="comment">//出队</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_display</span><span class="params">(QUEUE *q)</span>;<span class="comment">//遍历队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(QUEUE *q)</span>;<span class="comment">//销毁队列</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="queue-c-1"><a href="#queue-c-1" class="headerlink" title="queue.c"></a>queue.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QUEUE *<span class="title function_">queue_create</span><span class="params">()</span><span class="comment">//创建队列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> llist_create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_en</span><span class="params">(QUEUE *q, <span class="type">int</span> data)</span><span class="comment">//入队</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> llist_insert(q, &amp;data, TAILINSERT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_de</span><span class="params">(QUEUE *q, <span class="type">int</span> *save)</span><span class="comment">//出队</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(llist_empty(q))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">_fetch(q, save);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_display</span><span class="params">(QUEUE *q)</span><span class="comment">//遍历队列</span></span><br><span class="line">&#123;</span><br><span class="line">llist_display(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_destroy</span><span class="params">(QUEUE *q)</span><span class="comment">//销毁队列</span></span><br><span class="line">&#123;</span><br><span class="line">llist_destroy(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h"><a href="#llist-h" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0<span class="comment">//头插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1<span class="comment">//尾插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//字符数组的成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//链表中结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;<span class="comment">//数据域</span></span><br><span class="line"><span class="comment">//char name[NAMESIZE];//数据域</span></span><br><span class="line"><span class="comment">//int math;//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">prev</span>;</span><span class="comment">//prev指针指向前一个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//next指针指向后一个结点</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//查找结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">void</span> *)</span>;<span class="comment">//取出结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_empty</span><span class="params">(LLIST *)</span>;<span class="comment">//判断链表为空链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fetch(LLIST *, <span class="type">void</span> *);<span class="comment">//取出第一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c"><a href="#llist-c" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟空间失败,结束函数,返回NULL</span></span><br><span class="line"></span><br><span class="line">handler-&gt;prev = handler-&gt;next = handler;</span><br><span class="line"><span class="comment">//让头结点的前后指针都指向自己</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//返回指向头结点的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *p = handler;<span class="comment">//代替handler指针进行移动</span></span><br><span class="line">LLIST *newnode = <span class="literal">NULL</span>;<span class="comment">//指向新创建的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为数据结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟空间失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode, data, <span class="keyword">sizeof</span>(LLIST));<span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : p = p-&gt;prev; <span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;prev = p;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向每一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==================\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(cur = handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, cur-&gt;id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n==================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=handler-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放数据结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;id==*(<span class="type">int</span> *)find_data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_empty</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> handler == handler-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _fetch(LLIST *handler, <span class="type">void</span> *save)<span class="comment">//取出第一个数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = handler-&gt;next;</span><br><span class="line"></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(cur-&gt;id));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-1"><a href="#makefile-1" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span> : main.o llist.o <span class="built_in">queue</span>.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o <span class="built_in">queue</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_04day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_04day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_04day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-4<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>1.写出有头单向循环链表的插入功能(头插 尾插)2.实现冒泡法排序    void sort(int *arr, int size);有头单向循环链表的功能无头单向不循环链表约瑟夫环(约瑟夫杀人游戏)--------------------------------------------作业 :1.把今天讲过的内容完完整整的复习一遍2.把之前写过的5种链表都重新写一遍    1)有头单向不循环链表    2)有头单向循环链表    3)无头单向不循环链表    4)无头单向循环链表    5)有头双向循环链表--------------------------------------------</code></pre><h1 id="约瑟夫环-约瑟夫杀人游戏"><a href="#约瑟夫环-约瑟夫杀人游戏" class="headerlink" title="约瑟夫环(约瑟夫杀人游戏)"></a>约瑟夫环(约瑟夫杀人游戏)</h1><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;joseph.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">JOSEPH *j = <span class="literal">NULL</span>;<span class="comment">//j指针指向第一个有效结点</span></span><br><span class="line"><span class="type">int</span> player_num = <span class="number">0</span>;<span class="comment">//保存玩家个数</span></span><br><span class="line"><span class="type">int</span> kill_num = <span class="number">0</span>;<span class="comment">//数的数字</span></span><br><span class="line"><span class="type">int</span> alive = <span class="number">0</span>;<span class="comment">//保存存活下来的人的ID</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please Insert Player Number : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;player_num);</span><br><span class="line">j = joseph_insert(player_num);<span class="comment">//插入数据结点</span></span><br><span class="line"><span class="keyword">if</span>(j == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;===========================\n&quot;</span>);</span><br><span class="line">joseph_display(j);<span class="comment">//遍历链表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;===========================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please Insert Kill Number : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;kill_num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***************************\n&quot;</span>);</span><br><span class="line">alive = joseph_play(j, player_num, kill_num);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n***************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;alive = %d\n&quot;</span>, alive);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="joseph-h"><a href="#joseph-h" class="headerlink" title="joseph.h"></a>joseph.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __JOSEPH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __JOSEPH_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;<span class="comment">//编号</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;JOSEPH;</span><br><span class="line"></span><br><span class="line">JOSEPH *<span class="title function_">joseph_insert</span><span class="params">(<span class="type">int</span> )</span>;</span><br><span class="line"></span><br><span class="line">JOSEPH *<span class="title function_">joseph_display</span><span class="params">(JOSEPH *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">joseph_play</span><span class="params">(JOSEPH *, <span class="type">int</span> , <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="joseph-c"><a href="#joseph-c" class="headerlink" title="joseph.c"></a>joseph.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;joseph.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">JOSEPH *<span class="title function_">joseph_insert</span><span class="params">(<span class="type">int</span> player_num)</span></span><br><span class="line">&#123;</span><br><span class="line">JOSEPH *j = <span class="literal">NULL</span>;<span class="comment">//j指针指向第一个数据结点</span></span><br><span class="line">JOSEPH *p = <span class="literal">NULL</span>;<span class="comment">//p指针代替j指针进行移动</span></span><br><span class="line">JOSEPH *newnode = <span class="literal">NULL</span>;<span class="comment">//指针指向新创建的结点</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;<span class="comment">//循环变量</span></span><br><span class="line"></span><br><span class="line">j = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(JOSEPH));</span><br><span class="line"><span class="keyword">if</span>(j == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">j-&gt;id = i;</span><br><span class="line">j-&gt;next = j;</span><br><span class="line">p = j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= player_num; i++)</span><br><span class="line">&#123;</span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(JOSEPH));</span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">newnode-&gt;id = i;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = newnode;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JOSEPH *<span class="title function_">joseph_display</span><span class="params">(JOSEPH *j)</span></span><br><span class="line">&#123;</span><br><span class="line">JOSEPH *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur = j; cur-&gt;next != j; cur = cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cur-&gt;id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">joseph_play</span><span class="params">(JOSEPH *j, <span class="type">int</span> player_num, <span class="type">int</span> kill_num)</span></span><br><span class="line">&#123;</span><br><span class="line">JOSEPH *back = j;</span><br><span class="line">JOSEPH *cur = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> p_n = player_num;</span><br><span class="line"><span class="type">int</span> k_n = kill_num;</span><br><span class="line"><span class="type">int</span> alive = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != j)<span class="comment">//为了找第一个结点的前一个位置</span></span><br><span class="line">back = back-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(--p_n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k_n = kill_num - <span class="number">1</span>; k_n &gt; <span class="number">0</span>; k_n--)</span><br><span class="line">back = back-&gt;next;</span><br><span class="line">cur = back-&gt;next;</span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, cur-&gt;id);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line">alive = back-&gt;id;</span><br><span class="line"><span class="built_in">free</span>(back);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> alive;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><pre><code>joseph : main.o joseph.o    gcc -o $@ $^clean :    rm -rf *.o joseph</code></pre><h1 id="有头双向循环链表"><a href="#有头双向循环链表" class="headerlink" title="有头双向循环链表"></a>有头双向循环链表</h1><pre><code>/*    有头双向循环链表    1.创建头结点llist_create();    2.插入数据结点(头插法 尾插法)llist_insert();    3.遍历链表llist_display();    4.销毁链表llist_destroy();*/</code></pre><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指针指向链表的头结点</span></span><br><span class="line">LLIST *find = <span class="literal">NULL</span>;<span class="comment">//指针指向要查找的结点</span></span><br><span class="line">LLIST data;<span class="comment">//存储用户的数据</span></span><br><span class="line">LLIST save;<span class="comment">//保存取出的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//接收函数的返回值</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;<span class="comment">//要查找的ID号</span></span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;<span class="comment">//要查找的名字</span></span><br><span class="line"></span><br><span class="line">handler = llist_create();<span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点是否创建失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//创建失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">data.id = <span class="number">100</span> + i;<span class="comment">//获取数据</span></span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);<span class="comment">//获取数据</span></span><br><span class="line">data.math = <span class="number">100</span> - i;<span class="comment">//获取数据</span></span><br><span class="line">data.prev = data.next = <span class="literal">NULL</span>;<span class="comment">//prev和next指向NULL</span></span><br><span class="line">llist_insert(handler, &amp;data, TAILINSERT);</span><br><span class="line"><span class="comment">//插入数据结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_display(handler);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(handler, &quot;stu9&quot;);//查找结点</span></span><br><span class="line"><span class="comment">if(find == NULL)//判断是否没有找到</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!%d%s%d\n&quot;,find-&gt;id, find-&gt;name,find-&gt;math);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(handler, &amp;find_id);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(handler, find_name, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!%d%s%d\n&quot;</span>,save.id, save.name, save.math);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(handler);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line">llist_destroy(handler);<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h"><a href="#llist-h" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0<span class="comment">//头插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1<span class="comment">//尾插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//字符数组的成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//链表中结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;<span class="comment">//数据域</span></span><br><span class="line"><span class="type">char</span> name[NAMESIZE];<span class="comment">//数据域</span></span><br><span class="line"><span class="type">int</span> math;<span class="comment">//数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">prev</span>;</span><span class="comment">//prev指针指向前一个结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//next指针指向后一个结点</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//查找结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">void</span> *)</span>;<span class="comment">//取出结点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c"><a href="#llist-c" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟空间失败,结束函数,返回NULL</span></span><br><span class="line"></span><br><span class="line">handler-&gt;prev = handler-&gt;next = handler;</span><br><span class="line"><span class="comment">//让头结点的前后指针都指向自己</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//返回指向头结点的指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *p = handler;<span class="comment">//代替handler指针进行移动</span></span><br><span class="line">LLIST *newnode = <span class="literal">NULL</span>;<span class="comment">//指向新创建的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为数据结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟空间失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode, data, <span class="keyword">sizeof</span>(LLIST));<span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : p = p-&gt;prev; <span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;prev = p;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向每一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur = handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d\n&quot;</span>,cur-&gt;id,cur-&gt;name,cur-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=handler-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放数据结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;id==*(<span class="type">int</span> *)find_data || </span><br><span class="line">!(<span class="built_in">strcmp</span>(cur-&gt;name, find_data)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-1"><a href="#makefile-1" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_05day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_05day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_05day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-5<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>一.早测    完成有头双向循环链表的功能    1.创建头结点    2.插入数据结点    3.遍历链表    4.销毁链表    5.查找结点    6.删除结点    7.拿出结点只写声明和实现,不用写调用(llist.c 和 llist.h)=================================作业1.把这一周讲过的内容都完完整整的复习一遍2.把三个版本的通用性强的链表重新实现一遍3.在纸上写链表的代码=================================</code></pre><h1 id="通用性强的链表"><a href="#通用性强的链表" class="headerlink" title="通用性强的链表"></a>通用性强的链表</h1><p>结点图<br><img src="/images/04ds/05day/lib1/%E7%BB%93%E7%82%B9%E5%9B%BE.png"></p><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//字符数组的成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//客户自己创建的数据结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> tel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d%d%d\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;math,p-&gt;age, p-&gt;tel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">id_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;id - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">name_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(<span class="built_in">strcmp</span>(p-&gt;name, k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tel_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;tel - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//handler指针指向头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">data</span>;</span><span class="comment">//存放客户自己的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">save</span>;</span><span class="comment">//存储拿出的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">find</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向找到的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//接收返回值</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> find_tel = <span class="number">10002</span>;</span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;</span><br><span class="line"></span><br><span class="line">handler = llist_create(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点是否创建失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//创建失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">data.id = <span class="number">100</span> + i;<span class="comment">//存储数据</span></span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);<span class="comment">//存储数据</span></span><br><span class="line">data.math = <span class="number">100</span> - i;<span class="comment">//存储数据</span></span><br><span class="line">data.age = <span class="number">20</span> + i;<span class="comment">//存储数据</span></span><br><span class="line">data.tel = <span class="number">10000</span> + i;<span class="comment">//存储数据</span></span><br><span class="line">llist_insert(handler,&amp;data,TAILINSERT);<span class="comment">//插入数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_display(handler, print);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;============================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(handler, &amp;find_tel, tel_cmp);//查找</span></span><br><span class="line"><span class="comment">if(find == NULL)//判断是否没有找到</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">print(find);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(handler, &amp;find_tel, tel_cmp);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(handler, &amp;find_tel, tel_cmp, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!\n&quot;</span>);</span><br><span class="line">print(&amp;save);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;============================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(handler, print);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line">llist_destroy(handler);<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h"><a href="#llist-h" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*llist_op)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//定义函数指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*llist_cmp)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *,<span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//数据结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">void</span> *data;<span class="comment">//data指针指向数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">prev</span>;</span><span class="comment">//prev指针指向前驱</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//next指针指向后继</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span>//头结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//保存客户创建的结构体的大小</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> <span class="title">head</span>;</span><span class="comment">//</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> )</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *, llist_op)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp)</span>;<span class="comment">//查找</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp)</span>;<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp, <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c"><a href="#llist-c" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟失败,结束函数,并且返回NULL</span></span><br><span class="line">handler-&gt;size = size;<span class="comment">//把客户结构体大小存储起来</span></span><br><span class="line">handler-&gt;head.prev = &amp;handler-&gt;head;<span class="comment">//前驱指向自己</span></span><br><span class="line">handler-&gt;head.next = &amp;handler-&gt;head;<span class="comment">//后继指向自己</span></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//把指向头结点的指针返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">p</span> =</span> &amp;handler-&gt;head;<span class="comment">//保存头结点地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;<span class="comment">//保存新建的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> llist_node));<span class="comment">//数据结点</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line">newnode-&gt;data=<span class="built_in">malloc</span>(handler-&gt;size);<span class="comment">//开辟数据空间</span></span><br><span class="line"><span class="keyword">if</span>(newnode-&gt;data == <span class="literal">NULL</span>)<span class="comment">//判断数据空间是否开辟失败</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(newnode);<span class="comment">//释放数据结点的空间</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;<span class="comment">//数据空间开辟失败,结束函数,并且返回-2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(newnode-&gt;data, data, handler-&gt;size);<span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : p = p-&gt;prev; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode-&gt;data); <span class="built_in">free</span>(newnode);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;prev = p;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler, llist_op op)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=cur-&gt;next)</span><br><span class="line">op(cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=handler-&gt;head.next)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *_<span class="title">find</span>(<span class="title">LLIST</span> *<span class="title">handler</span>, <span class="title">const</span> <span class="title">void</span> *<span class="title">find_data</span>, <span class="title">llist_cmp</span> <span class="title">cmp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=cur-&gt;next)</span><br><span class="line"><span class="keyword">if</span>(cmp(cur-&gt;data, find_data))</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler, find_data, cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> cur-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler, find_data, cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">///////cur指针已经指向要删除的结点</span></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler,find_data,cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur-&gt;data, handler-&gt;size);</span><br><span class="line"><span class="built_in">free</span>(cur-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure></code></pre><h1 id="可变长的通用性强的链表"><a href="#可变长的通用性强的链表" class="headerlink" title="可变长的通用性强的链表"></a>可变长的通用性强的链表</h1><pre><code>=================================</code></pre><h2 id="可变长的结构体"><a href="#可变长的结构体" class="headerlink" title="可变长的结构体"></a>可变长的结构体</h2><pre><code>        需要把可变长的因子放到结构体定义的最后<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aaa</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">void</span> *data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aaa</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">aaa</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bbb</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bbb</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bbb</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bbb</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(struct aaa) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> aaa));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(struct bbb) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> bbb));</span><br><span class="line"></span><br><span class="line"><span class="comment">//newnode = malloc(sizeof(struct bbb));//开辟16byte空间</span></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> bbb) + <span class="number">40</span>);<span class="comment">//开辟56byte空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>=================================</code></pre><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//字符数组的成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//客户自己创建的数据结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> tel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d%d%d\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;math,p-&gt;age, p-&gt;tel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">id_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;id - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">name_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(<span class="built_in">strcmp</span>(p-&gt;name, k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tel_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;tel - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//handler指针指向头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">data</span>;</span><span class="comment">//存放客户自己的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">save</span>;</span><span class="comment">//存储拿出的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">find</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向找到的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//接收返回值</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> find_tel = <span class="number">10002</span>;</span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;</span><br><span class="line"></span><br><span class="line">handler = llist_create(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点是否创建失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//创建失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">data.id = <span class="number">100</span> + i;<span class="comment">//存储数据</span></span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);<span class="comment">//存储数据</span></span><br><span class="line">data.math = <span class="number">100</span> - i;<span class="comment">//存储数据</span></span><br><span class="line">data.age = <span class="number">20</span> + i;<span class="comment">//存储数据</span></span><br><span class="line">data.tel = <span class="number">10000</span> + i;<span class="comment">//存储数据</span></span><br><span class="line">llist_insert(handler,&amp;data,TAILINSERT);<span class="comment">//插入数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_display(handler, print);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;============================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(handler, &amp;find_tel, tel_cmp);//查找</span></span><br><span class="line"><span class="comment">if(find == NULL)//判断是否没有找到</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">print(find);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(handler, &amp;find_tel, tel_cmp);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(handler, &amp;find_tel, tel_cmp, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!\n&quot;</span>);</span><br><span class="line">print(&amp;save);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;============================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(handler, print);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line">llist_destroy(handler);<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h-1"><a href="#llist-h-1" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*llist_op)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//定义函数指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*llist_cmp)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *,<span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//数据结点的结构体(可变长的结构体)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">prev</span>;</span><span class="comment">//prev指针指向前驱</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//next指针指向后继</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">0</span>];<span class="comment">//可变长的因子</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span>//头结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//保存客户创建的结构体的大小</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> <span class="title">head</span>;</span><span class="comment">//</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> )</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *, llist_op)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp)</span>;<span class="comment">//查找</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp)</span>;<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp, <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c-1"><a href="#llist-c-1" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟失败,结束函数,并且返回NULL</span></span><br><span class="line">handler-&gt;size = size;<span class="comment">//把客户结构体大小存储起来</span></span><br><span class="line">handler-&gt;head.prev = &amp;handler-&gt;head;<span class="comment">//前驱指向自己</span></span><br><span class="line">handler-&gt;head.next = &amp;handler-&gt;head;<span class="comment">//后继指向自己</span></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//把指向头结点的指针返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">p</span> =</span> &amp;handler-&gt;head;<span class="comment">//保存头结点地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;<span class="comment">//保存新建的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> llist_node) + handler-&gt;size);<span class="comment">//数据结点</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode-&gt;data, data, handler-&gt;size);<span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : p = p-&gt;prev; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;prev = p;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler, llist_op op)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=cur-&gt;next)</span><br><span class="line">op(cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=handler-&gt;head.next)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *_<span class="title">find</span>(<span class="title">LLIST</span> *<span class="title">handler</span>, <span class="title">const</span> <span class="title">void</span> *<span class="title">find_data</span>, <span class="title">llist_cmp</span> <span class="title">cmp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=cur-&gt;next)</span><br><span class="line"><span class="keyword">if</span>(cmp(cur-&gt;data, find_data))</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler, find_data, cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> cur-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler, find_data, cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">///////cur指针已经指向要删除的结点</span></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler,find_data,cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur-&gt;data, handler-&gt;size);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-1"><a href="#makefile-1" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure>=================================</code></pre><h1 id="封装通用性强的链表"><a href="#封装通用性强的链表" class="headerlink" title="封装通用性强的链表"></a>封装通用性强的链表</h1><h2 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//字符数组的成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//客户自己创建的数据结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> tel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d%d%d\n&quot;</span>,p-&gt;id,p-&gt;name,p-&gt;math,p-&gt;age, p-&gt;tel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">id_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;id - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">name_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(<span class="built_in">strcmp</span>(p-&gt;name, k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tel_cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *data, <span class="type">const</span> <span class="type">void</span> *key)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">p</span> =</span> data;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *k = key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> !(p-&gt;tel - *k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//handler指针指向头结点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">data</span>;</span><span class="comment">//存放客户自己的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">save</span>;</span><span class="comment">//存储拿出的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> *<span class="title">find</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向找到的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//接收返回值</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> find_tel = <span class="number">10002</span>;</span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;</span><br><span class="line"></span><br><span class="line">handler = llist_create(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line"><span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点是否创建失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//创建失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">data.id = <span class="number">100</span> + i;<span class="comment">//存储数据</span></span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);<span class="comment">//存储数据</span></span><br><span class="line">data.math = <span class="number">100</span> - i;<span class="comment">//存储数据</span></span><br><span class="line">data.age = <span class="number">20</span> + i;<span class="comment">//存储数据</span></span><br><span class="line">data.tel = <span class="number">10000</span> + i;<span class="comment">//存储数据</span></span><br><span class="line">llist_insert(handler,&amp;data,TAILINSERT);<span class="comment">//插入数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_display(handler, print);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;============================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(handler, &amp;find_tel, tel_cmp);//查找</span></span><br><span class="line"><span class="comment">if(find == NULL)//判断是否没有找到</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">print(find);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(handler, &amp;find_tel, tel_cmp);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(handler, &amp;find_tel, tel_cmp, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!\n&quot;</span>);</span><br><span class="line">print(&amp;save);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;============================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(handler, print);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line">llist_destroy(handler);<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h-2"><a href="#llist-h-2" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*llist_op)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//定义函数指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*llist_cmp)</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *,<span class="type">const</span> <span class="type">void</span> *)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> )</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *, llist_op)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp)</span>;<span class="comment">//查找</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp)</span>;<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, llist_cmp, <span class="type">void</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c-2"><a href="#llist-c-2" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//数据结点的结构体(可变长的结构体)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">prev</span>;</span><span class="comment">//prev指针指向前驱</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//next指针指向后继</span></span><br><span class="line"><span class="type">char</span> data[<span class="number">0</span>];<span class="comment">//可变长的因子</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span>//头结点的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> size;<span class="comment">//保存客户创建的结构体的大小</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> <span class="title">head</span>;</span><span class="comment">//</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">(<span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> *<span class="title">handler</span> =</span> <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断头结点空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟失败,结束函数,并且返回NULL</span></span><br><span class="line">handler-&gt;size = size;<span class="comment">//把客户结构体大小存储起来</span></span><br><span class="line">handler-&gt;head.prev = &amp;handler-&gt;head;<span class="comment">//前驱指向自己</span></span><br><span class="line">handler-&gt;head.next = &amp;handler-&gt;head;<span class="comment">//后继指向自己</span></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//把指向头结点的指针返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *h,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> *<span class="title">handler</span> =</span> h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">p</span> =</span> &amp;handler-&gt;head;<span class="comment">//保存头结点地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">newnode</span> =</span> <span class="literal">NULL</span>;<span class="comment">//保存新建的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> llist_node) + handler-&gt;size);<span class="comment">//数据结点</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode-&gt;data, data, handler-&gt;size);<span class="comment">//拷贝数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : p = p-&gt;prev; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">newnode-&gt;prev = p;</span><br><span class="line">newnode-&gt;next-&gt;prev = newnode;</span><br><span class="line">newnode-&gt;prev-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *h, llist_op op)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> *<span class="title">handler</span> =</span> h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=cur-&gt;next)</span><br><span class="line">op(cur-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *h)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> *<span class="title">handler</span> =</span> h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=handler-&gt;head.next)</span><br><span class="line">&#123;</span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *_<span class="title">find</span>(<span class="title">LLIST</span> *<span class="title">h</span>, <span class="title">const</span> <span class="title">void</span> *<span class="title">find_data</span>, <span class="title">llist_cmp</span> <span class="title">cmp</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> *<span class="title">handler</span> =</span> h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;head.next;cur!=&amp;handler-&gt;head;cur=cur-&gt;next)</span><br><span class="line"><span class="keyword">if</span>(cmp(cur-&gt;data, find_data))</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler, find_data, cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> cur-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler, find_data, cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="comment">///////cur指针已经指向要删除的结点</span></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *h, <span class="type">const</span> <span class="type">void</span> *find_data, llist_cmp cmp, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_head</span> *<span class="title">handler</span> =</span> h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">cur</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = _find(handler,find_data,cmp);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">cur-&gt;next-&gt;prev = cur-&gt;prev;</span><br><span class="line">cur-&gt;prev-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur-&gt;data, handler-&gt;size);</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-2"><a href="#makefile-2" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_02day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_02day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_02day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-2<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>malloc calloc realloc 开辟空间free 释放空间malloc(sizeof(int) * 4);线性存储结构    顺序表        数组            一维数组            多维数组    链表        是一种物理存储单元上非连续\非顺序的存储结构        链表是由一个一个的结点组成的        每一个结点是由两部分组成 : 数据域 和 指针域        数据域 : 是用来存储结点的数据的        指针域 : 是用来存储下一个结点的地址的        在操作链表时包括有 : 增 删 改 查一系列的操作        在描述链表时会用到一些属性            有头链表/无头链表有没有头结点的意思            循环链表/不循环链表链表是否可以构成环            单向链表/双向链表遍历链表方向        有头单向不循环的链表--------------------------------------------------------------------------------    创建一个有头单向不循环的链表    1.创建头结点llist_create();    2.插入数据结点llist_insert();        先把新创建出的结点挂到链表上,再改变链表之前的结构        头插法&#123;11,22,33,44,55&#125;        把数据结点插入到头结点之后的位置        头结点-&gt;NULL        头结点-&gt;11-&gt;NULL        头结点-&gt;22-&gt;11-&gt;NULL        头结点-&gt;33-&gt;22-&gt;11-&gt;NULL                尾插法&#123;11,22,33,44,55&#125;        把数据结点插入到链表最后的位置        头结点-&gt;NULL        头结点-&gt;11-&gt;NULL        头结点-&gt;11-&gt;22-&gt;NULL        头结点-&gt;11-&gt;22-&gt;33-&gt;NULL    3.遍历链表llist_display();    4.销毁链表llist_destroy();        销毁链表或者删除结点时要注意        单链表再删除时需要一前一后两个指针    =======================================    5.查找结点llist_find();    6.删除结点llist_delete();    7.拿出结点llist_fetch();==============================作业1.把今天讲过的内容完完整整的复习一遍2.把有头单向不循环链表再重新的写一遍3.尝试自己搞定有头单向循环链表==============================</code></pre><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="llist-h"><a href="#llist-h" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MODE</span> &#123;</span>HEADINSERT, TAILINSERT&#125;;<span class="comment">//头插法和尾插法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;<span class="comment">//数据域中的数据</span></span><br><span class="line"><span class="type">char</span> name[NAMESIZE];<span class="comment">//数据域中的数据</span></span><br><span class="line"><span class="type">int</span> math;<span class="comment">//数据域中的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span><span class="comment">//指针域(指向下一个结点的指针)</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *,<span class="type">const</span> <span class="type">void</span> *,<span class="type">int</span>)</span>;<span class="comment">//插入数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//查找结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">void</span> *)</span>;<span class="comment">//取出数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c"><a href="#llist-c" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为头结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟空间失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟空间失败,函数结束,并且返回NULL</span></span><br><span class="line">handler-&gt;next = <span class="literal">NULL</span>;<span class="comment">//让头结点的next指针指向NULL</span></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//返回头结点的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *p = handler;<span class="comment">//通过指针p代替handler做操作</span></span><br><span class="line">LLIST *newnode = <span class="literal">NULL</span>;<span class="comment">//指向新创建出来的数据结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//开辟数据结点的空间</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断开辟空间是否失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//开辟失败,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode, data, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="comment">//把数据拷贝到数据结点中</span></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : newnode-&gt;next = p-&gt;next; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : <span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span>) p = p-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line"><span class="comment">//模式选择有误,释放空间,结束程序,并且返回-2</span></span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向每一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur = handler-&gt;next; cur != <span class="literal">NULL</span>; cur = cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d\n&quot;</span>, cur-&gt;id,cur-&gt;name,cur-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = handler;<span class="comment">//指向头结点的指针</span></span><br><span class="line">LLIST *cur = handler-&gt;next;<span class="comment">//指向第一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">back-&gt;next = cur-&gt;next;<span class="comment">//把要释放的结点从链表中拆除</span></span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放数据结点</span></span><br><span class="line">cur = back-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(back);<span class="comment">//释放头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//循环查找的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur = handler-&gt;next; cur != <span class="literal">NULL</span>; cur = cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;id == *(<span class="type">int</span> *)find_data || </span><br><span class="line">!<span class="built_in">strcmp</span>(cur-&gt;name, find_data))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> cur;<span class="comment">//找到要查找的结点,并且返回</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//没有找到数据结点,返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = handler;<span class="comment">//指向要删除的结点的前一个位置</span></span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向要删除的结点</span></span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);<span class="comment">//查找结点</span></span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)<span class="comment">//判断是否没有找到结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != cur)<span class="comment">//找到要删除结点的前一个位置</span></span><br><span class="line">back = back-&gt;next;</span><br><span class="line"></span><br><span class="line">back-&gt;next = cur-&gt;next;<span class="comment">//把要删除结点从链表中拆除</span></span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放删除的结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = handler;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);</span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != cur)</span><br><span class="line">back = back-&gt;next;</span><br><span class="line"></span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//handler指针指向头结点</span></span><br><span class="line">LLIST *find = <span class="literal">NULL</span>;<span class="comment">//find指针指向将来找到的结点</span></span><br><span class="line">LLIST data;<span class="comment">//用来存储数据的变量</span></span><br><span class="line">LLIST save;<span class="comment">//将来保存取出的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用来接收返回值的变量</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;<span class="comment">//要查找的id号</span></span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;<span class="comment">//要查找的名字</span></span><br><span class="line"></span><br><span class="line">handler = llist_create();<span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断创建头结点是否失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//创建头结点失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)<span class="comment">//循环进行插入数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">data.id = <span class="number">100</span> + i;<span class="comment">//存储数据</span></span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);<span class="comment">//存储数据</span></span><br><span class="line">data.math = <span class="number">100</span> - i;<span class="comment">//存储数据</span></span><br><span class="line">data.next = <span class="literal">NULL</span>;<span class="comment">//让next指针指向空</span></span><br><span class="line">llist_insert(handler, &amp;data, TAILINSERT);</span><br><span class="line"><span class="comment">//插入数据结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_display(handler);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(handler, &quot;stu9&quot;);//查找结点</span></span><br><span class="line"><span class="comment">if(find == NULL)//判断是否没有找到结点</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!%d%s%d\n&quot;, find-&gt;id, find-&gt;name, find-&gt;math);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(handler, <span class="string">&quot;stu9&quot;</span>);<span class="comment">//删除结点</span></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)<span class="comment">//判断是否删除失败</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(handler,<span class="string">&quot;stu9&quot;</span>,&amp;save);<span class="comment">//取出数据</span></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!%d%s%d\n&quot;</span>,save.id, save.name, save.math);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(handler);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line">llist_destroy(handler);<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_03day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_03day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_03day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-3<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><pre><code>一.不用写调用,只写声明和实现    实现有头单向不循环链表的    遍历和销毁任务(最基本的要求)    1.大家可以在纸上写出简单的(有头双向循环链表)增删改查    2.大家可以在电脑上写出通用性强的链表    3.大家可以使用内核链表(会用)自己重新写一遍有头单向循环链表的功能    1.创建头结点llist_create();    2.插入数据结点llist_insert();        (头插法尾插法)    3.遍历链表llist_display();    4.销毁链表llist_destroy();    -----------------------------------    5.查找结点llist_find();    6.删除结点llist_delete();    7.拿出结点llist_fetch();==============================作业1.把今天讲过的内容完完整整的复习一遍2.重新写一遍有头单向循环链表的各种功能3.写一个无头单向不循环的链表4.完成joseph杀人游戏==============================================================================================================</code></pre><h1 id="无头单向不循环的链表"><a href="#无头单向不循环的链表" class="headerlink" title="无头单向不循环的链表"></a>无头单向不循环的链表</h1><pre><code>/*    实现 无头单向不循环的链表        无头 : 代表没有头结点        在无头的链表中所有的结点都是数据结点    1.插入数据结点llist_insert();        由于没有头结点所以直接把新的数据结点插入到链表最后    2.遍历链表llist_display();    3.销毁链表llist_destroy();    ------------------------------------    4.查找结点llist_find();    5.删除结点llist_delete();    6.拿出结点llist_fetch();*/</code></pre><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *l = <span class="literal">NULL</span>;<span class="comment">//l指针指向无头链表的第一个结点</span></span><br><span class="line">LLIST *find = <span class="literal">NULL</span>;<span class="comment">//指向找到的结点</span></span><br><span class="line">LLIST save;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//保存函数的返回值</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//客户用来录入结点个数的</span></span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu9&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please Insert Node Number : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">l = llist_insert(num);<span class="comment">//创建无头链表</span></span><br><span class="line"><span class="keyword">if</span>(l == <span class="literal">NULL</span>)<span class="comment">//判断是否创建失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//从创建失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line">llist_display(l);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(l, find_name);</span></span><br><span class="line"><span class="comment">if(find == NULL)</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!%d%s%d\n&quot;,find-&gt;id, find-&gt;name, find-&gt;math);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(&amp;l, find_name);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(&amp;l, &amp;find_id, &amp;save);</span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!%d%s%d\n&quot;</span>, save.id, save.name,save.math);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(l);</span><br><span class="line"></span><br><span class="line">llist_destroy(l);<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h"><a href="#llist-h" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_insert</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//插入数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//查找结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST **, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST **, <span class="type">const</span> <span class="type">void</span> *, <span class="type">void</span> *)</span>;<span class="comment">//拿出结点</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c"><a href="#llist-c" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_insert</span><span class="params">(<span class="type">int</span> num)</span><span class="comment">//插入数据结点</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *l = <span class="literal">NULL</span>;<span class="comment">//指向无头链表的第一个结点</span></span><br><span class="line">LLIST *p = <span class="literal">NULL</span>;<span class="comment">//辅助l指针</span></span><br><span class="line">LLIST *newnode = <span class="literal">NULL</span>;<span class="comment">//指向新的结点</span></span><br><span class="line">LLIST data;<span class="comment">//用来存储数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"></span><br><span class="line">l = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//为第一个结点开辟空间</span></span><br><span class="line"><span class="keyword">if</span>(l == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">data.id = <span class="number">100</span> + i;</span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line">data.math = <span class="number">100</span> - i;</span><br><span class="line">data.next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(l, &amp;data, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line">p = l;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; num; i++)</span><br><span class="line">&#123;</span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">data.id = <span class="number">100</span> + i;</span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);</span><br><span class="line">data.math = <span class="number">100</span> - i;</span><br><span class="line">data.next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(newnode, &amp;data, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line">p-&gt;next = newnode;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> l;<span class="comment">//把第一个结点的地址返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *l)</span><span class="comment">//遍历链表</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur = l; cur != <span class="literal">NULL</span>; cur = cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d\n&quot;</span>,cur-&gt;id,cur-&gt;name,cur-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *l)</span><span class="comment">//销毁链表</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = l;</span><br><span class="line">LLIST *cur = l-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = back-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(back);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *l, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(cur = l; cur != <span class="literal">NULL</span>; cur = cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;id==*(<span class="type">int</span>*)find_data || </span><br><span class="line">!(<span class="built_in">strcmp</span>(cur-&gt;name, find_data)))</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST **l, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = *l;<span class="comment">//指向第一个结点</span></span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向要删除的结点</span></span><br><span class="line"></span><br><span class="line">cur = llist_find(*l, find_data);<span class="comment">//查找要删除的结点</span></span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)<span class="comment">//判断是否没有找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//没有找到,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur == *l)<span class="comment">//判断要删除的结点是否是第一个结点</span></span><br><span class="line">(*l) = (*l)-&gt;next;<span class="comment">//把指向改变为下一个结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != cur)</span><br><span class="line">back = back-&gt;next;</span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST **l, <span class="type">const</span> <span class="type">void</span> *find_data, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = *l;<span class="comment">//指向第一个结点</span></span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向要删除的结点</span></span><br><span class="line"></span><br><span class="line">cur = llist_find(*l, find_data);<span class="comment">//查找要删除的结点</span></span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)<span class="comment">//判断是否没有找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//没有找到,结束函数,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur == *l)<span class="comment">//判断要删除的结点是否是第一个结点</span></span><br><span class="line">(*l) = (*l)-&gt;next;<span class="comment">//把指向改变为下一个结点</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != cur)</span><br><span class="line">back = back-&gt;next;</span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(LLIST));</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure>================================================================================</code></pre><h1 id="需要实现有头单向循环链表"><a href="#需要实现有头单向循环链表" class="headerlink" title="需要实现有头单向循环链表"></a>需要实现有头单向循环链表</h1><pre><code>/*    需要实现有头单向循环链表    1.创建头结点llist_create();    2.插入数据结点llist_insert();        头插法尾插法    3.遍历链表llist_display();    4.销毁链表llist_destroy();    ===================================    5.查找结点llist_find();    6.删除结点llist_delete();    7.拿出数据llist_fetch();*/</code></pre><h2 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line">LLIST *find = <span class="literal">NULL</span>;<span class="comment">//指向找到的结点</span></span><br><span class="line">LLIST data;<span class="comment">//用来存储用户的数据</span></span><br><span class="line">LLIST save;<span class="comment">//保存拿出的数据</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;<span class="comment">//用于接收返回值</span></span><br><span class="line"><span class="type">int</span> find_id = <span class="number">100</span>;<span class="comment">//要查找的ID号</span></span><br><span class="line"><span class="type">char</span> *find_name = <span class="string">&quot;stu4&quot;</span>;<span class="comment">//要查找的姓名</span></span><br><span class="line"></span><br><span class="line">handler = llist_create();<span class="comment">//创建头结点</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断是否创建头结点失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//头结点创建失败,结束程序,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">data.id = <span class="number">100</span> + i;<span class="comment">//赋值数据</span></span><br><span class="line"><span class="built_in">sprintf</span>(data.name, <span class="string">&quot;stu%d&quot;</span>, i);<span class="comment">//赋值数据</span></span><br><span class="line">data.math = <span class="number">100</span> - i;<span class="comment">//赋值数据</span></span><br><span class="line">data.next = <span class="literal">NULL</span>;<span class="comment">//指针指向NULL</span></span><br><span class="line">llist_insert(handler,&amp;data,TAILINSERT);<span class="comment">//插入数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llist_display(handler);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=========================\n&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">find = llist_find(handler, &quot;stu9&quot;);//查找结点</span></span><br><span class="line"><span class="comment">if(find == NULL)//判断是否没有找到结点</span></span><br><span class="line"><span class="comment">printf(&quot;Not Find It!\n&quot;);</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">printf(&quot;Find It!%d%s%d\n&quot;, find-&gt;id, find-&gt;name, find-&gt;math);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">ret = llist_delete(handler, <span class="string">&quot;stu9&quot;</span>);<span class="comment">//删除结点</span></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)<span class="comment">//判断是否删除失败</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Delete It!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">ret = llist_fetch(handler,find_name, &amp;save);<span class="comment">//拿出数据</span></span><br><span class="line"><span class="keyword">if</span>(ret != <span class="number">0</span>)<span class="comment">//判断是否拿出失败</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It Is Failed!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Fetch It!%d%s%d\n&quot;</span>,save.id, save.name, save.math);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=========================\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">llist_display(handler);<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line">llist_destroy(handler);<span class="comment">//释放链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-h-1"><a href="#llist-h-1" class="headerlink" title="llist.h"></a>llist.h</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LLIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEADINSERT 0<span class="comment">//头插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TAILINSERT 1<span class="comment">//尾插法</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAMESIZE 20<span class="comment">//名字成员个数</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span>//定义了每个结点的结构体类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[NAMESIZE];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">llist_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LLIST;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span>;<span class="comment">//创建头结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">int</span> )</span>;<span class="comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *)</span>;<span class="comment">//遍历链表</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *)</span>;<span class="comment">//销毁链表</span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//查找结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *)</span>;<span class="comment">//删除结点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *, <span class="type">const</span> <span class="type">void</span> *, <span class="type">void</span> *)</span>;<span class="comment">//拿出数据</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></code></pre><h2 id="llist-c-1"><a href="#llist-c-1" class="headerlink" title="llist.c"></a>llist.c</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *handler = <span class="literal">NULL</span>;<span class="comment">//指向头结点的指针</span></span><br><span class="line"></span><br><span class="line">handler = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//开辟头结点的空间</span></span><br><span class="line"><span class="keyword">if</span>(handler == <span class="literal">NULL</span>)<span class="comment">//判断是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//开辟失败,结束函数,并且返回NULL</span></span><br><span class="line">handler-&gt;next = handler;<span class="comment">//头结点的next指针指向自己</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> handler;<span class="comment">//把头结点的地址返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_insert</span><span class="params">(LLIST *handler,<span class="type">const</span> <span class="type">void</span> *data,<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *p = handler;<span class="comment">//通过指针p代替handler做操作</span></span><br><span class="line">LLIST *newnode = <span class="literal">NULL</span>;<span class="comment">//指向新创建的结点</span></span><br><span class="line"></span><br><span class="line">newnode = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LLIST));<span class="comment">//开辟数据结点的空间</span></span><br><span class="line"><span class="keyword">if</span>(newnode == <span class="literal">NULL</span>)<span class="comment">//判断数据结点的空间是否开辟失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//数据结点的空间开辟失败,函数结束,返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(newnode, data, <span class="keyword">sizeof</span>(LLIST));<span class="comment">//拷贝数据</span></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> HEADINSERT : <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TAILINSERT : <span class="keyword">while</span>(p-&gt;next != handler)</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="built_in">free</span>(newnode); <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">  <span class="comment">//释放空间,结束函数,并且返回-2</span></span><br><span class="line">&#125;</span><br><span class="line">newnode-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = newnode;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_display</span><span class="params">(LLIST *handler)</span><span class="comment">//遍历链表</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向每一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next; cur!=handler; cur=cur-&gt;next)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%d\n&quot;</span>,cur-&gt;id,cur-&gt;name,cur-&gt;math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">llist_destroy</span><span class="params">(LLIST *handler)</span><span class="comment">//销毁链表</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = handler;<span class="comment">//指向头结点的指针</span></span><br><span class="line">LLIST *cur = handler-&gt;next;<span class="comment">//指向数据结点的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != handler)</span><br><span class="line">&#123;</span><br><span class="line">back-&gt;next = cur-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">cur = back-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LLIST *<span class="title function_">llist_find</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向每一个数据结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(cur=handler-&gt;next;cur!=handler;cur=cur-&gt;next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur-&gt;id==*(<span class="type">int</span>*)find_data || </span><br><span class="line">!(<span class="built_in">strcmp</span>(cur-&gt;name, find_data)))</span><br><span class="line"><span class="keyword">return</span> cur;<span class="comment">//找到了结点,并且返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;<span class="comment">//没有找到结点,返回NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_delete</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = handler;<span class="comment">//指向头结点的指针</span></span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向要删除的结点的指针</span></span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);<span class="comment">//查找删除的结点</span></span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)<span class="comment">//判断是否没有找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//删除失败,函数结束,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != cur)<span class="comment">//查找要删除结点的前一个位置</span></span><br><span class="line">back = back-&gt;next;</span><br><span class="line"></span><br><span class="line">back-&gt;next = cur-&gt;next;<span class="comment">//把删除的结点从链表中摘除</span></span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放要删除的结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">llist_fetch</span><span class="params">(LLIST *handler, <span class="type">const</span> <span class="type">void</span> *find_data, <span class="type">void</span> *save)</span></span><br><span class="line">&#123;</span><br><span class="line">LLIST *back = handler;<span class="comment">//指向头结点的指针</span></span><br><span class="line">LLIST *cur = <span class="literal">NULL</span>;<span class="comment">//指向要删除的结点的指针</span></span><br><span class="line"></span><br><span class="line">cur = llist_find(handler, find_data);<span class="comment">//查找删除的结点</span></span><br><span class="line"><span class="keyword">if</span>(cur == <span class="literal">NULL</span>)<span class="comment">//判断是否没有找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//删除失败,函数结束,并且返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(back-&gt;next != cur)<span class="comment">//查找要删除结点的前一个位置</span></span><br><span class="line">back = back-&gt;next;</span><br><span class="line"></span><br><span class="line">back-&gt;next = cur-&gt;next;<span class="comment">//把删除的结点从链表中摘除</span></span><br><span class="line"><span class="built_in">memcpy</span>(save, cur, <span class="keyword">sizeof</span>(LLIST));<span class="comment">//把数据拿出</span></span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放要删除的结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="makefile-1"><a href="#makefile-1" class="headerlink" title="makefile"></a>makefile</h2><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">llist : main.o llist.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o llist</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04ds_01day</title>
      <link href="/2023/02/16/embsky/04ds/04ds_01day/"/>
      <url>/2023/02/16/embsky/04ds/04ds_01day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-1<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    复合型数据类型        结构体        1.先定义结构体类型            struct tag            &#123;                //结构体成语的定义            &#125;;        2.再使用结构体类型定义结构体类型的变量\指针\数组            数据类型变量名;            struct tags;            struct tag *p;            struct tagarr[成员个数];        3.结构体类型的变量访问结构体的成员            变量名 + . + 成员名        结构体类型的指针访问结构体的成员            指针名 + -&gt; + 成员名        4.通过sizeof运算符结算结构体大小            结构体的大小相当于成员大小的和 + 字节对齐        共用体            共用体中的成员会共用同一块儿存储空间            (使用一块儿存储空间管理不同类型的数据)            1.先定义共用体类型            union tag            &#123;                共用体成员的定义;            &#125;;            2.大端格式和小端格式            大端格式            高字节的数据存放在低地址上            低字节的数据存放在高地址上            小端格式            高字节的数据存放在高地址上            低字节的数据存放在低地址上            3.位域(位段/位字段)            是编程语言(C语言)提供的操作位的方法            -----------------------------------            位带(bitband)共用体(联合)union是C语言中的关键字1.共用体的含义    共用体的成员共用同一块儿存储空间    (使用一块儿存储空间管理不同的数据类型)2.共用体的定义    union tag//tag是标签    &#123;        共用体成员的定义;    &#125;;//最后需要加 ; 结尾3.和结构体不同的地方    1&gt;结构体中每个成员都会占用独立的存储空间    共用体中每个成员都会占用相同的存储空间    2&gt;结构体的大小是每个成员大小的和的基础上加入字节对齐    共用体的大小以共用体成员中最大的成员大小为准4.大端格式和小端格式    在硬件的平台中是分为大端格式和小端格式的    X86/英特尔架构小端格式    高字节的数据存放在高地址上,低字节的数据存放在低地址上    (高对高,低对低)    例子 : 在小端格式上存储一个十六进制的数据0x12345678    地址数据    0x10000x78    0x10010x56    0x10020x34    0x10030x12    ARM架构-&gt;ARM系列大端格式(现在既支持大端也支持小端)    高字节的数据存放在低地址上,低字节的数据存放在高地址上    (高对低,低对高)    例子 : 在大端格式上存储一个十六进制的数据0x12345678    地址数据    0x10000x12    0x10010x34    0x10020x56    0x10030x78可以使用共用体测试当前的机器是大端格式还是小端格式=========================笔试题1.什么是大端格式?什么是小端格式?2.设计一个程序测试当前的机器是大端格式还是小端格式=========================</code></pre><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><pre><code>预处理    条件编译#ifndef__ADD_H#define __ADD_H除了在.h文件中加入,防止头文件被重复包含以外在.c文件中也可以使用<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你好,中国!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ADD</span></span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">sum = a - b;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STM32F103CBT6</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> PIN = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F103RBT6)</span></span><br><span class="line">PIN = <span class="number">64</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined (STM32F103CBT6)</span></span><br><span class="line">PIN = <span class="number">32</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PIN = %d\n&quot;</span>, PIN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG 2</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> FLAG==0</span></span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> FLAG==1</span></span><br><span class="line">sum = a - b;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> FLAG==2</span></span><br><span class="line">sum = a * b;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> FLAG==3</span></span><br><span class="line">sum = a / b;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">sum = a % b;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PAI = %f\n&quot;</span>, PAI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARRSIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[ARRSIZE];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ARRSIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    面试题    1.定义一个宏,计算一年(平年)有多少秒        2.定义一个宏,比较两个值的最大值    3.定义一个宏,完成两个变量值的交换    注意 : 在写宏函数的时候一定要加小括号,代表是一个整体<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEC_OF_YEAR (365*24*60*60)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SEC_OF_YEAR = %d\n&quot;</span>, SEC_OF_YEAR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MUL(A,B) (A)*(B)</span></span><br><span class="line"><span class="comment">//MUL(A,B)A*B</span></span><br><span class="line"><span class="comment">//MUL(2+3,3+4)2+3*3+4 = 15</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MUL = %d\n&quot;</span>, MUL(<span class="number">2</span>+<span class="number">3</span>, <span class="number">3</span>+<span class="number">4</span>));<span class="comment">//a+b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mul = %d\n&quot;</span>, mul(<span class="number">2</span>+<span class="number">3</span>, <span class="number">3</span>+<span class="number">4</span>));<span class="comment">//a+b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(A,B) A&gt;B?A:B</span></span><br><span class="line"><span class="comment">//a++ &gt; b++ ? a++ : b ++</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MAX = %d\n&quot;</span>, MAX(a++, b++));</span><br><span class="line">a = <span class="number">13</span>;</span><br><span class="line">b = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max(a++, b++));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define SWAP(A,B) &#123;typeof(A)tmp; tmp=A; A=B; B=tmp;&#125;</span></span><br><span class="line"><span class="comment">//#define SWAP(A,B) &#123;(A)=(A)+(B);(B)=(A)-(B);(A)=(A)-(B);&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(A,B) &#123;(A)^=(B);(B)^=(A);(A)^=(B);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line">SWAP(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__DATE__ = %s\n&quot;</span>, __DATE__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__TIME__ = %s\n&quot;</span>, __TIME__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__FILE__ = %s\n&quot;</span>, __FILE__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__LINE__ = %d\n&quot;</span>, __LINE__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__FUNCTION__ = %s\n&quot;</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>, c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((a + b &gt; c) &amp;&amp; \</span><br><span class="line">(a + c &gt; b) &amp;&amp; \</span><br><span class="line">(b + c &gt; a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_STR(n) #n</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PRINT_STR = %s\n&quot;</span>, PRINT_STR(<span class="number">12</span>+<span class="number">34</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_VAR(n) var##n</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> var1 = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> var2 = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> var3 = <span class="number">300</span>;</span><br><span class="line"><span class="type">int</span> var4 = <span class="number">400</span>;</span><br><span class="line"><span class="type">int</span> var5 = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VAR = %d\n&quot;</span>, INT_VAR(<span class="number">2</span>));<span class="comment">//var2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VAR = %d\n&quot;</span>, INT_VAR(<span class="number">5</span>));<span class="comment">//var5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>枚举enum是C语言的关键字枚举就是一个被命名的整型常数的集合enum 枚举名&#123;    标识符[=整型常数],    标识符,    ...    标识符&#125;;//枚举定义之后需要加 ; 结尾注意:1.在定义枚举时.标识符与标识符之间要用 , 隔开而不是 ; 2.在枚举中标识符可以和变量同名,如果同名变量会屏蔽标识符    (尽量不要同名)3.在定义枚举时,方括号的内容时缺省值,可以有也可以没有    如果没有缺省值,标识符会按照0 1 2 3 4...的顺序进行表示    如果有缺省值,则会从指定的整型常数开始按顺序进行表示<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">9527</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b = <span class="number">100</span>,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int a = 9527;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b = <span class="number">100</span>,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int a = 9527;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span>&#123;</span>MODE_0, MODE_1, MODE_2, MODE_3&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> MODE_0 : <span class="built_in">printf</span>(<span class="string">&quot;菜鸟难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODE_1 : <span class="built_in">printf</span>(<span class="string">&quot;普通难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODE_2 : <span class="built_in">printf</span>(<span class="string">&quot;地狱难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODE_3 : <span class="built_in">printf</span>(<span class="string">&quot;中国男足难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA0 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA1 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA2 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA3 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA4 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA5 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA6 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA7 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA8 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA9 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA10: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA11: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA12: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA13: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA14: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA15: <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">mode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">INPUT,</span><br><span class="line">OUTPUT,</span><br><span class="line">AF,</span><br><span class="line">AN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO</span> <span class="title">P</span>;</span></span><br><span class="line"></span><br><span class="line">P.PA0 = OUTPUT;</span><br><span class="line"></span><br><span class="line">P.PA10 = AF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 04ds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_C截图</title>
      <link href="/2023/02/16/embsky/03c/03c_C%E6%88%AA%E5%9B%BE/"/>
      <url>/2023/02/16/embsky/03c/03c_C%E6%88%AA%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1数据类型<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"><br>2ASCII_1<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/2ASCII_1.png"><br>2ASCII_2<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/2ASCII_2.png"><br>2ASCII_3<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/2ASCII_3.png"><br>3转义字符<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/3%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.bmp"><br>4运算符<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/4%E8%BF%90%E7%AE%97%E7%AC%A6.png"><br>5存储类型比较<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/5%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83.png"><br>6标准输出格式字符<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/6%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6.bmp"><br>7标准输出修饰符<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/7%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E4%BF%AE%E9%A5%B0%E7%AC%A6.bmp"><br>8一维数组元素表示<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/8%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E8%A1%A8%E7%A4%BA.bmp"><br>9二维数组元素表示<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/9%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E8%A1%A8%E7%A4%BA.bmp"><br>10区分定义<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/10%E5%8C%BA%E5%88%86%E5%AE%9A%E4%B9%89.bmp"><br>11函数的实现<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/11%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0.gif"><br>12运算符优先级<br><img src="/images/03c/C%E6%88%AA%E5%9B%BE/12%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_point_and_func</title>
      <link href="/2023/02/16/embsky/03c/03c_point_and_func/"/>
      <url>/2023/02/16/embsky/03c/03c_point_and_func/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-1<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="1-指针"><a href="#1-指针" class="headerlink" title="1.指针"></a>1.指针</h1><h2 id="使用指针的用处"><a href="#使用指针的用处" class="headerlink" title="使用指针的用处"></a>使用指针的用处</h2><pre><code>        程序员通过指针,可以简化一些 C 语言编程任务的执行,还有一些任务,如动态内存分配        大家都知道每一个变量都在内存中占用相应的存储空间,动态内存分配的函数malloc calloc realloc free编程人员来讲1.谁打开,谁关闭文件IO2.谁开辟,谁释放动态内存3.谁创建,谁销毁链表4.谁加锁,谁解锁线程        每一个内存位置都可以使用连字号（&amp;）运算符访问的地址,它表示了在内存中的一个地址    什么是指针        其实指针从某种意义上来讲是一个变量,其值为另一个变量的地址,即内存位置的直接地址.        就像普通的变量一样,必须在使用指针之前,对其进行定义.        指针的定义一般形式为:type *pointer-name;        无论何种类型的指针在内存中都占用8个字节空间(相对于64bit操作系统而言)        不同数据类型的指针之间的相同点是都是用来存储地址的.        不同数据类型的指针之间唯一的不同是,指针所指向的变量的数据类型不同.</code></pre><h2 id="如何使用指针？"><a href="#如何使用指针？" class="headerlink" title="如何使用指针？"></a>如何使用指针？</h2><pre><code>        使用指针时会频繁进行以下几个操作:int a;        定义一个指针变量int *p;        把变量地址赋值给指针p = &amp;a;        访问指针变量中可用地址的值printf(“p = %p\n”, p);        这些操作是需要通过使用运算符 * 来访问的</code></pre><h3 id="指向NULL的指针-空指针-int-p-x3D-NULL-x2F-x2F-NULL-ASCII-0-0x0"><a href="#指向NULL的指针-空指针-int-p-x3D-NULL-x2F-x2F-NULL-ASCII-0-0x0" class="headerlink" title="指向NULL的指针(空指针)int *p &#x3D; NULL;&#x2F;&#x2F;NULL ASCII 0 0x0"></a>指向NULL的指针(空指针)int *p &#x3D; NULL;&#x2F;&#x2F;NULL ASCII 0 0x0</h3><pre><code>        在指针初始化的时候,如果没有确切的地址可以赋值,为指针赋一个 NULL 值        是一个良好的编程习惯.赋为 NULL 值的指针被称为空指针.        在写C语言程序时不允许访问地址为 NULL 的内存,因为该内存是操作系统保留的        然而,内存地址 NULL 有特别重要的意义,它表明该指针不指向一个可操作的内存位置.int a;int *p = NULL;p = &amp;a;*p = 100;程序编译时不会报错报警告,但是程序执行时会报段错误(编译器不检查段错误)if(p == NULL)printf(“p是一个空指针!\n”);</code></pre><h3 id="野指针-没有对象"><a href="#野指针-没有对象" class="headerlink" title="野指针(没有对象)"></a>野指针(没有对象)</h3><pre><code>        野指针指向一个已删除的对象或申请访问受限内存区域的指针.        与空指针不同,野指针无法通过简单地判断是否为 NULL 避免,        而只能通过养成良好的编程习惯来尽力减少.        对野指针进行操作很容易造成程序错误.        程序编译时不会报错报警告,程序执行时也不会报段错误        int *p = NULL;        p = malloc(sizeof(int));        使用        free(p);        p = NULL;//可以先把野指针变成空指针,然后可以避免程序执行时不会报错</code></pre><h3 id="万能指针"><a href="#万能指针" class="headerlink" title="万能指针"></a>万能指针</h3><pre><code>    可以保存任意类型的地址</code></pre><h1 id="2-函数"><a href="#2-函数" class="headerlink" title="2.函数"></a>2.函数</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><pre><code>        函数是一组一起执行一个任务的语句.每个 C 程序都至少有一个函数,        即主函数 main() 所有简单的程序都可以定义其他额外的函数.        程序员可以把代码划分到不同的函数中.        如何划分代码到不同的函数中是程序员自己来决定的,但在逻辑上,        划分通常是根据每个函数执行一个特定的任务来进行的.        函数声明告诉编译器函数的名称\返回类型和参数.函数定义提供了函数的实际主体。    </code></pre><h2 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h2><pre><code>        函数声明会告诉编译器函数名称及如何调用函数.        函数声明包括以下几个部分:        return_typefunction_name(parameter list);//形式参数 形参        intmax(int a, int b);intadd(int a, int b);Voidswap(int *a, int *b);        在函数声明中,参数的名称并不重要,只有参数的类型是必需的        int max(int, int);</code></pre><h2 id="函数的实现"><a href="#函数的实现" class="headerlink" title="函数的实现"></a>函数的实现</h2><pre><code>        return_typefunction_name(parameter list)//形式参数 形参        &#123;   body of the function        &#125;intmax(int a, int b)&#123;return a &gt; b ? a : b;&#125;intadd(int a, int b)&#123;return a + b;&#125;voidswap(int *a, int * b)&#123;int c;c = *a;*a = *b;*b = c;&#125;</code></pre><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><pre><code>        当实现函数的功能时,会写出函数要做什么,然后通过调用函数来执行已写好的功能.        当程序调用函数时,程序控制权会转移给被调用的函数.        被调用的函数执行函数主体的内容,当函数的返回语句被执行时,        或到达函数的结束括号时,会把程序控制权交还给主程序.        调用函数时,传递所需参数,如果函数返回一个值,则可以在调用时用变量来存储返回值.        function_name(parameter list);//实际参数 实参max(13, 7);add(13, 7);swap(&amp;a, &amp;b);    在 C 语言中,函数由一个函数头和一个函数主体组成.下面列出一个函数的所有组成部分:        返回类型 : 一个函数可以返回一个值.return_type 是函数返回的值的数据类型.            有些函数执行所需的操作而不返回值,在这种情况下,return_type 是关键字 void.                函数名称 : 这是函数的实际名称.也是函数的入口            参数 : 参数就像是占位符.当函数被调用时,程序员需要向参数传递一个值,            这个值被称为实际参数.参数列表包括函数参数的类型\顺序\数量.            参数是可选的,也就是说,有些功能函数可能不需要参数.            函数主体 : 函数主体包含一组定义函数执行任务的语句.        函数参数        如果函数要使用参数,则必须在函数声明时定义参数变量,这些变量称为函数的形式参数.        形式参数就像函数内的其他局部变量,在进入函数时被创建,退出函数时被销毁.        当调用函数时,有两种向函数传递参数的方式:        值传递 : 该方法把参数的实际值复制给函数的形式参数,在这种情况下                修改函数内的形式参数不会影响实际参数。swap(a, b)        地址传递 : 通过指针传递方式,形参为指向实参地址的指针,                当对形参的指向操作时,就相当于对实参本身进行的操作。swap(&amp;a, &amp;b)        如果使用值传递来传递参数,这意味着函数内的代码不能改变用于调用函数的实际参数.    </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_13day</title>
      <link href="/2023/02/16/embsky/03c/03c_13day/"/>
      <url>/2023/02/16/embsky/03c/03c_13day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-8-1<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    复合型数据类型        结构体        1.先定义结构体类型            struct tag            &#123;                //结构体成语的定义            &#125;;        2.再使用结构体类型定义结构体类型的变量\指针\数组            数据类型变量名;            struct tags;            struct tag *p;            struct tagarr[成员个数];        3.结构体类型的变量访问结构体的成员            变量名 + . + 成员名        结构体类型的指针访问结构体的成员            指针名 + -&gt; + 成员名        4.通过sizeof运算符结算结构体大小            结构体的大小相当于成员大小的和 + 字节对齐        共用体            共用体中的成员会共用同一块儿存储空间            (使用一块儿存储空间管理不同类型的数据)            1.先定义共用体类型            union tag            &#123;                共用体成员的定义;            &#125;;            2.大端格式和小端格式            大端格式            高字节的数据存放在低地址上            低字节的数据存放在高地址上            小端格式            高字节的数据存放在高地址上            低字节的数据存放在低地址上            3.位域(位段/位字段)            是编程语言(C语言)提供的操作位的方法            -----------------------------------            位带(bitband)</code></pre><h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><pre><code>    enum是C语言的关键字    枚举就是一个被命名的整型常数的集合enum 枚举名&#123;    标识符[=整型常数],    标识符,    ...    标识符&#125;;//枚举定义之后需要加 ; 结尾注意:1.在定义枚举时.标识符与标识符之间要用 , 隔开而不是 ; 2.在枚举中标识符可以和变量同名,如果同名变量会屏蔽标识符    (尽量不要同名)3.在定义枚举时,方括号的内容时缺省值,可以有也可以没有    如果没有缺省值,标识符会按照0 1 2 3 4...的顺序进行表示    如果有缺省值,则会从指定的整型常数开始按顺序进行表示*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">9527</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b = <span class="number">100</span>,</span><br><span class="line">c,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int a = 9527;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;枚举的标识符不是变量,不能做赋值运算</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span>&#123;</span>MIN, MAX = <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = MIN; i &lt; MAX; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">E</span>&#123;</span>MODE_0, MODE_1, MODE_2, MODE_3&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> mode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;mode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> MODE_0 : <span class="built_in">printf</span>(<span class="string">&quot;菜鸟难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODE_1 : <span class="built_in">printf</span>(<span class="string">&quot;普通难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODE_2 : <span class="built_in">printf</span>(<span class="string">&quot;地狱难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> MODE_3 : <span class="built_in">printf</span>(<span class="string">&quot;中国男足难度!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA0 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA1 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA2 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA3 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA4 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA5 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA6 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA7 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA8 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA9 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA10: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA11: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA12: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA13: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA14: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA15: <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">mode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">INPUT,</span><br><span class="line">OUTPUT,</span><br><span class="line">AF,</span><br><span class="line">AN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO</span> <span class="title">P</span>;</span></span><br><span class="line"></span><br><span class="line">P.PA0 = OUTPUT;</span><br><span class="line"></span><br><span class="line">P.PA10 = AF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    预处理        条件编译    #ifndef__ADD_H    #define __ADD_H    除了在.h文件中加入,防止头文件被重复包含以外    在.c文件中也可以使用<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;你好,中国!\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> ADD</span></span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">sum = a - b;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STM32F103CBT6</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> PIN = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined (STM32F103RBT6)</span></span><br><span class="line">PIN = <span class="number">64</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined (STM32F103CBT6)</span></span><br><span class="line">PIN = <span class="number">32</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PIN = %d\n&quot;</span>, PIN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG 2</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> FLAG==0</span></span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> FLAG==1</span></span><br><span class="line">sum = a - b;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> FLAG==2</span></span><br><span class="line">sum = a * b;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> FLAG==3</span></span><br><span class="line">sum = a / b;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">sum = a % b;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PAI = %f\n&quot;</span>, PAI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARRSIZE 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[ARRSIZE];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; ARRSIZE; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    面试题    定义一个宏,计算一年(平年)有多少秒        定义一个宏,比较两个值的最大值    3.定义一个宏,完成两个变量值的交换    注意 : 在写宏函数的时候一定要加小括号,代表是一个整体<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEC_OF_YEAR (365*24*60*60)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SEC_OF_YEAR = %d\n&quot;</span>, SEC_OF_YEAR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MUL(A,B) (A)*(B)</span></span><br><span class="line"><span class="comment">//MUL(A,B)A*B</span></span><br><span class="line"><span class="comment">//MUL(2+3,3+4)2+3*3+4 = 15</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MUL = %d\n&quot;</span>, MUL(<span class="number">2</span>+<span class="number">3</span>, <span class="number">3</span>+<span class="number">4</span>));<span class="comment">//a+b</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mul = %d\n&quot;</span>, mul(<span class="number">2</span>+<span class="number">3</span>, <span class="number">3</span>+<span class="number">4</span>));<span class="comment">//a+b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(A,B) A&gt;B?A:B</span></span><br><span class="line"><span class="comment">//a++ &gt; b++ ? a++ : b ++</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;MAX = %d\n&quot;</span>, MAX(a++, b++));</span><br><span class="line">a = <span class="number">13</span>;</span><br><span class="line">b = <span class="number">7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max(a++, b++));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define SWAP(A,B) &#123;typeof(A)tmp; tmp=A; A=B; B=tmp;&#125;</span></span><br><span class="line"><span class="comment">//#define SWAP(A,B) &#123;(A)=(A)+(B);(B)=(A)-(B);(A)=(A)-(B);&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(A,B) &#123;(A)^=(B);(B)^=(A);(A)^=(B);&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line">SWAP(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__DATE__ = %s\n&quot;</span>, __DATE__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__TIME__ = %s\n&quot;</span>, __TIME__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__FILE__ = %s\n&quot;</span>, __FILE__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__LINE__ = %d\n&quot;</span>, __LINE__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;__FUNCTION__ = %s\n&quot;</span>, __FUNCTION__);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>, c = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((a + b &gt; c) &amp;&amp; \</span><br><span class="line">(a + c &gt; b) &amp;&amp; \</span><br><span class="line">(b + c &gt; a))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_STR(n) #n</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;PRINT_STR = %s\n&quot;</span>, PRINT_STR(<span class="number">12</span>+<span class="number">34</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_VAR(n) var##n</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> var1 = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> var2 = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> var3 = <span class="number">300</span>;</span><br><span class="line"><span class="type">int</span> var4 = <span class="number">400</span>;</span><br><span class="line"><span class="type">int</span> var5 = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VAR = %d\n&quot;</span>, INT_VAR(<span class="number">2</span>));<span class="comment">//var2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;VAR = %d\n&quot;</span>, INT_VAR(<span class="number">5</span>));<span class="comment">//var5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_c_note</title>
      <link href="/2023/02/16/embsky/03c/03c_c_note/"/>
      <url>/2023/02/16/embsky/03c/03c_c_note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="2022-7-15"><a href="#2022-7-15" class="headerlink" title="2022-7-15"></a>2022-7-15</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h2 id="一-编辑器"><a href="#一-编辑器" class="headerlink" title="一.编辑器"></a>一.编辑器</h2><pre><code>    vi    gedit    emacs    ...    我们主要使用vim</code></pre><h2 id="二-编译器"><a href="#二-编译器" class="headerlink" title="二.编译器"></a>二.编译器</h2><pre><code>    gcc -&gt; cc虽然我们称gcc是C语言的编译器,但使用gcc编译C语言源代码文件不仅仅是编译的过程,而是要经历四个相互关联的步骤∶预处理(也称预编译)-&gt;编译-&gt;汇编-&gt;链接.        1.从一个.c文件编译成可执行文件需要经历4个阶段            预处理器            编译器            汇编器            链接器        2.预处理时需要哪些操作            文件包含            宏定义            条件编译        gcc        gcc 文件名编译.c程序                gcc hello.c        什么也没有提示证明程序没有问题(语法),编译通过                        并不代表程序执行完全正确        报出警告会生成可执行文件,有可能执行成功        报出错误100%程序有问题,不会生成可执行文件        gcc -Wall 1.c            W警告            all所有        gcc -o hello hello.c            指定编译之后生成的可执行文件的名字        编译生成 二进制可执行文件a.out        执行./a.out</code></pre><h2 id="三-代码实例"><a href="#三-代码实例" class="headerlink" title="三.代码实例"></a>三.代码实例</h2><pre><code>    #include &lt;stdio.h&gt;        /*            #include文件包含            在C语言中以#开头是预处理的内容            预处理阶段包括文件包含宏定义条件编译            stdio.h头文件(.h结尾)标准的输入输出            &lt;...&gt;默认从/usr/include找头文件            &quot;...&quot;默认从本地目录中找头文件        */    int main(void)//void空    &#123;        printf(&quot;hello world!&quot;);        /*            printf是一个功能函数(打印输出的函数终端中)            在C语言中双引号引起来的表示为 字符串            在C语言中单引号引起来的表示为 字符            字符串 是由 一个一个字符组成的            默认字符串最后有尾0 &#39;\0&#39;            &quot;hello&quot; = &#39;h&#39; + &#39;e&#39; + &#39;l&#39; + &#39;l&#39; + &#39;o&#39; + &#39;\0&#39;        */        return 0;        /*            return 也属于跳转语句,默认函数中碰到return函数就结束了                return之后的值会返回给调用者                返回值                    1.返回的是结算结果                    2.返回函数执行状态                        0函数正常结束                        正值函数有异常                        负值函数有错误        */    &#125;            main函数(主函数)            当执行程序时是从主函数进入,从上往下逐条逐条执行,程序结束时从主函数退出            1.函数的声明                函数的返回值类型 函数名(参数);//形参            2.函数的实现                函数的返回值类型 函数名(参数)//形参                &#123;                    函数功能;                &#125;            3.函数的调用                函数名(参数);//实参</code></pre><h2 id="四-printf打印之转义字符-见C截图"><a href="#四-printf打印之转义字符-见C截图" class="headerlink" title="四.printf打印之转义字符(见C截图)"></a>四.printf打印之转义字符(见C截图)</h2><pre><code>    注意虽然在写转义字符时是 \ + X,但是是一个字符    转义字符意义ASCII码值（十进制）    \a响铃(BEL)007    \b退格(BS) ，将当前位置移到前一列008    \f换页(FF)，将当前位置移到下页开头012    \n换行(LF) ，将当前位置移到下一行开头010    \r回车(CR) ，将当前位置移到本行开头013    \t水平制表(HT) （跳到下一个TAB位置）009    \v垂直制表(VT)011    \\代表一个反斜线字符&#39;&#39;\&#39;092    \&#39;代表一个单引号（撇号）字符039    \&quot;代表一个双引号字符034    \?代表一个问号063    \0空字符(NULL)000    \ddd1到3位八进制数所代表的任意字符三位八进制    \xhh1到2位十六进制所代表的任意字符二位十六进制</code></pre><h2 id="五-printf打印之标准化输出格式-见C截图"><a href="#五-printf打印之标准化输出格式-见C截图" class="headerlink" title="五.printf打印之标准化输出格式(见C截图)"></a>五.printf打印之标准化输出格式(见C截图)</h2><pre><code>    字符对应数据类型含义    d / iint接受整数值并将它表示为有符号的十进制整数，i是老式写法    ounsigned int无符号8进制整数(不输出前缀0)    uunsigned int无符号10进制整数    x / Xunsigned int无符号16进制整数,x对应的是abcdef,X对应的是ABCDEF（不输出前缀0x)    f(lf)float(double)单精度浮点数用f,双精度浮点数用lf(尤其scanf不能混用)    e / Edouble科学计数法表示的数,此处&quot;e&quot;的大小写代表在输出时用的&quot;e&quot;的大小写    g / Gdouble使用以上两种中最短的形式，大小写的使用同%e和%E    cchar字符型。可以把输入的数字按照ASCII码相应转换为对应的字符    s / Schar *字符串。输出字符串中的字符直至字符串中的空字符                                (字符串以&#39;\0‘结尾，这个&#39;\0&#39;即空字符)    pvoid *以16进制形式输出指针    nint *到此字符之前为止，一共输出的字符个数，不输出文本    %无输入不进行转换，输出字符‘%’（百分号）本身    m无打印errno值对应的出错内容,(例: printf(&quot;%m\n&quot;); )    注：%g、%G在小数点位数四位或指数大于等于精度时用%e、%E，否则用%f。    ---------------------        标准化输出格式        是由 % + * 组成,不是字符        %是占位符号        %.2f输出小数点后两位        %.1f输出小数点后一位        %3d输出的十进制数字最少占用3个字符位置        %03d空出的补0</code></pre><h2 id="六-变量"><a href="#六-变量" class="headerlink" title="六.变量"></a>六.变量</h2><pre><code>    1.变量是用来存储数据(在内存中进行存储)    2.变量的定义        数据类型变量名;        inta;        1&gt;数据类型分类            整型有/无符号short int long            实型有符号float double            字符型有/无符号char        2&gt;测试自己所用机器的类型所占字节数            sizeof()是一个运算符,单位是字节            sizeof(变量名/数据类型)            1字节 = 8位        3&gt;变量名的要求            1)变量名是区分大小写的            2)变量名不能与C语言的关键字重复            3)变量名可以由数字 字母 下划线组成,但是不能以数字开头            4)变量名尽量见名生义        4&gt;在使用变量时需要注意的点            1)先定义再使用            2)便于编译时检查错误,不同类型的变量有不同的运算要求            3)定义变量之后,类型确定了,将来所占用的存储空间就确定了    3.变量的赋值        变量名=数值;        a=1000;        在复制时,赋值运算符需要把右边的项经过计算复制给左边的项(左值)    4.变量的初始化        数据类型变量名=数值;        inta=1000;    char        char存储形式,1字节8位        有符号类型的char可以存储的数的范围是(-128~127)        char c = 13;//0000 1101        XYYY YYYY        第7位为最高位,是符号位        第6~0位为数据位        char c = 127;//1111 1111        char c = -128;//1000 0000        float        float存储形式,4字节32位        第31位符号位0代表正数，1代表负数        第30~23位阶位转化成规格化的二进制之后与127做和        第22~0位尾数        例:        3.2        正的所以最高位符号位为0        3转化成二进制为11        0.2小数部分乘2取整,然后从前往后读            0.2 * 2 = 0.40            0.4 * 2 = 0.80            0.8 * 2 = 1.61            0.6 * 2 = 1.21            0.2 * 2 = 0.40        11.001100110011...        然后将11.001100110011...的小数点向左移至小数点前只有一个1,即左移1位.        阶码就是1+127 = 128  即:1000 0000        尾数:因为小数点前必为1,所以记录小数点后面的数即可 100110011001...       0100 0000 0100 1100 1100 1100 1100 1100</code></pre><h2 id="七-引入scanf概念"><a href="#七-引入scanf概念" class="headerlink" title="七.引入scanf概念"></a>七.引入scanf概念</h2><pre><code>        int a = 0;        int b = 0;        scanf(&quot;%d-%d&quot;, &amp;a, &amp;b);//接收键盘上录入的数值        1.scanf中只写标准化输出格式就可以了,不要写其他的        2.scanf中后面的变量必须要加 &amp;(取地址)        3.scanf中的双引号内不要写 &#39;\n&#39;        printf(&quot;a = %d\nb = %d\n&quot;, a, b);//打印到屏幕上        return 0;==================================作业    1.把今天讲过的内容完完整整的复习一遍        明天会提问,回答不上来的同学,罚在纸上抄写10遍    2.可以找一些编程的问题做一做==================================</code></pre><h2 id="八-运算符"><a href="#八-运算符" class="headerlink" title="八.运算符"></a>八.运算符</h2><pre><code>    1.算术运算符：* - + / %        2.关系运算符： &gt; &lt; == != &gt;= &lt;=    3.逻辑运算符：! &amp;&amp; ||        4.位运算符：&lt;&lt; &gt;&gt; ~ | ^ &amp;(异或相同为0,不同为1)        5.赋值运算符：= += -= *= /= %= &gt;&gt;= &lt;&lt;= &amp;= |= ^=        6.条件运算符：?:    max = (a &gt; b) ? a : b        8.指针运算符：*和&amp;        *取值        &amp;取地址        是可逆的        9.求字节数运算符：sizeof()        sizeof()放变量/数据类型        10.强制类型转换运算符：(类型)        11.分量运算符：. -&gt; (结构体)        结构体        共用体        12.下标运算符：[ ]        int arr[5];//5个成员        arr[0] ~ arr[4]//1.数组名 + 下标        13.自增自减运算符：++ --            6 / 2 * (2 + 1)        14.其他：如函数调用运算符:()        注意：条件运算符是C语言中惟一一个三目(三元)运算符    凡是位运算都需要把操作数变成补码形式    操作数为正数,那么补码是它的本身(原码 = 补码)    操作数为负数,无论 原码转补码 还是 补码转原码,都是除了符号位不变,其他位按位取反再加1               char a = 13;    ~a;               二进制(原码)               0   0   0   0   1   1   0   1               因为是个正数,所以补码 = 原码               补码(取反操作之前)               0   0   0   0   1   1   0   1               ~               1   1   1   1   0   0   1   0               补码(取反操作之后)               1   1   1   1   0   0   1   0               反码               1   1   1   1   0   0   0   1               原码               1   0   0   0   1   1   1   0               char a = -13;   ~a;               原码               1   0   0   0   1   1   0   1               反码               1   1   1   1   0   0   1   0               补码(取反之前)               1   1   1   1   0   0   1   1               ~a               0   0   0   0   1   1   0   0               补码(取反之后)               0   0   0   0   1   1   0   0               原码               0   0   0   0   1   1   0   0=================================作业1.把今天讲过的内容完完整整的复习一遍2.如果复习完之后,可以找一些编程题目做一做=================================</code></pre><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="2022-7-18"><a href="#2022-7-18" class="headerlink" title="2022-7-18"></a>2022-7-18</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>##分支语句<br>###if<br>    int main()<br>    {<br>        语句1;<br>        if(条件)&#x2F;&#x2F; 真假<br>        {<br>            语句2;<br>        }<br>        语句3;<br>    }<br>    语句1–&gt;判断if条件(真)–&gt;语句2–&gt;语句3–&gt;结束<br>                        |<br>                        假–&gt;语句3–&gt;结束</p><h3 id="if…else"><a href="#if…else" class="headerlink" title="if…else"></a>if…else</h3><pre><code>int main(void)&#123;    语句1        if(条件)        &#123;            语句2        &#125;        else        &#123;            语句3        &#125;    语句4&#125;语句1--&gt;条件判断(真)--&gt;语句2--&gt;语句4                 |                 假--&gt;语句3--&gt;语句4</code></pre><h3 id="if…else-if…else-if…"><a href="#if…else-if…else-if…" class="headerlink" title="if…else if…else if…"></a>if…else if…else if…</h3><pre><code>int main(void)&#123;    语句1        if(条件1)        &#123;            语句2        &#125;        else if(条件2)        &#123;            语句3        &#125;        else        &#123;            语句4        &#125;    语句5&#125;语句1--&gt;判断条件1(真)--&gt;语句2--&gt;语句5                  |                  假--&gt;判断条件2(真)--&gt;语句3--&gt;语句5                                 |                                 假--&gt;语句4--&gt;语句5//比较两个值是否相等一定要用 ==//if 里的大括号一定不要丢</code></pre><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><pre><code>语句1switch(变量)&#123;    case 条件1 ://条件是整常量 可以是 数字 或者 字符        语句2            break;    case 条件2 :        语句3            break;    default:        语句4            break;&#125;语句5语句1-&gt;(变量匹配)条件1(真)-&gt;语句2-&gt;break-&gt;语句5                    |                    假-&gt;条件2(真)-&gt;语句3-&gt;break-&gt;语句5                            |                            假-&gt;语句4-&gt;break-&gt;语句5***************注意:switch里加break,匹配完条件-&gt;执行完语句-&gt;直接跳出switch如果不加break匹配条件-&gt;执行语句-&gt;顺序往下执行如果case里加return执行到return语句直接退出程序***************break(可以在switch和循环中用)跳出switchbreak 和 return区别break 是跳出 switch体return是跳出这个函数(main函数也是函数,如果main()函数里 执行到return,代表程序的结束)------------------练习键入一个整数x,如果小于3则执行x+3操作,如果大于等于3则执行3*x+9如果大于9则执行9*x-10------------------homework1.输入三个值判断这三个值是否构成三角形(是否是直角 等腰 等边 普通 不能)2.输入三个整数x,y,z,请把这三个数由从小到大输出3.学习成绩&gt;=90分的同学用A表示,60-89分之间的用B表示，小于60用C表示4.输入成绩0-59    不及格60-69   及格70-79   中80-89   良90-100  优(考虑哪个阶段的人多-&gt;程序效率上考虑)20000学生其中15000个学生都是80-895.停车场收费系统,3小时以内,收费每小时30元,超出部分每小时50元6.输入相应的字符打印相应的语句(默认不区分大小写)输入a,打印钟薛高18块钱输入b,打印梦龙8块钱输入c,打印老冰棒1块钱输入d,打印雪莲0.5块钱7.判断输入的4位数是否是回文数(1221是回文数, 1234不是)8.输入年份判断该年是否是闰年RTC(实时时钟)//闰年//能被4 整除但是不能被100整除 能被400整除9.输入一个整数,判断是否既是3 也是5 又是7的倍数 (num % 105)==================================================10.输入年月日,打印出是该年的第几天//2015-9-25是2015年的第?天11.输入相应的字符打印相应的语句(默认不区分大小写)输入a,打印钟薛高18块钱输入b,打印梦龙8块钱输入c,打印老冰棒1块钱输入d,打印雪莲0.5块钱12.输入成绩0-59    不及格60-69   及格70-79   中80-89   良90-100  优+++++++++1.定义变量a,通过键盘录入a的值,判断a的值是否是偶数2.定义变量year,通过键盘录入year的值,判断year是否是闰年    能被4整除但是不能被100整除的年份是闰年    或者能被400整除的年份是闰年3.定义三个变量a b c,通过键盘录入三个非零的正整数    判断是否可以构成三角形===================================作业:    1.把今天讲过的内容完完整整的复习一遍    2.复习之后,写上面的编程题目(1 - 9使用if来做)(10 - 12使用switch)注意:    1.千万不要忽略复习的重要性    2.千万不要眼高手低(程序再小,也是程序,一定要亲手写一遍,才能说自己会)===================================</code></pre><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="2022-7-18-1"><a href="#2022-7-18-1" class="headerlink" title="2022-7-18"></a>2022-7-18</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><pre><code>for(循环的初始化; 循环控制部分; 循环的修改部分)&#123;    循环主体;&#125;for循环初始部分……为循环变量附初值循环控制部分……按照循环条件控制循环正常进行循环的修改部分……循环执行中，循环变量按照一定规律变化循环体（工作部分）……要多次循环的代码部分#include &lt;stdio.h&gt;int main(void)&#123;    int i = 0;//循环变量    int sum = 0;    for(i = 0; i &lt;= 100; i++)        //i = 0循环的初始部分为循环变量赋初值        //i &lt;= 100循环的控制部分，控制循环的进行        //i++循环的修改部分，修改循环变量        //sum += i循环体，循环的主体    &#123;        sum += i;    &#125;    printf(&quot;sum = %d\n&quot;, sum);    return 0;&#125;流程图                for i = 1循环初始部分                    |                i &lt;= 100 循环控制部分&lt;---            否------|是                 |            |   sum = sum + i;循环体    |            |       |                   |            |   i++ 程序修改部分---------            |            |            |            |_______                    |                其他语句其他形态(1)    for(a = 0, b = 0; a != 3 &amp;&amp; b != 3; a++, b++)&#123;&#125;(2)    for(; ;)&#123;    需要循环的部分;&#125;死循环(3)    for(a = 0; a &lt; 10; a++)    &#123;        for(b = 0; b &lt; 10; b++)        &#123;            &#125;    &#125;</code></pre><h4 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h4><pre><code>    rand()//产生随机数    srand()//随机种子    int a = 0;    int b = 0;    srand(time(NULL));    //rand()     产生随机数    //srand()    随机种子    //time(NULL) 时间    //NULL       空    for(a = 0; a &lt; 10; a++)//随机取出10个(50~100以内的数)    &#123;        b = rand() % 50 + 50;        //rand() % 50       [0~49]范围        //rand() % 50 + 50  [50~99]范围        printf(&quot;b = %d\n&quot;, b);    &#125;</code></pre><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><pre><code>//break 应用于循环和switch中跳出 循环跳出 switch//如果遇到嵌套循环的话,break 只跳出最近的循环continue//continue 只应用于循环当中跳出本次循环//如果遇到嵌套循环的话,continue也只是跳出本次循环</code></pre><h2 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h2><pre><code>1.(1)打印4 * 5 的 *例:********************(2).打印i * j 的 * (i j 键盘接收)    例:i = 4, j = 5    //4-5 5-6    *****    *****    *****    *****(3).打印i * j 的 * 边框(i j 键盘接收)    例: i = 4, j = 5    *****    *   *    *   *    *****2.打印99乘法表    1 * 1 = 1    1 * 2 = 2 2 * 2 = 4    *    **    ***    ****3.计算1+2+3+4+5+...+n, n是从键盘输入的自然数// 穷举4.要将5张100元的大钞票,换成等值的50 20 10 5小钞票,每种面值至少一张,要多少张,有多少种换法5.有1、2、3、4 4个数字,能组成多少个互不相同且无重复的三位数呢6.有这样的一个等式,xyz+yzz=532,编程求x y z的值7.计算1^2 + 2^2 + 3^2 + ... +10^2的结果(1的平方 + 2的平方)8.输入20个人的成绩,输出不及格的人数(0&lt;=score&lt;60 为不及格)9.随机产生100个三位随机数,找出其中能被 3 5 7整除的数10.打印0~100以内所有的质数(只能被1 和 本身整除的数)11.猜数游戏(随机产生一个1000以内的数,去猜,        如果大了打印猜的大了,        如果小了打印猜的小了,        如果正确打印对的        直到猜对了再结束,每次打印必须打印出猜的次数)12. 把11修改成,程序开始时,先输入需要猜的数的范围n例:(想要猜数的范围是(0~10000) 那么变量n接收键盘上10000        范围都是从0开始)13.----------------------------a + b - 9 = 4+--c -d * e = 4/*-f + g - h = 4===444求a b c d e f g h (0 ～ 12范围内)//除法指的是整除 c % f == 0只有一种答案===================================作业:1.把今天讲过的内容完完整整的复习一遍2.来做上述的编程题目3.如果还有时间可以自己再找一些题目来做4.有问题微信上直接找张老师===================================</code></pre><h3 id="while"><a href="#while" class="headerlink" title="while()"></a>while()</h3><pre><code>语句1while(条件)&#123;    循环体&#125;语句2                            ---------------                            |             |        语句1 --&gt; 条件判断(真) --&gt; 循环体 ---|                            |(假)                            |---------------&gt;语句2    /*       while(条件)//必须要有条件       &#123;           主体       &#125;       当满足条件的时候,进入while循环,执行循环体     */while(1)//死循环=================================do...while//和while相比较 先执行在判断// do...while 至少循环一次do&#123;    需要循环的语句;&#125;while();n = 1;do&#123;    sum += n;    n++;&#125;while(n &lt;= 100);==============================break//break 应用于循环和switch中跳出 循环跳出 switch//如果遇到嵌套循环的话,break 只跳出最近的循环continue//continue 只应用于循环当中跳出本次循环//如果遇到嵌套循环的话,continue也只是跳出本次循环</code></pre><h3 id="goto-x2F-x2F-跳转语句"><a href="#goto-x2F-x2F-跳转语句" class="headerlink" title="goto&#x2F;&#x2F;跳转语句"></a>goto&#x2F;&#x2F;跳转语句</h3><pre><code>i = 1;//循环变量的初始loop://标记if(i &lt;= 100)//循环变量的的控制&#123;    sum += i;//循环体    i++;//循环变量的变化    goto loop;//跳到标记处&#125;面试题:(1)从键盘上接收一个正整数,打印输出它的倒序例:12345    54321(2)如果是一个负数例:-1234-4321(3)    atoi()把字符串转换成十进制整数    &quot;123&quot;-&gt;123atox atoo&quot;0x40008000&quot;-&gt;0x40008000&quot;1234&quot;-&gt;1234实现一个 itoa() 函数12345&quot;12345&quot;=====================================</code></pre><h2 id="homework-1"><a href="#homework-1" class="headerlink" title="homework"></a>homework</h2><pre><code>14.求1+12+123+...前N项之和,其中N是从键盘输入的数(N取值范围（1~9）)    n = 5;    sum = 1 + 12 + 123 + 1234 + 12345;15.爱因斯坦出了一道这样的数学题,有一条长阶梯,若每步跨2阶,则最后剩1阶,若每步跨3阶,则最后省2阶,若每步跨5阶,则最后剩4阶,若每步跨6阶，则最后剩5阶只有每次跨7阶,最后才正好1阶不剩,请问在这条阶梯最少多少阶16.设N是一个4位数,它的9倍恰好是它的反序数    例:1234 反序数是432117.求s = a + aa + aaa + aaaa + ... + aa...a的值,其中a是1~9的一个数字(不超过十项)例:a = 3; s = 3 + 33 + 333;18.“百钱百鸡”问题,百钱买百鸡,公鸡1个3块钱,母鸡1个2块钱，小鸡3个一块钱,问公鸡,母鸡,小鸡各多少个19.打印三角形(画8个三角形)* * * * *  * * * *    * * *      * *        *6_1.打印三角形    录入n,n是直角三角形的高    例:n = 3      *     * * *   * * * * *    n = 4      *     * * *   * * * * * * * * * * * * 20.猴子吃桃问题,有一天一只猴子摘了一些桃子,它吃掉一半,又吃了一个,第二天也是这样,到了第十天,只有一个桃子了,求猴子摘了多少桃子21. 4 5 6 7总共能组成多少个不能被4整除的4位数22.求n!(n的阶乘)====================================作业1.把今天讲过的内容完完整整的复习一遍2.整理笔记3.写编程题目====================================</code></pre><h2 id="小项目"><a href="#小项目" class="headerlink" title="小项目"></a>小项目</h2><pre><code>                        电子版的口算卡随机生成10道100以内的 [加 减 乘 除 取余] 数学题 回答正确的加10分错误不加分(把正确结果打印出来) 然后显示最后成绩。(不用float类型)1&gt;操作数随机  2&gt;运算符随机gcc 1.c当执行./a.out之后,先清屏23 + 70 = 93Bingo!+10分15 - 30 = -15Bingo!+10分23 * 87 = 0Error!====== 正确结果打印出来总分 70分====================================</code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><pre><code>机器CPU     内存    硬盘快      中      慢int a = 100;//初始化int类型变量int *p;//定义指针p = &amp;a;//把a的地址传给指针p//&amp; 取地址符printf(&quot;a = %d\n&quot;, a);*p = 200;//通过指针改变值printf(&quot;*p = %d\n&quot;, *p);//* 取指针所保存的地址所在的位置里的值// 可以简化成取值不同数据类型printf(&quot;char = %lu\n&quot;, sizeof(c));printf(&quot;short = %lu\n&quot;, sizeof(s));printf(&quot;int = %lu\n&quot;, sizeof(i));printf(&quot;float = %lu\n&quot;, sizeof(f));int *p; int代表以后在保存地址的时候变量的数据类型所有指针在内存中占8个字节(64位操作系统)int a = 100;变量名      值      址a           100     0x10000x10010x10020x1003pa          0x1000  0x2000注意:1.指针所占字节数不分类型都是 8个字节(分操作系统)int *p;char *c;2.pa += 1//pa++改变了pa所存的地址值当指针自增p++改变的是指针保存的地址,改变的字节数和所存地址值的变量的类型有关p++ 改变了p所存的地址值p+1 没有改变p所保存的地址值3.如果想要操作指针,改变指针 用二级指针取地址符(&amp;)不管是变量还是指针只能加一个对于一级指针来说,取值符(*)只能加一个4.* 和 &amp; 是一个可逆的过程,可以中和printf(&quot;*(&amp;a) = %d\n&quot;, *(&amp;a));对printf(&quot;&amp;(*a) = %d\n&quot;, &amp;(*a));错/*一级指针 操作不了一级指针*/a           pa          pp值  100         &amp;a          &amp;pa址  0x1000      0x2000      0x3000a           pa          pp值  100         0x1000      0x2000址  0x1000      0x2000      0x3000======================================</code></pre><h3 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h3><pre><code>注意:1.二级指针所占字节数不分类型都是 8个字节(分操作系统)int **p;char **c;2.二级指针也可以做加法运算int **p;p + 1;p++;p+=1;当二级指针偏移一个单位跨8个字节3.如果想要操作指针,改变指针 用二级指针取地址符(&amp;)不管是变量还是指针只能加一个对于一级指针来说,取值符(*)只能加一个4.* 和 &amp; 是一个可逆的过程,可以中和printf(&quot;*(&amp;a) = %d\n&quot;, *(&amp;a));对printf(&quot;&amp;(*a) = %d\n&quot;, &amp;(*a));错</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>    void    空返回值的类型 函数名(参数)&#123;    功能&#125;main()是程序的入口;函数之间的调用注意:2.调用的函数写到被调用函数的下面3.函数可以先定义,再写函数的实现//函数的定义void print(int c);void print(int c)//显示 函数的实现&#123;    printf(&quot;c = %d\n&quot;, c);&#125;参数传递值传递a = 3, b = 4;swap(a, b)    当main函数调用swap函数的时候,    只是把变量的值传过去    相当于swap(3, 4)地址传递a = 3, b = 4;swap(&amp;a, &amp;b)    当main函数调用swap函数的时候,    把a和b的地址传过去相当于swap(0x1000, 0x2000)/*   如果函数想要改变main函数的变量的话,   可以传变量的地址   如果函数只是想用main函数地变量的值的话,   可以传变量的值 */======================================猜数游戏(随机产生一个1000以内的数,去猜,        如果大了打印猜的大了,        如果小了打印猜的小了,        如果正确打印对的        每次打印必须打印出猜的次数)口算卡    随机10道口算卡题目        100 + 100 = 300        wrong! ========= 200        1.操作数100以内随机    2.运算符 + - * / % 随机    3.不用float    4.多函数实现第一阶段    只写一个.c文件,.c文件中只有一个main函数第二阶段    只写一个.c文件,,c文件中有一个main函数,多个功能函数第三阶段    写多个文件    main.c主函数和功能函数调用    func.c功能函数的实现    func.h功能函数的声明    makefile编译规则第四阶段    把func.c做成库文件动态库静态库======================================作业    1.把今天讲过的内容从头到尾复习一遍    2.把之前打印8个三角形的程序整合一个程序,其中打印图形的功能封装成函数    3.猜数游戏(随机产生一个1000以内的数,去猜,        如果大了打印猜的大了,        如果小了打印猜的小了,        如果正确打印对的        每次打印必须打印出猜的次数)    4.口算卡    随机10道口算卡题目        100 + 100 = 300        wrong! ========= 200        1.操作数100以内随机    2.运算符 + - * / % 随机    3.不用float    4.多函数实现</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><pre><code>int a[5];a[0]a[1]a[2]1230x10000x10040x1008命名规则int a[5] = &#123;1, 2, 3, 4 ,5&#125;;int b[5] = &#123;0&#125;;waring!int c[]  = &#123;1, 2, 3, 4, 5&#125;;   int a[10];   int *p = a;   a[i];   数组+下标   p + i;  指针+偏移   a + i;  数组名+偏移 p[i]指针+下标&amp;arr[0] = 0xbf8c97ec1arr = 0xbf8c97ec2&amp;arr = 0xbf8c97ec31 2 数组首元素的地址3数组的地址+++++++++++++++++++++&amp;arr[1] = 0xbf8c97f0arr + 1 = 0xbf8c97f0&amp;arr + 1 = 0xbf8c9800一维数组特性1.数组名可以当指针来用,利用地址加法运算,计算出数组元素地址加*取出地址中的内容注:a[i] = *(a + i)2.sizeof(数组名) = 整个数组长度(整个数组所占字节数)3.数组名是常量，不能改变指向p = &amp;i;//指针可以保存别的地址a = &amp;i;//数组名不可以*(a + i);a += i;//a = a + ia++;数组名都不可以这样操作4.数组名可以当指针来用,但是,不是指针</code></pre><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><pre><code>   int a[15][15]   char a[15][15]int a[2][3] = &#123;0&#125; a[0][0] a[0][1] a[0][2]a[1][0] a[1][1] a[1][2]内存a[0][0]         0x0a[0][1]         0x4...a[1][2]在内存中是顺序的存储命名规则int a[3][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;;int a[3][4] = &#123;0&#125;;int a[3][4] = &#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;;////!!!!!int a[][4] = &#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;;二维数组中行数可以省略,列数不可以二维数组特性1.数组名可以当指针来用,利用地址加法运算,计算出数组元素地址    加*取出地址中的内容    注: a[1][2] = *(*(a + 1) + 2)    a[2][3] = *(*(a + 2) + 3)    a[i][j] = *(*(a + i) + j)2.sizeof(数组名) = 整个数组长度(不是指针长度)    a[4][5];    sizeof(a) / sizeof(a[0])        算多少行    sizeof(a) / sizeof(a[0][0])     算数组成员个数    注: 算多少行sizeof(a)/sizeof(a[0])算多少列sizeof(a[0])/sizeof(a[0][0])    sizeof(a)是整个数组的大小sizeof(a[i]是第i行的大小)    3.数组名是常量,不能改变指向    4.数组名可以当指针使用,但不是指针    printf(&quot;&amp;a[0][0]    =   %p\n&quot;, &amp;a[0][0]);    //数组首元素的地址    printf(&quot;a[0]        =   %p\n&quot;, a[0]);    //首行第一个元素的地址    printf(&quot;a       =   %p\n&quot;, a);    //首行的地址    printf(&quot;*a      =   %p\n&quot;, *a);    //首行第一个元素的地址    printf(&quot;&amp;a      =   %p\n&quot;, &amp;a);    //数组的地址    三维数组    =&gt;  多个二维数组组成    int a[2][4][4] =&#123;&#123;&#123;0,0,,0&#125;,&#123;0,0,0,0&#125;,&#123;0,1,0,0&#125;,&#123;0,1,1,1&#125;&#125;,        &#123;&#123;0,0,0,0&#125;,&#123;0,0,0,1&#125;,&#123;0,0,0,1&#125;,&#123;0,0,1,1&#125;&#125;&#125;            指针与数组            在机器中都是用指针操作的a[0] = *(a + 0)a[1] = *(a + 1)    ...a[i] = *(a + i)</code></pre><h2 id="二维数组与指针"><a href="#二维数组与指针" class="headerlink" title="二维数组与指针"></a>二维数组与指针</h2><pre><code>    二维数组的可以当一个指针使用a[1][2] = *(*(a + 1) + 2)a[2][3] = *(*(a + 2) + 3)    ...a[i][j] = *(*(a + i) + j)</code></pre><h2 id="三维数组和指针"><a href="#三维数组和指针" class="headerlink" title="三维数组和指针"></a>三维数组和指针</h2><pre><code>    三维数组的可以当一个指针使用a[1][2][3] = *(*(*(a + 1) + 2) + 3)a[2][3][4] = *(*(*(a + 2) + 3) + 4)    ...a[i][j][k] = *(*(*(a + i) + j) + k)</code></pre><h2 id="数组和函数"><a href="#数组和函数" class="headerlink" title="数组和函数"></a>数组和函数</h2><pre><code>/*   一维数组   int arr[5];   调用时: init(arr);直接传数组名   实现时: void init(int *p)   或  void init(int arr[5])   void init(int arr[])   二维数组   int arr[4][4]   调用时: init(arr);   实现时: void init(int p[][4]) 或 void init(int p[4][4]) *///当main函数中函数传参是数组名的时候,//函数中可以用数组形式或者指针形式//当main函数中函数传参是二维数组的数组名的时候,//函数中可以用数组形式=============================</code></pre><h2 id="homework-2"><a href="#homework-2" class="headerlink" title="homework"></a>homework</h2><pre><code>(1)输入十个人的身高,求出平均值,并把小于平均值的打印出来(2)输入十个人的身高,要求排序,从低到高打印    排序(冒泡选择)例:100   201    50   70   30(3)完成itob函数(十-&gt;八)十 -&gt; 二void itob(int num, int arr[8]);10001100100(4)    阅读    man strcpy    man strcat    man strcmp    man strlen(5)有1000发子弹,要提前装到10个箱子里面，接收键盘输入，要取多少颗子弹数，只能显示整箱的个数，问这10个箱子怎么装,编程实现====================================================小项目:五子棋    1.player VS player要求    1&gt;最少完成p v p版本    2&gt;用多函数实现    3&gt;完成五子棋最基本功能即可    4&gt;要有适当的提示信息    5&gt;代码中要有注释    6&gt;完成后上传到邮箱中(402403579@qq.com)        2022-2-11_张三.c提示    1&gt;棋盘存储    2&gt;坐标的打印    3&gt;玩家的替换    4&gt;下到重复位置/下出边界以后的处理    5&gt;判断赢的条件字符数组初始化char a[6] = &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;&#125;;char b[6] = &#123;&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;\0&#39;&#125;;char c[] = &#123;&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;&#125;;char d[] = &quot;hello world&quot;;    &quot;...&quot;字符串,默认最后有\0如果碰到了 \0 表示结束,字符串, %schar arr[100] = &quot;hello world!&quot;;//字符数组   存储功能char *p = &quot;hello world!&quot;;//字符指针     只是保存地址//字符指针保存的是 常串 的地址================================    周末作业1.把这一周讲过的内容先完完整整的复习一遍,有问题直接问2.阅读man手册 strcpy strcat strcmp strlen3.调用系统实现的string函数的功能,实现自己写的功能    mystrcpy mystrcat mystrcmp mystrlen4.后续作业的1 - 5题5.剩余时间去做五子棋的项目</code></pre><h2 id="work"><a href="#work" class="headerlink" title="work"></a>work</h2><pre><code>man string.hstring一族的函数,strcpy strcmp strcat strlenchar *mystrcpy(char *dst, const char *src);char *mystrcat(char *s1, const char *s2);int mystrcmp(const char *s1, const char *s2);size_t mystrlen(const char *s);char *p = &quot;root:x:0:0:root:/root:/bin/bash&quot;;</code></pre><h2 id="homework-3"><a href="#homework-3" class="headerlink" title="homework"></a>homework</h2><pre><code>1.输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。2.输入一个字串，判断它是否是对称串。如”abcdcba”是对称串，”123456789”不是。3.输入一行字符串，按如下规则加密：如果是英文字母则大写变小写、小写变大写，对非英文字符则保持不变。试写加密程序。4.输入一行小写英文字母，按如下规则加密：a→c、b→d、…、x→z、y→a、z→b，试写加密程序。5.输入一行英文，已知各单词之间用1个空格相隔（设第一个单词前没有空格），统计这行英文有多少个单词。6.完成atoi函数    int myatoi(const char *nptr);7.完成itoa函数    void itoa(int data, char str[]);</code></pre><h2 id="如果不是自己开辟内存空间-当程序结束后自己释放掉"><a href="#如果不是自己开辟内存空间-当程序结束后自己释放掉" class="headerlink" title="如果不是自己开辟内存空间,当程序结束后自己释放掉"></a>如果不是自己开辟内存空间,当程序结束后自己释放掉</h2><pre><code>如果不是自己开辟内存空间,当程序结束后自己释放掉[不用程序员管理]*****************谁开辟,谁释放       [程序员自己开辟空间]/*内存耗尽 内存泄露*/谁创建,谁销毁       [链表]/*泄露*/谁加锁,谁解锁       [线程]/*防止Bug*/谁打开,谁关闭       [文件操作]/*泄露*/*****************代码区        管不了栈区        系统帮助程序员管理        不需要程序员自己开辟空间,释放空间        自动释放堆区        malloc-&gt;free        zalloc-&gt;free        程序员需要自己管理的内存空间        自己开辟,自己释放        申请和释放都是程序员管理        (忘记释放会使内存耗尽)全局区        全局变量常数区        程序结束才会释放        (char *p1 = NULL;)        (p1 = &quot;abc&quot;;)内存    真实存储    4G只用内存真实空间    4K虚拟内存            4G1G      kernel(内核)--------------------3G      environment/cmd环境变量(系统设定的全局变量)和命令-&gt;argc argvint main(int argc, char *argv[])栈向下     从高地址到低地址堆向上     从低地址到高地址.bss    静态存储区(全局变量,静态变量) !未初始化.date   初始化的 不为0                !已初始化RO date 只读数据段.text    代码段.bss存在可执行文件中.date不存在可执行文件中        char *p = &quot;abc&quot;;=====================================                                        printf.o                               |                               V                                        可重定位可执行        源程序被修改的源程序汇编程序    目标程序   目标程序        hello.c----&gt;hello.i----&gt;hello.s----&gt;hello.o----&gt;hello            预处理器(cpp)  编译器(ccl)  汇编器(as)   连接器(ld)    第一个阶段只写一个main.c    第二个阶段多函数    第三个阶段多文件                func.c                func.h                main.c                makefilemakefile一个工程中的源文件不计其数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为 makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。=====================================</code></pre><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><pre><code>存储区域        作用域          生命周期全局变量        局部变量==========================================================</code></pre><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><pre><code>1.尽量不使用全局变量2.使用时加static(静态)3.显示初始化main.c#include &lt;stdio.h&gt;    int xxx;int main(void)&#123;    printf(&quot;main.xxx = %d\n&quot;, xxx);    foo();    printf(&quot;main.xxx = %d\n&quot;, xxx);    return 0;&#125;foo.c#include &lt;stdio.h&gt;int xxx;int foo()&#123;    xxx++;    printf(&quot;foo.xxx = %d\n&quot;, xxx);&#125;全局变量中默认定义的变量值为0;变量与函数关系外部变量内部变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> x=<span class="number">1</span>;    <span class="comment">//外部变量  全局变量</span></span><br><span class="line"><span class="comment">//1、生命周期  整个程序</span></span><br><span class="line"><span class="comment">//2、作用域    整个程序</span></span><br><span class="line"><span class="comment">//3、存储区域  全局区</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> y=<span class="number">1</span>;<span class="comment">//内部变量   局部变量</span></span><br><span class="line"><span class="comment">//1、生命周期  函数体内</span></span><br><span class="line"><span class="comment">//2、作用域    函数体内</span></span><br><span class="line"><span class="comment">//3、存储区域  栈区</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> z=<span class="number">0</span>;<span class="comment">//块级变量</span></span><br><span class="line"><span class="comment">//1、生命周期  块内有效</span></span><br><span class="line"><span class="comment">//2、作用域    块内有效</span></span><br><span class="line"><span class="comment">//3、存储区域  栈区</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;z=%d\n&quot;</span>,z);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m=<span class="number">0</span>;<span class="comment">//块级变量</span></span><br><span class="line"><span class="comment">//1、生命周期  块内有效</span></span><br><span class="line"><span class="comment">//2、作用域    块内有效</span></span><br><span class="line"><span class="comment">//3、存储区域  栈区</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;m=%d\n&quot;</span>,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A中的x=%d\n&quot;</span>,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A中的y=%d\n&quot;</span>,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A中的&amp;y=%p\n&quot;</span>,&amp;y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">x++;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B中x=%d\n&quot;</span>,x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B中的y=%d\n&quot;</span>,y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B中的&amp;y=%p\n&quot;</span>,&amp;y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">C</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C中的x=%d\n&quot;</span>,x);</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">1000</span>;<span class="comment">//(1)如果是x = 1000;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C块中的x=%d\n&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;C中的x=%d\n&quot;</span>,x);<span class="comment">//(1)x = 1000;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">A();</span><br><span class="line">B();</span><br><span class="line">C();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><pre><code>1.存储区域  全局静态区2.作用域        函数体内3.生命周期  整个程序<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> z = <span class="number">1</span>;   <span class="comment">//静态外部变量限定作用</span></span><br><span class="line"><span class="comment">//1.存储区域    全局区(静态区)</span></span><br><span class="line"><span class="comment">//2.作用域      本文件</span></span><br><span class="line"><span class="comment">//3.生命周期    整个程序</span></span><br><span class="line"><span class="type">int</span> m = <span class="number">0</span>;<span class="comment">//外部变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> x = <span class="number">0</span>;<span class="comment">//静态内部变量</span></span><br><span class="line"><span class="comment">//1.存储区域    全局区(静态区)</span></span><br><span class="line"><span class="comment">//2.作用域      函数体内</span></span><br><span class="line"><span class="comment">//3.生命周期    整个程序</span></span><br><span class="line"><span class="type">int</span> y = <span class="number">1</span>;<span class="comment">//内部变量(栈区)</span></span><br><span class="line">x++;</span><br><span class="line">y++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x = %d\n&quot;</span>, x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;y = %d\n&quot;</span>, y);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"> <span class="number">12</span>     <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line"> <span class="number">13</span>         <span class="keyword">return</span> ;</span><br><span class="line"> <span class="number">14</span>     <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i % <span class="number">10</span>);</span><br><span class="line"> <span class="number">15</span>     func(i / <span class="number">10</span>);</span><br><span class="line"> <span class="number">16</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">A();<span class="comment">//第一次调用x初始化一次,以后就不初始化了</span></span><br><span class="line">A();</span><br><span class="line">A();</span><br><span class="line">A();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line">##函数与函数之间的关系</span><br><span class="line"><span class="comment">//函数与函数之间是外部关系(并列)</span></span><br><span class="line"><span class="comment">//函数体内不能再写函数</span></span><br><span class="line"><span class="comment">//静态函数(本函数只能在本文件使用)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数与函数之间的关系*/</span></span><br><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span>;<span class="comment">//声明函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">A</span><span class="params">()</span><span class="comment">//函数与函数之间是外部关系(并列)</span></span><br><span class="line"><span class="comment">//函数体内不能再写函数</span></span><br><span class="line">&#123;</span><br><span class="line">B();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A func()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">B</span><span class="params">()</span><span class="comment">//静态函数(本函数只能在本文件使用)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;B func()\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//A 不能调用B</span></span><br><span class="line"><span class="comment">//B 可以调用A</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">A();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>=====================================写C语言程序的四个阶段第一阶段只写一个.c文件,在.c文件中只写一个main函数,把所有功能都放到main()中第二阶段只写一个.c文件,在.c文件中除了main函数以外还有其他的功能函数            函数的声明            函数的返回值类型 函数名(参数列表);//该位置的参数叫做形式参数            函数的实现(函数的定义)            函数的返回值类型 函数名(参数列表)//该位置的参数叫做形式参数            &#123;                功能代码            &#125;            函数的调用            函数名(参数);//该位置的参数叫做实际参数            函数名是函数的入口地址,函数名就是地址            形式参数接收实际参数的值            值传递            地址传递第三阶段多文件的方式实现项目            main.c存放main函数,以及功能函数的调用            func.c存放功能函数的实现            func.h存放功能函数的声明,以及各种定义            makefile(Makefile)存放编译规则第四阶段把.c文件做成库文件            动态库            静态库</code></pre><h2 id="二-makefile的简介"><a href="#二-makefile的简介" class="headerlink" title="二.makefile的简介"></a>二.makefile的简介</h2><pre><code>    一个项目工程中的源文件不计其数,这些源文件按类型、功能、模块分别放在若干个目录中.    makefile定义了一系列的规则来指定,哪些文件需要先编译,哪些文件需要后编译.    哪些文件需要重新编译,甚至于进行更复杂的功能操作.    因为 makefile 就像一个Shell脚本一样,其中也可以执行操作系统的命令.----------------------------------------    vim 打开多个文件        vim * -p多文件以标签的形式打开        注意 : 不能打开过多的文件,否则vim会崩溃    用ctrl + alt + pgup / pgdn切换文件----------------------------------------</code></pre><h2 id="三-C语言的作用域"><a href="#三-C语言的作用域" class="headerlink" title="三.C语言的作用域"></a>三.C语言的作用域</h2><pre><code>1.空间的分布    C语言会把内存分为5个区域(栈区 堆区 常量区 全局区 代码区)    --------------------------------------------------------    ./a.out-&gt;是由进程在执行可执行程序时分配存储空间    -&gt;4Kb(物理)-&gt;4Gb(虚拟空间)    1GbKernel(内核)    --------------------    3Gb命令行参数和环境变量int main(int argc, char *argv[])            栈区            👇            空白            ☝            堆区            静态区(全局区)未初始化的(系统默认会初始化成0)            静态区(全局区)已初始化的            常量区(RO DATA)只读的区域            代码区    栈区不需要程序员来管理,自己开辟,自己释放    堆区需要程序员来管理,手动开辟,手动释放(malloc realloc zalloc free)    静态区全局变量/static关键字修饰的变量    常量区read only(只读)    代码区程序员没有办法管理2.全局变量和局部变量        局部变量    在某个函数内部或者程序块内部定义的变量叫做局部变量    局部变量只能在该函数的内部 或者 该程序块的内部使用    局部变量在函数外部是不可知的    全局变量    全局变量是定义在函数外部的,通常写到程序的顶部    全局变量在整个程序中生命周期都是有效的    在任意函数的内部都可以访问全局变量    注意:    全局变量和局部变量可以同名    如果出现了同名的情况,那么在执行函数时优先使用局部变量,    在该函数中全局变量被屏蔽了    全局变量和局部变量在定义时的区别        当定义局部变量时,系统不会帮助初始化,局部变量内部存储的是垃圾值        当定义全局变量时,系统会帮助初始化            int -&gt; 0            char -&gt; &#39;\0&#39;            pointer -&gt; NULL    全局变量和局部变量存储空间的区别        全局变量 : 保存在内存的静态全局区,占用的是静态的存储单元            当程序运行时已经被创建了,当程序结束时被释放        局部变量 : 保存在内存的栈区中,只有在局部变量所在的函数被调用时,            系统才会帮助分配存储单元,当局部变量所在的函数结束时被释放</code></pre><h2 id="四-存储类关键字"><a href="#四-存储类关键字" class="headerlink" title="四.存储类关键字"></a>四.存储类关键字</h2><pre><code>1.extern关键字    extern是C语言中的关键字    修饰的是外部的    可以修饰函数,也可以修饰变量    1&gt;如果函数被extern关键字修饰了,证明其他文件也可以使用这个函数,        如果定义的函数不想被其他文件使用,可以使用static关键字修饰    2&gt;如果变量被extern关键字修饰了,需要注意不要初始化,在Linux gcc环境中会报Error    如果在本文件中函数或者变量使用extern关键字修饰了        说明该函数或者变量在别的文件中定义了,在当前文件中使用    当编译器在编译程序时,如果碰到了extern关键字,那么会从别的文件中查找相关的定义2.static关键字    static是C语言中的关键字    修饰的是静态的(内部的)    可以修饰函数,也可以修饰变量    为了使全局变量可以安全的使用,请在定义全局变量时,使用static关键字进行修饰    a.如果全局变量没有使用static关键字修饰,可以跨文件使用    A.如果全局变量使用了static关键字修饰,仅限于在当前文件内使用    b.如果局部变量没有使用static关键字修饰,该局部变量存储在栈区中,当函数结束后被释放    B.如果局部变量使用了static关键字修饰,该局部变量存储在静态区中,当程序结束后被释放    c.如果局部变量没有使用static关键字修饰,每次调用函数该局部变量都会被重新初始化    C.如果局部变量使用了static关键字修饰,只在第一次调用函数时进行初始化,也是唯一的一次初始化    d.被static关键字修饰的内容,系统会默认进行初始化    1&gt;如果函数被static修饰了,该函数只能在本文件内使用,不能跨文件使用        static void swap(....)        &#123;                    &#125;        void pop_sort(....)        &#123;                    &#125;    2&gt;如果变量被static修饰了    3&gt;静态变量        静态变量所占用的存储空间是静态区        静态的全局变量 : 只能被变量所定义的文件中进行使用                        (其他文件即使加了extern关键字也使用不了)        静态的局部变量 : 只能被变量所在的代码块中进行使用    总结 :         如果本文件内的函数和变量想要让别的.c文件使用,可以加extern        如果本文件内的函数和变量不想让别的.c文件使用,可以加static================================简答题1.C语言的关键字extern是用来修饰什么的?    答 :     关键字的特点    extern修饰变量 :    extern修饰函数 : 2.C语言的关键字static是用来修饰什么的?    答 :     关键字的特点    static修饰变量 :        全局变量        局部变量    static修饰函数 :3.C语言的关键字const是用来修饰什么的?    4.C语言的关键字volatile是用来修饰什么的?    答 :    防止编译器优化================================</code></pre><h2 id="四-函数的关系"><a href="#四-函数的关系" class="headerlink" title="四.函数的关系"></a>四.函数的关系</h2><pre><code>    1.主函数调用功能函数    2.功能函数调用其他的功能函数    3.功能函数自己调用自己(递归函数)        递归函数    C语言是支持函数的递归,递归其实就是自己调用自己    注意 :     1.在写递归函数时最重要的就是退出条件    如果写的退出条件不清楚,那么递归函数肯定会出问题            2.在看别人写的递归程序时,递归次数不要太多    3.在项目中尽量不去使用递归,因为递归函数占用空间    递归函数可以解决的问题    数学 :             1.从1 + 2 + .. + 100            2.一个数的阶乘            3.斐波那契数列            4.杨辉三角    编程 :             1.栈式存储结构的问题            2.树状存储            3.汉诺塔游戏(河内塔)===================================    指针常量 常量指针    指针函数 函数指针 函数指针数组    指针数组 数组指针    指针 函数 数组    容易混淆的声明    const关键字    const关键字是用来修饰只读的(常量)        指针常量: 指针是常量    定义: int * const p;    特点: 指针的指向不能通过指针名进行改变,可以通过该指针修改指向空间的数据                当在程序中定义了指针常量,必须要有初始化    用处: 数组名    常量指针: 指针指向常量    定义: const int *p; const char *src; char const *src;    特点: 指针的指向能通过指针名进行改变,不可以通过该指针修改指向空间的数据    用处: 字符串操作    -------------------------------    const int *p;    int const *p;    int * const p;    const int * const p;    int const * const p;    -------------------------------    指针数组: 是一个数组,数组中的每一个成员都是相同类型的指针    定义: int *arr[4];                 char *str[10]; str是一个指针数组,一共有10个成员,str[0] - str[9]                             每个成员都是char *类型的指针    特点: arr是一个指针数组,一共有4个成员,arr[0] - arr[3],每个成员都是int *类型的指针              str是一个指针数组,一共有10个成员,str[0] - str[9],每个成员都是char *类型的指针    用处: 命令行参数    数组指针: 是一个指针,指针指向一个数组    定义: int(*p)[4];p是一个指针,p指针指向一行有4个成员,每个成员都是int类型的数组    特点:int arr[3][4];                int brr[2][4];                int (*p)[4];                p = arr;                p = brr;    用处: 用于和多维数组产生关系    指针函数: 是一个函数,该函数的返回值是一个指针    定义: char *strcpy(char *dest, const char *src);              char *strcat(char *dest, const char *src);              void *malloc(size_t size);              FILE *fopen(const char *pathname, const char *mode);    特点: 返回值是一个指针    用处: 可以返回地址    函数指针: 是一个指针,该指针指向函数    定义: int (*p)(int ,int);//定义了函数指针p,该指针指向                返回值为int类型,参数为int int,这样的函数    特点: 用来和函数产生关系的指针    用处: 可以保存函数的地址(函数的入口地址)    函数指针数组 : 是一个数组,数组中的每一个成员都是函数指针    定义   : int (*arr[4])(int , int);-------------------------------------------------一.给了定义,用文字进行描述(注意 : 描述清楚)    int a;                         int a[4];                      int *a;                        int a(int ,int);               int *a[4];                      int (*a)[4];                   int *a(int, int);              int (*a)(int, int);            int (*a[4])(int, int);  二.给了文字描述,使用特定的变量名进行定义 (a)(加 ; )三.给了英文描述,使用特定的变量名进行定义 (a)(审题 + 代码标准)a) 一个整型数（An integer）b) 一个指向整型数的指针（A pointer to an integer）c) 一个指向指针的的指针，它指向的指针是指向一个整型数（A pointer to a pointer to an integer）d) 一个有10个整型数的数组（An array of 10 integers）e) 一个有10个指针的数组，该指针是指向一个整型数的（An array of 10 pointers to integers）f) 一个指向有10个整型数数组的指针（A pointer to an array of 10 integers）g) 一个指向函数的指针，该函数有一个整型参数并返回一个整型数（A pointer to a function that takes an integer as an argument and returns an integer）h) 一个有10个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数（ An array of ten pointers to functions that take an integerargument and return an integer ） 答案是：a) int a; // An integerb) int *a; // A pointer to an integerc) int **a; // A pointer to a pointer to an integerd) int a[10]; // An array of 10 integerse) int *a[10]; // An array of 10 pointers to integersf) int (*a)[10]; // A pointer to an array of 10 integersg) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integerh) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer-------------------------------------------------===================================今日测验1.完成最少两种排序方法2.完成atoi函数    int myatoi(const char *nptr);3.求30000000 - 30001000以内的素数===================================</code></pre><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="2020-3-9"><a href="#2020-3-9" class="headerlink" title="2020-3-9"></a>2020-3-9</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>##结构体 联合 枚举 预处理</p><pre><code>C语言是面向过程的编程语言=========结构体=============结构体指的是一种数据结构,是C语言中复杂数据类型的一类。结构体可以被声明为变量、指针或数组等,用以实现较复杂的数据结构.结构体同时也是一些元素的集合,这些元素称为结构体的成员,且这些成员可以为不同的类型,成员一般用名字访问.1.结构体的定义2.结构体类型的变量    1&gt;初始化    2&gt;简单赋值    3&gt;通过scanf()赋值    4&gt;查看所占字节数    5&gt;查看地址    6&gt;和指针关系    7&gt;和函数之间的传参3.结构体数组    1&gt;初始化    2&gt;简单赋值    3&gt;通过scanf()赋值    4&gt;查看所占字节数    5&gt;查看地址    6&gt;和指针关系    7&gt;和函数之间的传参-----------------------------------------</code></pre><h3 id="一-结构体定义"><a href="#一-结构体定义" class="headerlink" title="一.结构体定义"></a>一.结构体定义</h3><pre><code>为了定义结构,必须使用 struct 关键字struct tag//tag是结构体标签&#123;    member-list;//member-list是结构体成员,一般来说写的是定义(变量 数组 指针)    member-list;    member-list;    ...&#125;variable-list;//variable-list是结构体类型的变量,定义在结构体的末尾,可以定义多个结构体类型的变量注意 : 无论定义结构体还是定义了结构体类型的变量都需要在最后加分号 ;</code></pre><h3 id="二-定义方式"><a href="#二-定义方式" class="headerlink" title="二.定义方式"></a>二.定义方式</h3><pre><code>1.struct&#123;    int a;    char b;    double c;&#125;s1;//上述定义了拥有3个成员的结构体,分别为int的a,char的b和double的c//同时又定义了结构体变量s1//这个结构体并没有标明其标签2.struct SIMPLE&#123;    int a;    char b;    double c;&#125;;//上述定义了拥有3个成员的结构体,分别为int的a,char的b和double的c//结构体的标签被命名为SIMPLE,没有定义结构体类型的变量struct SIMPLE t1, t2[20], *t3;//用SIMPLE标签的结构体定义了结构体类型的变量t1 结构体类型的数组t2 结构体类型的指针t33.typedef struct&#123;    int a;    char b;    double c; &#125;Simple2;//也可以用typedef创建新类型Simple2 u1, u2[20], *u3;注意 :在上面的结构体定义中&lt;第一种&gt;和&lt;第二种&gt;声明被编译器当作两个完全不同的类型,即使他们的成员列表是一样的,如果令 t3=&amp;s1 是违法的操作,编译器会报警告</code></pre><h3 id="三-定义结构体时-结构体的成员"><a href="#三-定义结构体时-结构体的成员" class="headerlink" title="三.定义结构体时,结构体的成员"></a>三.定义结构体时,结构体的成员</h3><pre><code>1.struct SIMPLE&#123;    int a;    char b;    double c;&#125;;struct COMPLEX&#123;    char string[100];    struct SIMPLE a;//结构体的成员是其他结构体类型的变量(可以和其他结构体类型的成员同名)                    //因为struct COMPLEX结构体定义中存在struct SIMPLE结构体类型的成员                    //所以应该把struct SIMPLE定义放到struct COMPLEX之前&#125;;2.struct NODE&#123;    char string[100];    struct NODE *next_node;//结构体的成员是自己结构体类型的指针(一般来说在链表或者树中经常使用)&#125;;3.如果两个结构体互相包含,则需要对其中一个结构体进行不完整声明,如下所示:struct B;//对结构体B进行不完整声明struct A&#123;    struct B *partner;//结构体A中包含结构体B类型的指针    //other members;&#125;;struct B&#123;    struct A *partner;//结构体B中包含结构体A类型的指针    //other members;&#125;;注意 :当定义结构体时结构体的成员可以是其他结构体类型的变量    结构体的成员也可以是自己结构体类型的指针    当然不可以是自己结构体类型的变量    而通常自己结构体类型的指针的应用是为了实现一些更高级的数据结构如链表和树等.位域(位段/位字段)有些信息在存储时,并不需要占用一个完整的字节,而只需占几个或一个二进制位.例如存放一个开关量时,只有 0 和 1 两种状态,用 1 位二进位即可.为了节省存储空间,并使处理简便,C 语言提供了&quot;位域&quot;或&quot;位段&quot;.其实&lt;位域&gt;是把一个字节中的二进制位划分为几个不同的区域,并说明每个区域的位数.每个域有一个域名,允许在程序中按域名进行操作.这样就可以把几个不同的对象用一个字节的二进制位域来表示.struct 位域结构名 &#123;    类型说明符 位域名: 位域长度;    ...//省略&#125;;例如:struct bs&#123;    char a:8;    char b:2;    char c:6;&#125;data;定义了struct bs类型的变量data,该变量共占两个字节,其中位域 a 占 8 位,位域 b 占 2 位,位域 c 占 6 位struct k&#123;    int a:1;    int  :2;    /* 该 2 位不能使用 */    int b:3;    int c:2;&#125;;-----------------------------------------</code></pre><h4 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h4><pre><code>使用结构体类型的数组写一个管理系统(每个人管理的内容不要一样)    例子 : 学生管理系统        struct stu        &#123;            int id;            char name[20];            int age;            int score;            ...            int flag;//用来做标记        &#125;;        1001abc2999    1002def28100    1003xyz4659    struct stu arr[10];//如果定义了一个5个成员的数组,那么将来最多可以管理5个学生    规定管理10个东西    实现功能 增加成员 删除成员 修改成员查找成员 打印数据 排序成员 保存数据 读取数据 退出程序    使用多文件的方式编写项目==============================================</code></pre><h3 id="共用体-联合union"><a href="#共用体-联合union" class="headerlink" title="共用体    联合union"></a>共用体    联合union</h3><pre><code>使用单块内存空间，管理不同数据类型占用的内存空间以共用体当中最大的为准1.同一个内存段可以用来存放几种不同类型的成员,但是在每一瞬间只能存放其中的一种,而不是同时存放几种。换句话说,每一瞬间只有一个成员起作用,其他的成员不起作用.2.共用体变量中起作用的成员是最后一次存放的成员,在存入一个新成员后,原有成员就失去作用3.共用体变量的地址和它的各成员的地址都是同一地址.4.共用体变量的初始化（1）union data a=b; //把共用体变量初始化为另一个共用体（2）union data a=&#123;123&#125;; //初始化共用体为第一个成员（3）union data a=&#123;.ch=&#39;a&#39;&#125;; //指定初始化项目，按照C99标准<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> a;</span><br><span class="line"><span class="type">short</span> b;</span><br><span class="line"><span class="type">int</span> c;</span><br><span class="line"><span class="type">float</span> d;</span><br><span class="line"><span class="type">double</span> e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">A</span> <span class="title">m</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(struct stu) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(union A) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">union</span> A));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(s) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(m) = %d\n&quot;</span>, <span class="keyword">sizeof</span>(m));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>===============================================sizeof(struct stu) = 28sizeof(union A) = 8sizeof(s) = 28sizeof(m) = 8===============================================大端格式    高字节存放低地址小端格式    低字节存放低地址</code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><pre><code>是一个被命名的整型常数的集合,枚举在日常生活中很常见。例如:    表示星期的    SUNDAY    MONDAY    TUESDAY    WEDNESDAY    THURSDAY    FRIDAY    SATURDAY    就是一个枚举。枚举的说明与结构和联合相似, 其形式为:enum 枚举名&#123;    标识符[=整型常数],    标识符[=整型常数],    ...    标识符[=整型常数]&#125;枚举变量;如果枚举没有初始化, 即省掉&quot;=整型常数&quot;时, 则从第一个标识符开始, 顺次赋给标识符0, 1, 2, ...。但当枚举中的某个成员赋值后, 其后的成员按依次加1的规则确定其值。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">a,</span><br><span class="line">b,</span><br><span class="line">c = <span class="number">10</span>,</span><br><span class="line">d</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;d = %d\n&quot;</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>========================a = 0b = 1c = 10d = 11========================枚举类型变量的赋值和使用枚举类型在使用中有以下规定：1.枚举值是常量，不是变量。不能在程序中用赋值语句再对它赋值。例如对枚举weekday的元素再作以下赋值： sun=5;mon=2;sun=mon; 都是错误的。2. 枚举元素本身由系统定义了一个表示序号的数值，从0 开始顺序定义为0，1，2…。如在weekday中，sun值为0，mon值为1， …,sat值为6。3. 只能把枚举值赋予枚举变量，不能把元素的数值直接赋予枚举变量。如： a=sun;b=mon; 是正确的。而： a=0;b=1; 是错误的。如一定要把数值赋予枚举变量，则必须用强制类型转换，如： a=(enum weekday)2;其意义是将顺序号为2的枚举元素赋予枚举变量a，相当于： a=tue; 还应该说明的是枚举元素不是字符常量也不是字符串常量， 使用时不要加单、双引号。注意：1. 枚举中每个成员(标识符)结束符是&quot;,&quot; 不是&quot;;&quot;, 最后一个成员可省略&quot;,&quot;。2. 初始化时可以赋负数, 以后的标识符仍依次加1。3. 枚举变量只能取枚举说明结构中的某个标识符常量。</code></pre><h3 id="预处理-替换"><a href="#预处理-替换" class="headerlink" title="预处理(替换)"></a>预处理(替换)</h3><pre><code>预处理阶段是程序在编译之前进行的处理,预处理器只不过是一个文本替换工具而已,它们会让编译器在实际编译之前完成所需的替换(预处理).C语言的预处理主要有三个方面的内容 : 1.宏定义 2.文件包含 3.条件编译.在C语言中以 &#39;#&#39; 开头的就是预处理的操作预处理命令以符号“#”开头。预处理指令描述#define定义宏#include包含一个源代码文件#undef取消已定义的宏#ifdef如果宏已经定义，则返回真#ifndef如果宏没有定义，则返回真#if如果给定条件为真，则编译下面代码#else#if 的替代方案#elif如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码#endif结束一个 #if……#else 条件编译块                                            printf.o                                                |                                                V                                            可重定位可执行        源程序被修改的源程序    汇编程序    目标程序   目标程序        hello.c----&gt;hello.i----&gt;hello.s----&gt;hello.o----&gt;hello            预处理器(cpp)  编译器(ccl)  汇编器(as)   链接器(ld)    </code></pre><h3 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-文件包含-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-文件包含-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;文件包含&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;文件包含&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h3><pre><code>文件包含是指一个源文件可以将另一个源文件的全部内容包含进来.该命令的作用是在预编译时,将指定源文件的内容复制到当前文件中.文件包含有两种格式,分别是:#include &quot;file.h&quot; 和 #include &lt;file.h&gt;这两格式的区别在于:    1.使用双引号,系统首先到当前目录下查找被包含的文件,如果没找到,        再到系统指定的&quot;包含文件目录&quot;(由用户在配置环境时设置)去找.    2.使用尖括号,直接到系统指定的&quot;包含文件目录&quot;去查找。        在linux操作系统中默认从/usr/include    通常使用双引号比较保险文件包含需要注意的点1.一个#include只能包含一个头文件.2.文件1用到文件2,文件2用到文件3,则文件3的包含命令#include应放在文件1的头部第一行.3.文件包含可以是有路径的.4.被包含文件中的静态全局变量不用在包含文件中声明.</code></pre><h3 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-宏定义-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-宏定义-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;宏定义&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;宏定义&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h3><pre><code>宏函数(能用函数就不用宏)宏定义是C程序提供的预处理功能之一.包括带参数的宏定义和不带参数的宏定义.具体是指用一个指定的标志符来进行简单的字符串替换或者进行阐述替换.1)不带参数的宏定义    格式：#define 宏名 替换内容    1.宏名一般用大写    2.提高程序的通用性和易读性，减少输入错误和便于修改。        例如：数组大小常用宏定义    3.可以用#undef命令终止宏定义的作用域    4.宏定义可以嵌套2)带参数的宏定义    格式：#define 宏名(参数表) 替换内容    注意：当使用宏定义时,实参如果是表达式,将来在替换时容易出问题3)带参数的宏定义和函数关系函数调用在编译后程序运行时进行,并且分配内存.宏替换在编译前进行,不分配内存.宏展开不占运行时间,只占编译时间,函数调用占运行时间(分配内存、保留现场、值传递、返回值)=======================================================#define Pal 3.1415926<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> add(A, B)A + B</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span>, b = <span class="number">7</span>;</span><br><span class="line">c = add(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %d, c = %d\n&quot;</span>, a, b, c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h3 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-条件编译-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-条件编译-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;条件编译&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;条件编译&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h3><pre><code>1.一般情况下,源程序中所有的行都参加编译.但有时希望对其中一部分内容只在满足一定条件下才进行编译,即对一部分内容指定编译条件,这就是&quot;条件编译&quot;。2.条件编译指令将决定哪些代码被编译,而哪些是不被编译的.可根据表达式的值或某个特定宏是否被定义来确定编译条件.    指令        ▪ #if、#else、#elif和#endif指令    ▪ #ifdef和#ifndef    ▪ #line格式一:#ifdef 标识符    程序段1#else    程序段2#endif当标识符已经定义时，程序段1才参加编译格式二:#ifndef 标识符#define 标识1    程序段1#endif如果标识符没有被定义，则重定义标识1，且执行程序段1。格式三:#if 表达式1    程序段1#elif 表达式2    程序段2    ……#elif 表达式n    程序段n#else    程序段n+1#endif当表达式1成立时,编译程序段1,当不成立时,判断表达式2,成立时编译程序段2,不成立以此类推</code></pre><h3 id="x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-附加预处理-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D"><a href="#x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-附加预处理-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;附加预处理&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;附加预处理&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h3><pre><code>我们使用的文件包含、条件编译、宏定义之外的一些预处理1)预定义宏宏描述__DATE__当前日期，一个以 &quot;MMM DD YYYY&quot; 格式表示的字符常量。__TIME__当前时间，一个以 &quot;HH:MM:SS&quot; 格式表示的字符常量。__FILE__这会包含当前文件名，一个字符串常量。__LINE__这会包含当前行号，一个十进制常量。2)预处理器运算符宏延续运算符（\）一个宏定义或者表达式通常写在一行上，但是如果语句太长一行容纳不下，则使用宏延续运算符（\）。字符串常量化运算符（#）在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（#）。标记粘贴运算符（##）宏定义内的标记粘贴运算符（##）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。defined() 运算符预处理器 defined 运算符是用在常量表达式中的，用来确定一个标识符是否已经使用 #define 定义过。如果指定的标识符已定义，则值为真（非零）。如果指定的标识符未定义，则值为假（零）。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_11day</title>
      <link href="/2023/02/16/embsky/03c/03c_11day/"/>
      <url>/2023/02/16/embsky/03c/03c_11day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-28<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-写C语言程序的四个阶段"><a href="#一-写C语言程序的四个阶段" class="headerlink" title="一.写C语言程序的四个阶段"></a>一.写C语言程序的四个阶段</h1><pre><code>第一阶段只写一个.c文件,在.c文件中只写一个main函数            把所有功能都堆到main函数中第二阶段只写一个.c文件,在.c文件中除了main函数以外            封装了其他的功能函数    函数的声明函数的返回值类型 函数名(参数列表);//该处的参数指的是形参    函数的实现函数的返回值类型 函数名(参数列表)//该处的参数指的是形参&#123;    功能实现的代码&#125;    函数的调用函数名(参数);//该处的参数指的是实际参数第三阶段以项目工程的形式编写程序,以多文件的形式            main.c存放主函数和功能函数的调用            func.c存放功能函数的实现            func.h存放功能函数的声明以及各种定义            makefile存放的是编译规则第四阶段把功能函数的实现封装成库文件            静态库和动态库</code></pre><h1 id="二-makefile文件的简介"><a href="#二-makefile文件的简介" class="headerlink" title="二.makefile文件的简介"></a>二.makefile文件的简介</h1><pre><code>    一个项目工程中源文件不计其数,这些源文件按照文件类型,    功能,模块,分别存放在不同的目录中,makefile文件定义了    一系列的规则来指定哪些文件需要先编译,    哪些文件需要后编译,哪些文件需要重新编译    包括更复杂的一些编译操作</code></pre><h1 id="三-内存空间的分布"><a href="#三-内存空间的分布" class="headerlink" title="三.内存空间的分布"></a>三.内存空间的分布</h1><pre><code>    C语言会把内存分为5个区域    (栈区 堆区 常量区 全局区 代码区)    ./a.out执行程序时,是由一个进程来执行程序的    进程的空间大小是4Gb,是由真实内存4Kb虚拟出来的    1GbKernel(内核)    ----------------------------    3Gb命令行参数以及环境变量                栈区(从上往下分配空间)                空白                堆区(从下往上分配空间)                静态区(全局区)未初始化的(系统会初始化成0)                静态区(全局区)已初始化的                常量区(只读区)Read Only                代码区    栈区不需要程序员管理,自己开辟,自己释放    堆区需要程序员管理,需要手动开辟,需要手动释放                (malloc calloc realloc free)    全局区全局变量/static关键字修饰的变量    常量区Read Only                char *p = &quot;Hello&quot;;                字符串常量&quot;Hello&quot;存储在常量区中    代码区程序员没有办法管理</code></pre><h1 id="四-全局变量和局部变量"><a href="#四-全局变量和局部变量" class="headerlink" title="四.全局变量和局部变量"></a>四.全局变量和局部变量</h1><pre><code>    局部变量        在某个函数内部定义或者块内定义的变量叫做局部变量        局部变量只能在函数内部或者块内使用        局部变量在函数之外是不可知的    全局变量        全局变量是定义在函数之外的,通常写到程序开头的位置        全局变量在整个程序中生命周期都是有效的        在任意函数内部都可以访问全局变量    注意:    全局变量和局部变量可以同名    如果出现了同名情况,那么在执行该函数时,优先使用局部变量    在该函数中全局变量被屏蔽    全局变量和局部变量在定义时的区别        当定义局部变量时,系统不会帮助初始化,            局部变量存储的是垃圾值        当定义全局变量时,系统会帮助初始化            int -&gt; 0;            char -&gt; &#39;\0&#39;;            pointer -&gt; NULL;    全局变量和局部变量存储空间的区别        全局变量 : 保存在内存的静态全局区,            占用的是静态的存储单元            当程序运行时就被创建了,            当程序结束时才被销毁        局部变量 : 保存在栈区中,            只有在局部变量所在的函数被调用时,            系统才会帮助分配存储单元,            当局部变量所在的函数调用结束时被释放</code></pre><h1 id="五-存储类型关键字"><a href="#五-存储类型关键字" class="headerlink" title="五.存储类型关键字"></a>五.存储类型关键字</h1><pre><code>    extern是C语言的关键字    修饰的是外部的意思    可以修饰函数,也可以修饰变量    1&gt;如果函数被extern关键字修饰了,        证明其他文件也可以使用这个函数        如果自己写的函数指向在本文件内使用,        不想被别的文件使用.可以使用static关键字修饰函数        2&gt;如果变量被extern关键字修饰了,需要注意不要初始化,        因为在Linux gcc环境下会报Error            3&gt;如果在本文件中的函数或者变量被extern关键字修饰了    说明该函数或者变量在别的文件中已经定义了,    在当前文件中使用    当编译器在编译程序时,如果碰到了extern关键字,那么会从    别的文件中查找相关的定义    static是C语言的关键字    修饰的是静态的(内部的)    可以修饰函数,也可以修饰变量    为了使全局变量可以安全的使用,请在定义全局变量时,        使用static关键字进行修饰    a.如果全局变量没有使用static关键字修饰,可以跨文件使用    A.如果全局变量使用static关键字修饰,仅限当前文件使用    b.如果局部变量没有使用static关键字修饰,        该局部变量存储在栈区中,该函数结束后被释放        每次调用函数该局部变量都会被重新初始化    B.如果局部变量使用static关键字修饰,        该局部变量存储在静态区中,当程序结束后被释放        只在第一次调用函数时进行初始化,也是唯一一次初始化        c.被static关键字修饰的内容,系统会默认进行初始化        总结 :     如果本文件内的函数或者变量想要让别的.c文件使用,        可以加extern    如果本文件内的函数或者变量不想让别的.c文件使用,        可以加static====================================================笔试题1.C语言中extern关键字是用来修饰什么的?    答 : extern关键字是用来修饰外部的        可以使用在函数或者变量中        extern修饰变量 : ......        extern修饰函数 : ......2.C语言中static关键字是用来修饰什么的?    答 : static关键字是用来修饰静态的        可以使用在函数或者变量中        static修饰函数 : ......        static修饰变量 : ......3.C语言中const关键字是用来修饰什么的?    答 : const关键字是用来修饰只读的        可以使用在变量或者指针中        const修饰变量 : ......        const修饰指针 : ......4.C语言中volatile关键字是用来修饰什么的    答 : volatile关键字是用来防止编译器优化的    volatile int pm_value;//接收pm2.5传感器数据的    volatile int pm_led = 0;//控制灯光的开关(0是关 1是开)    //pm_led = 1;//开灯    delay_ms(2000);//延时2s    pm_led = 0;//关灯    pm_value = get_value();//获取pm2.5的数据5.描述一下静态变量    静态的全局变量    静态的局部变量====================================================    容易混淆的声明================================</code></pre><h1 id="六-函数的关系"><a href="#六-函数的关系" class="headerlink" title="六.函数的关系"></a>六.函数的关系</h1><pre><code>    1.主函数调用功能函数    2.功能函数调用其他的功能函数    3.功能函数自己调用自己(递归函数)        递归函数    C语言是支持函数的递归,递归其实就是自己调用自己    注意 :     1.在写递归函数时最重要的就是退出条件    如果写的退出条件不清楚,那么递归函数肯定会出问题            2.在看别人写的递归程序时,递归次数不要太多    3.在项目中尽量不去使用递归,因为递归函数占用空间    递归函数可以解决的问题    数学 :             1.从1 + 2 + .. + 100            2.一个数的阶乘            3.斐波那契数列            4.杨辉三角    编程 :             1.栈式存储结构的问题            2.树状存储            3.汉诺塔游戏(河内塔)===================================    指针常量 常量指针    指针函数 函数指针 函数指针数组    指针数组 数组指针    指针 函数 数组    容易混淆的声明    const关键字    const关键字是用来修饰只读的(常量)        指针常量: 指针是常量    定义: int * const p;    特点: 指针的指向不能通过指针名进行改变,可以通过该指针修改指向空间的数据                当在程序中定义了指针常量,必须要有初始化    用处: 数组名    常量指针: 指针指向常量    定义: const int *p; const char *src; char const *src;    特点: 指针的指向能通过指针名进行改变,不可以通过该指针修改指向空间的数据    用处: 字符串操作    -------------------------------    const int *p;    int const *p;    int * const p;    const int * const p;    int const * const p;    -------------------------------<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">指针数组: 是一个数组,数组中的每一个成员都是相同类型的指针</span><br><span class="line">定义: <span class="type">int</span> *arr[<span class="number">4</span>];   </span><br><span class="line">  <span class="type">char</span> *str[<span class="number">10</span>]; str是一个指针数组,一共有<span class="number">10</span>个成员,str[<span class="number">0</span>] - str[<span class="number">9</span>]</span><br><span class="line"> 每个成员都是<span class="type">char</span> *类型的指针</span><br><span class="line">特点: arr是一个指针数组,一共有<span class="number">4</span>个成员,arr[<span class="number">0</span>] - arr[<span class="number">3</span>],每个成员都是<span class="type">int</span> *类型的指针</span><br><span class="line">  str是一个指针数组,一共有<span class="number">10</span>个成员,str[<span class="number">0</span>] - str[<span class="number">9</span>],每个成员都是<span class="type">char</span> *类型的指针</span><br><span class="line">用处: 命令行参数</span><br><span class="line"></span><br><span class="line">数组指针: 是一个指针,指针指向一个数组</span><br><span class="line">定义: <span class="type">int</span>(*p)[<span class="number">4</span>];p是一个指针,p指针指向一行有<span class="number">4</span>个成员,每个成员都是<span class="type">int</span>类型的数组</span><br><span class="line">特点:<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> brr[<span class="number">2</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">4</span>];</span><br><span class="line">p = arr;</span><br><span class="line">p = brr;</span><br><span class="line">用处: 用于和多维数组产生关系</span><br><span class="line"></span><br><span class="line">指针函数: 是一个函数,该函数的返回值是一个指针</span><br><span class="line">定义: <span class="type">char</span> *<span class="title function_">strcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line">  <span class="type">char</span> *<span class="title function_">strcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line">  <span class="type">void</span> *<span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span> size)</span>;</span><br><span class="line">  FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line">特点: 返回值是一个指针</span><br><span class="line">用处: 可以返回地址</span><br><span class="line"></span><br><span class="line">函数指针: 是一个指针,该指针指向函数</span><br><span class="line">定义: <span class="type">int</span> (*p)(<span class="type">int</span> ,<span class="type">int</span>);<span class="comment">//定义了函数指针p,该指针指向</span></span><br><span class="line">返回值为<span class="type">int</span>类型,参数为<span class="type">int</span> <span class="type">int</span>,这样的函数</span><br><span class="line">特点: 用来和函数产生关系的指针</span><br><span class="line">用处: 可以保存函数的地址(函数的入口地址)</span><br><span class="line"></span><br><span class="line">函数指针数组 : 是一个数组,数组中的每一个成员都是函数指针</span><br><span class="line">定义   : <span class="type">int</span> (*arr[<span class="number">4</span>])(<span class="type">int</span> , <span class="type">int</span>);</span><br><span class="line">-------------------------------------------------</span><br><span class="line">一.给了定义,用文字进行描述(注意 : 描述清楚)</span><br><span class="line"><span class="type">int</span> a;                     </span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>];                  </span><br><span class="line"><span class="type">int</span> *a;                    </span><br><span class="line"><span class="type">int</span> <span class="title function_">a</span><span class="params">(<span class="type">int</span> ,<span class="type">int</span>)</span>;           </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *a[<span class="number">4</span>];                  </span><br><span class="line"><span class="type">int</span> (*a)[<span class="number">4</span>];               </span><br><span class="line"><span class="type">int</span> *<span class="title function_">a</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;          </span><br><span class="line"><span class="type">int</span> (*a)(<span class="type">int</span>, <span class="type">int</span>);        </span><br><span class="line"><span class="type">int</span> (*a[<span class="number">4</span>])(<span class="type">int</span>, <span class="type">int</span>);  </span><br></pre></td></tr></table></figure>二.给了文字描述,使用特定的变量名进行定义 (a)(加 ; )三.给了英文描述,使用特定的变量名进行定义 (a)(审题 + 代码标准)a) 一个整型数（An integer）b) 一个指向整型数的指针（A pointer to an integer）c) 一个指向指针的的指针，它指向的指针是指向一个整型数（A pointer to a pointer to an integer）d) 一个有10个整型数的数组（An array of 10 integers）e) 一个有10个指针的数组，该指针是指向一个整型数的（An array of 10 pointers to integers）f) 一个指向有10个整型数数组的指针（A pointer to an array of 10 integers）g) 一个指向函数的指针，该函数有一个整型参数并返回一个整型数（A pointer to a function that takes an integer as an argument and returns an integer）h) 一个有10个指针的数组，该指针指向一个函数，该函数有一个整型参数并返回一个整型数（ An array of ten pointers to functions that take an integerargument and return an integer ） 答案是：a) int a; // An integerb) int *a; // A pointer to an integerc) int **a; // A pointer to a pointer to an integerd) int a[10]; // An array of 10 integerse) int *a[10]; // An array of 10 pointers to integersf) int (*a)[10]; // A pointer to an array of 10 integersg) int (*a)(int); // A pointer to a function a that takes an integer argument and returns an integerh) int (*a[10])(int); // An array of 10 pointers to functions that take an integer argument and return an integer====================================作业1.把今天讲过的内容完整的复习一遍2.复盘今天经过的内容(组长和组员)3.把命令行参数版本的计算器制作完成4.制作终端版本的cal日历(命令行参数)    ./a.out 月份 年份    //把这一年这一月的月份牌打印出来    例子 :        ./a.out 1 2023              一月 2023        日 一 二 三 四 五 六         1  2  3  4  5  6  7         8  9 10 11 12 13 14        15 16 17 18 19 20 21        22 23 24 25 26 27 28        29 30 31    1)找基准时间1900-1-1是星期一    2)使用蔡勒公式====================================</code></pre><h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">900</span>;<span class="comment">//被static关键字修饰的局部变量</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">100</span>;<span class="comment">//没有被static关键字修饰的局部变量</span></span><br><span class="line"></span><br><span class="line">a++;</span><br><span class="line">b++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">func();</span><br><span class="line">func();</span><br><span class="line">func();</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h1><pre><code>    const关键字是用来修饰只读的    被const关键字修饰的变量,只能通过变量名访问存储的数据    但是不能通过变量名修改存储的数据    const关键字在修饰时    const 数据类型 变量名;    数据类型 const 变量名;<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a = 9527;</span></span><br><span class="line">*p = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">#指针常量</span><br><span class="line">指针常量(指针是常量)</span><br><span class="line">定义 : <span class="type">int</span> * <span class="type">const</span> p;</span><br><span class="line">可以通过指针常量修改指向空间的数据,</span><br><span class="line">指针常量的指向不能通过指针名进行改变</span><br><span class="line"></span><br><span class="line">注意在定义指针常量时必须要有初始化</span><br><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>, b = <span class="number">9527</span>;</span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d &amp;a = %p\n&quot;</span>, a, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//*p = 12345;</span></span><br><span class="line">p = &amp;b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d &amp;a = %p\n&quot;</span>, a, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h1><pre><code>    常量指针(指针指向常量)    定义 : const int *p; 或者 int const *p;    常量指针的指向可以改变,    但是不能通过常量指针修改指向空间的数据<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>, b = <span class="number">9527</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d &amp;a = %p\n&quot;</span>, a, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//p = &amp;b;</span></span><br><span class="line">*p = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d &amp;a = %p\n&quot;</span>, a, &amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="指针数组与数组指针"><a href="#指针数组与数组指针" class="headerlink" title="指针数组与数组指针"></a>指针数组与数组指针</h1><pre><code>    指针数组    指针数组就是一个数组,    数组中的每一个成员都是相同类型的指针    定义 :         数据类型数组名[成员个数];        intarr[5];        charstr[10];        int *arr[5];        arr有5个成员,每个成员都是一个int *类型的指针*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"><span class="comment">//argc 和 argv是命令行参数</span></span><br><span class="line"><span class="comment">//argc代表命令行参数的个数</span></span><br><span class="line"><span class="comment">//argv代表命令行参数的每一个字符串</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;argc = %d\n&quot;</span>, argc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    指针数组        argv[2] 是一个指针 *argv[2]    简易版本的计算器    ./a.out 13 + 7    argc = 4;    argv[0] = &quot;./a.out&quot;    argv[1] = &quot;13&quot;num1 = atoi(argv[1]);    argv[2] = &quot;+&quot;    argv[3] = &quot;7&quot;num2 = atoi(argv[3]);    switch(*argv[2])    &#123;        case &#39;+&#39; :        case &#39;-&#39; :    &#125;    加 减 乘 取商 取余<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"><span class="comment">//argc 和 argv是命令行参数</span></span><br><span class="line"><span class="comment">//argc代表命令行参数的个数</span></span><br><span class="line"><span class="comment">//argv代表命令行参数的每一个字符串</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;argc = %d\n&quot;</span>, argc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    指针数组        int *arr[5];    数组指针        是一个指针,保存该类型数组的地址    定义 : int (*p)[5];定义了一个数组指针,该指针应当和一行有5个成员,    每个成员为int类型的数组产生关联<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="type">int</span> (*p)[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;arr[%d][%d] = %d\n&quot;, i, j, arr[i][j]);</span></span><br><span class="line"><span class="comment">//printf(&quot;*(*(arr+%d)+%d) = %d\n&quot;, i, j, *(*(arr+i)+j));</span></span><br><span class="line"><span class="comment">//printf(&quot;*(*(p+%d)+%d) = %d\n&quot;, i, j, *(*(p+i)+j));</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p[%d][%d] = %d\n&quot;</span>, i, j, p[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> (*p)[<span class="number">4</span>])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"></span><br><span class="line">print(arr);</span><br><span class="line"></span><br><span class="line">change(arr);</span><br><span class="line"></span><br><span class="line">print(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="指针函数与函数指针"><a href="#指针函数与函数指针" class="headerlink" title="指针函数与函数指针"></a>指针函数与函数指针</h1><pre><code>    指针函数        是一个函数,函数的返回值是一个指针    char *strcpy(char *dest, const char *src);    void *malloc(size_t size);<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    函数名是一个地址(函数名就是函数的入口地址)    指针函数        定义 : int *func(int , int);    函数指针        是一个指针,指针指向一个函数        定义 : int (*p)(int, int);<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> (*p)(<span class="type">int</span>, <span class="type">int</span>);<span class="comment">//定义了一个函数指针</span></span><br><span class="line"><span class="comment">//该指针应当和返回值类型为int类型,参数为int int的函数</span></span><br><span class="line"><span class="comment">//产生关系</span></span><br><span class="line"></span><br><span class="line">p = add;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, p(<span class="number">13</span>, <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//add(13, 7);</span></span><br><span class="line"><span class="comment">//printf(&quot;add = %p\n&quot;, add);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="typedef关键字"><a href="#typedef关键字" class="headerlink" title="typedef关键字"></a>typedef关键字</h1><pre><code>    typedef关键字    作用 : 用来定义类型的或者把已有的数据类型重命名的    typedef 已有的数据类型 别名;typedef void (*sighandler_t)(int);可以理解为typedef void(*)(int)      sighandler_t;定义了函数指针类型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> abc;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">abc abc = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(abc) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(abc));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;abc = %d\n&quot;</span>, abc);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ARR[<span class="number">5</span>];<span class="comment">//定义了数组类型</span></span><br><span class="line"><span class="comment">//typedef int[5] ARR;可以这样理解</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">ARR a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(a) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h1><pre><code>    函数指针数组        是一个数组,数组中的每个成员都是函数指针    定义 : int (*arr[4])(int, int);是一个函数指针数组,有4个成员,每个成员都是函数指针应当指向函数返回值类型为int,参数为int int的函数*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">dev</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> (*arr[<span class="number">4</span>])(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = add;</span><br><span class="line">arr[<span class="number">1</span>] = sub;</span><br><span class="line">arr[<span class="number">2</span>] = mul;</span><br><span class="line">arr[<span class="number">3</span>] = dev;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d](13, 7) = %d\n&quot;</span>, i, arr[i](<span class="number">13</span>, <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">init_player();<span class="comment">//初始化玩家</span></span><br><span class="line"></span><br><span class="line">print_player();<span class="comment">//打印玩家信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> liliang;</span><br><span class="line"><span class="type">int</span> zhili;</span><br><span class="line"><span class="type">int</span> minjie;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入玩家姓名 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入玩家性别 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;sex);</span><br><span class="line">srand(getpid());</span><br><span class="line">liliang = rand() % <span class="number">100</span>;</span><br><span class="line">zhili = rand() % <span class="number">100</span>;</span><br><span class="line">minjie = rand() % <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名 : %s\n&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别 : %c\n&quot;</span>, sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;力量 : %d\n&quot;</span>, liliang);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;智力 : %d\n&quot;</span>, zhili);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;敏捷 : %d\n&quot;</span>, minjie);</span><br><span class="line">flag = (liliang&gt;zhili?(liliang&gt;minjie?liliang:minjie):(zhili&gt;minjie?zhili:minjie));</span><br><span class="line"><span class="keyword">if</span>(flag == liliang)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是力量型英雄!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == zhili)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是智力型英雄!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是敏捷型英雄!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">trojan</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">init_player();<span class="comment">//初始化玩家</span></span><br><span class="line"></span><br><span class="line">trojan();<span class="comment">//木马程序</span></span><br><span class="line"></span><br><span class="line">print_player();<span class="comment">//打印玩家信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> liliang;</span><br><span class="line"><span class="type">int</span> zhili;</span><br><span class="line"><span class="type">int</span> minjie;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入玩家姓名 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入玩家性别 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;sex);</span><br><span class="line">srand(getpid());</span><br><span class="line">liliang = rand() % <span class="number">100</span>;</span><br><span class="line">zhili = rand() % <span class="number">100</span>;</span><br><span class="line">minjie = rand() % <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名 : %s\n&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别 : %c\n&quot;</span>, sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;力量 : %d\n&quot;</span>, liliang);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;智力 : %d\n&quot;</span>, zhili);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;敏捷 : %d\n&quot;</span>, minjie);</span><br><span class="line">flag = (liliang&gt;zhili?(liliang&gt;minjie?liliang:minjie):(zhili&gt;minjie?zhili:minjie));</span><br><span class="line"><span class="keyword">if</span>(flag == liliang)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是力量型英雄!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == zhili)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是智力型英雄!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是敏捷型英雄!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">trojan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> liliang = <span class="number">999</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> zhili = <span class="number">999</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> minjie = <span class="number">999</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">extern int liliang;</span></span><br><span class="line"><span class="comment">extern int zhili;</span></span><br><span class="line"><span class="comment">extern int minjie;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">liliang = <span class="number">999</span>;</span><br><span class="line">zhili = <span class="number">999</span>;</span><br><span class="line">minjie = <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">swap(&amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SWAP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SWAP_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"># 注意:在makefile文件中 $ 就是用来引用变量的</span><br><span class="line"># 注意:$@指的是引用上一条语句的 : 以左的内容</span><br><span class="line"># 注意:$^指的是引用上一条语句的 : 以右的内容</span><br><span class="line">main : main.o swap.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">#等价于 gcc -o main main.o swap.o</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o main</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">trojan</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">init_player();<span class="comment">//初始化玩家</span></span><br><span class="line"></span><br><span class="line">trojan();<span class="comment">//木马程序</span></span><br><span class="line"></span><br><span class="line">print_player();<span class="comment">//打印玩家信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> sex;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> liliang;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> zhili;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> minjie;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_player</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入玩家姓名 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入玩家性别 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;sex);</span><br><span class="line">srand(getpid());</span><br><span class="line">liliang = rand() % <span class="number">100</span>;</span><br><span class="line">zhili = rand() % <span class="number">100</span>;</span><br><span class="line">minjie = rand() % <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_player</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名 : %s\n&quot;</span>, name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别 : %c\n&quot;</span>, sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;力量 : %d\n&quot;</span>, liliang);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;智力 : %d\n&quot;</span>, zhili);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;敏捷 : %d\n&quot;</span>, minjie);</span><br><span class="line">flag = (liliang&gt;zhili?(liliang&gt;minjie?liliang:minjie):(zhili&gt;minjie?zhili:minjie));</span><br><span class="line"><span class="keyword">if</span>(flag == liliang)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是力量型英雄!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag == zhili)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是智力型英雄!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;该玩家是敏捷型英雄!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">trojan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//extern int liliang = 999;</span></span><br><span class="line"><span class="comment">//extern int zhili = 999;</span></span><br><span class="line"><span class="comment">//extern int minjie = 999;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//extern int liliang;</span></span><br><span class="line"><span class="comment">//extern int zhili;</span></span><br><span class="line"><span class="comment">//extern int minjie;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//liliang = 999;</span></span><br><span class="line"><span class="comment">//zhili = 999;</span></span><br><span class="line"><span class="comment">//minjie = 999;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_12day</title>
      <link href="/2023/02/16/embsky/03c/03c_12day/"/>
      <url>/2023/02/16/embsky/03c/03c_12day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-29<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    存储类的关键字    extern : 修饰外部的,可以使用在变量或者函数            static : 修饰静态的,可以使用在变量或者函数    关键字在笔试题中的考法    容易混淆的声明        常量指针const int *p; int const *p;        指针常量int * const p;        指针数组int *arr[3];            命令行参数 :             可以在执行可执行程序时在可执行文件名后加入            参数        数组指针int (*p)[3];        指针函数int *func(int , int);        函数指针int (*p)(int, int);        函数指针数组        typedef    函数的递归<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">main();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*    函数的递归        */<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)<span class="comment">//递归函数的退出条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> num + func(num - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//用于接收返回值的变量</span></span><br><span class="line">num = func(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*    函数的递归    斐波那契数列    1 1 2 3 5 8 13 21 34 ....    一个数列从第3项开始,每一项都等于前两项的和*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">0</span> || num == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> func(num - <span class="number">1</span>) + func(num - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; <span class="number">20</span>; i++)<span class="comment">//求斐波那契数列的前20项</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d] %d\n&quot;</span>, i, func(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">itoa</span><span class="params">(<span class="type">int</span> data, <span class="type">char</span> str[])</span>;</span><br><span class="line"><span class="comment">//在内核驱动的课程中需要手写itoa函数,只需要考虑正数即可</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">itoa</span><span class="params">(<span class="type">int</span> data, <span class="type">char</span> str[])</span><span class="comment">//12</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(data &lt; <span class="number">10</span>)<span class="comment">//判断转换的数据是否只有个位</span></span><br><span class="line">&#123;</span><br><span class="line">str[<span class="number">0</span>] = data + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">str[<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">itoa(data / <span class="number">10</span>, str);<span class="comment">//递归调用</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++);<span class="comment">//寻找&#x27;\0&#x27;的位置</span></span><br><span class="line">str[i] = data % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">str[i + <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line">itoa(num, arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %s\n&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">&quot;%d-%f-%c-%s\n&quot;</span>, <span class="number">9527</span>, <span class="number">3.14</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str = %s\n&quot;</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="C语言中复合型的数据类型-结构体-共用体-枚举"><a href="#C语言中复合型的数据类型-结构体-共用体-枚举" class="headerlink" title="C语言中复合型的数据类型 : 结构体 共用体 枚举"></a>C语言中复合型的数据类型 : 结构体 共用体 枚举</h1><h2 id="结构体-可以定义出不同类型的成员-存储不同类型的数据"><a href="#结构体-可以定义出不同类型的成员-存储不同类型的数据" class="headerlink" title="结构体 : 可以定义出不同类型的成员,存储不同类型的数据"></a>结构体 : 可以定义出不同类型的成员,存储不同类型的数据</h2><pre><code>    当在定义结构体类型时需要使用C语言的关键字 : struct    如果想要定义结构体类型的变量\数组\指针,    那么需要先定义结构体1.结构体类型的定义    struct tag//struct是关键字,在关键字之后写tag标签    &#123;//tag标签的命名需要见名生义        内部写的是结构体成员的定义;    &#125;;//注意结构体定义结束之后需要有 ; 结尾-----------------------------------    注意:    1.struct关键字之后可以加标签,也可以不加标签    加标签 : 不光可以在结构体定义之后加变量名,定义全局变量            也可以在函数内部通过 struct 标签 变量名;的方式            定义局部变量    不加标签 : 只能在定义结构体之后加变量名,定义全局变量            不能在别的函数中定义局部变量(因为没有标签)    2.定义结构体时,可以定义在函数之外,也可以定义在函数之内    函数之外 : 凡是在结构体定义之下的函数                都可以使用这个结构体    函数之内 : 该结构体类型只能是在该函数内使用    3.当定义结构体时不要给结构体的成员进行初始化-----------------------------------2.定义结构体类型的变量    数据类型变量名;    inti;    floatf;    charc;    struct stus;3.访问成员    不能直接的给结构体的成员赋值,    需要使用结构体类型的变量访问成员,进行赋值    需要使用分量运算符 : . -&gt;    如果是结构体类型的变量访问成员,需要使用        变量名.成员 的方式访问    如果是结构体类型的指针访问成员,需要使用        指针名-&gt;成员 的方式访问4.结构体类型变量的初始化    数据类型变量名=&#123;数值,数值&#125;;    struct stus=&#123;10086, &quot;yidong&quot;, 79&#125;;5.结构体类型变量的使用    相同类型的结构体类型的变量,可以直接赋值    不同类型的结构体类型的变量,即使结构体成员相同,        也不能赋值6.通过sizeof计算结构体的大小    结构体的大小相当于结构体成员大小的总和    也会考虑字节对齐的问题    (默认情况下会以结构体中最大的数据类型作为对齐的标准)    (主要是为了方便内存的管理)7.结构体类型的指针    数据类型指针名;    int *p;    char *p;    struct stu *p;*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//定义了学生的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//定义了学生的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span><span class="comment">//定义了结构体类型的变量</span></span><br><span class="line"></span><br><span class="line">s.id = <span class="number">10086</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(s.name, <span class="string">&quot;yidong&quot;</span>);</span><br><span class="line"><span class="comment">//strcpy(s.name, &quot;yidong&quot;);</span></span><br><span class="line"><span class="comment">//s.name = &quot;yidong&quot;;</span></span><br><span class="line">s.math = <span class="number">79</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.id = %d\n&quot;</span>, s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.name = %s\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.math = %d\n&quot;</span>, s.math);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>//定义了学生的结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;S;<span class="comment">//S是struct stu结构体类型的变量,并且是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">S.id = <span class="number">10010</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(S.name, <span class="string">&quot;liantong&quot;</span>);</span><br><span class="line">S.math = <span class="number">59</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;S.id = %d\n&quot;</span>, S.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;S.name = %s\n&quot;</span>, S.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;S.math = %d\n&quot;</span>, S.math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span><span class="comment">//定义了结构体类型的变量</span></span><br><span class="line"></span><br><span class="line">s.id = <span class="number">10086</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(s.name, <span class="string">&quot;yidong&quot;</span>);</span><br><span class="line"><span class="comment">//strcpy(s.name, &quot;yidong&quot;);</span></span><br><span class="line"><span class="comment">//s.name = &quot;yidong&quot;;</span></span><br><span class="line">s.math = <span class="number">79</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.id = %d\n&quot;</span>, s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.name = %s\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.math = %d\n&quot;</span>, s.math);</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id = <span class="number">9527</span>;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;S;<span class="comment">//S是结构体类型的变量,并且是全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">S.id = <span class="number">10010</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(S.name, <span class="string">&quot;liantong&quot;</span>);</span><br><span class="line">S.math = <span class="number">59</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;S.id = %d\n&quot;</span>, S.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;S.name = %s\n&quot;</span>, S.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;S.math = %d\n&quot;</span>, S.math);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//struct s;//定义了结构体类型的变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s.id = 10086;</span></span><br><span class="line"><span class="comment">//sprintf(s.name, &quot;yidong&quot;);</span></span><br><span class="line"><span class="comment">//strcpy(s.name, &quot;yidong&quot;);</span></span><br><span class="line"><span class="comment">//s.name = &quot;yidong&quot;;</span></span><br><span class="line"><span class="comment">//s.math = 79;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;s.id = %d\n&quot;, s.id);</span></span><br><span class="line"><span class="comment">//printf(&quot;s.name = %s\n&quot;, s.name);</span></span><br><span class="line"><span class="comment">//printf(&quot;s.math = %d\n&quot;, s.math);</span></span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span><span class="comment">//定义了结构体类型的变量</span></span><br><span class="line"></span><br><span class="line">s.id = <span class="number">10086</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(s.name, <span class="string">&quot;yidong&quot;</span>);</span><br><span class="line">s.math = <span class="number">79</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.id = %d\n&quot;</span>, s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.name = %s\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.math = %d\n&quot;</span>, s.math);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s.id);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s.math);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.id = %d\n&quot;</span>, s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.name = %s\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;s.math = %d\n&quot;</span>, s.math);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="number">10086</span>, <span class="string">&quot;yidong&quot;</span>, <span class="number">79</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu1</span> <span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;new, &amp;s, <span class="keyword">sizeof</span>(s));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">new.id = s.id;</span></span><br><span class="line"><span class="comment">strcpy(new.name, s.name);</span></span><br><span class="line"><span class="comment">new.math = s.math;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;new.id = %d\n&quot;</span>, new.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;new.name = %s\n&quot;</span>, new.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;new.math = %d\n&quot;</span>, new.math);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">28</span>];</span><br><span class="line"><span class="type">int</span> math;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span> =</span> &#123;<span class="number">10086</span>, <span class="string">&quot;yidong&quot;</span>, <span class="number">79</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(s) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(struct stu) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="type">long</span> l;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(s) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(struct stu) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> stu));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.c = %p\n&quot;</span>, &amp;s.c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.s = %p\n&quot;</span>, &amp;s.s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.i = %p\n&quot;</span>, &amp;s.i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> wuli;</span><br><span class="line"><span class="type">int</span> zhili;</span><br><span class="line"><span class="type">int</span> minjie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> JY s)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="keyword">struct</span> JY *p)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> JY s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名 : %s\n&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别 : %c\n&quot;</span>, s.sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;武力 : %d\n&quot;</span>, s.wuli);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;智力 : %d\n&quot;</span>, s.zhili);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;敏捷 : %d\n&quot;</span>, s.minjie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="keyword">struct</span> JY *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p-&gt;name);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;p-&gt;sex);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;wuli);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;zhili);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;minjie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span> <span class="title">s</span> =</span> &#123;<span class="string">&quot;yangguo&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">99</span>, <span class="number">90</span>, <span class="number">80</span>&#125;;</span><br><span class="line"></span><br><span class="line">print(s);<span class="comment">//通过print函数打印玩家信息</span></span><br><span class="line"></span><br><span class="line">change(&amp;s);<span class="comment">//通过change函数改变玩家信息</span></span><br><span class="line"></span><br><span class="line">print(s);<span class="comment">//通过print函数打印玩家信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> wuli;</span><br><span class="line"><span class="type">int</span> zhili;</span><br><span class="line"><span class="type">int</span> minjie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//struct JY *p;//定义了结构体类型的指针</span></span><br><span class="line"><span class="comment">//指针没有实际的指向,不能这样使用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span> *<span class="title">p</span> =</span> &amp;s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(p-&gt;name, <span class="string">&quot;guojing&quot;</span>);</span><br><span class="line">p-&gt;sex = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">p-&gt;wuli = <span class="number">100</span>;</span><br><span class="line">p-&gt;zhili = <span class="number">59</span>;</span><br><span class="line">p-&gt;minjie = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">管理系统</span></span><br><span class="line"><span class="comment">//学生 老师 图书 火车票 菜单 旅馆 殡仪馆</span></span><br><span class="line"><span class="comment">增 删 改 查</span></span><br><span class="line"><span class="comment">打印数据</span></span><br><span class="line"><span class="comment">增加成员</span></span><br><span class="line"><span class="comment">删除成员</span></span><br><span class="line"><span class="comment">修改成员</span></span><br><span class="line"><span class="comment">查找成员</span></span><br><span class="line"><span class="comment">成员排序</span></span><br><span class="line"><span class="comment">数据存储</span></span><br><span class="line"><span class="comment">读取数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct cir</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int x;</span></span><br><span class="line"><span class="comment">int y;</span></span><br><span class="line"><span class="comment">int r;</span></span><br><span class="line"><span class="comment">int color;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span>//</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> sex;</span><br><span class="line"><span class="type">int</span> wuli;</span><br><span class="line"><span class="type">int</span> zhili;</span><br><span class="line"><span class="type">int</span> minjie;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> JY *s)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="keyword">struct</span> JY *p)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> JY *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名 : %s\n&quot;</span>, s[i].name);<span class="comment">//(s+i)-&gt;name</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;性别 : %c\n&quot;</span>, s[i].sex);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;武力 : %d\n&quot;</span>, s[i].wuli);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;智力 : %d\n&quot;</span>, s[i].zhili);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;敏捷 : %d\n&quot;</span>, s[i].minjie);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;========================\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="keyword">struct</span> JY *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p[i].name);</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;p[i].sex);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i].wuli);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i].zhili);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i].minjie);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">JY</span> <span class="title">s</span>[3] =</span> &#123;&#123;<span class="string">&quot;yangguo&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">99</span>, <span class="number">90</span>, <span class="number">80</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;guojing&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">95</span>, <span class="number">59</span>, <span class="number">70</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;zhangwuji&quot;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">98</span>, <span class="number">95</span>, <span class="number">90</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">print(s);<span class="comment">//通过print函数打印玩家信息</span></span><br><span class="line"></span><br><span class="line">change(s);<span class="comment">//通过change函数改变玩家信息</span></span><br><span class="line"></span><br><span class="line">print(s);<span class="comment">//通过print函数打印玩家信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="共用体-联合"><a href="#共用体-联合" class="headerlink" title="共用体(联合)"></a>共用体(联合)</h2><pre><code>    union是C语言中的关键字1.共用体的含义    共用体的成员共用同一块儿存储空间    (使用一块儿存储空间管理不同的数据类型)2.共用体的定义    union tag//tag是标签    &#123;        共用体成员的定义;    &#125;;//最后需要加 ; 结尾3.和结构体不同的地方    1&gt;结构体中每个成员都会占用独立的存储空间    共用体中每个成员都会占用相同的存储空间    2&gt;结构体的大小是每个成员大小的和的基础上加入字节对齐    共用体的大小以共用体成员中最大的成员大小为准4.大端格式和小端格式    在硬件的平台中是分为大端格式和小端格式的    X86/英特尔架构小端格式    高字节的数据存放在高地址上,低字节的数据存放在低地址上    (高对高,低对低)    例子 : 在小端格式上存储一个十六进制的数据0x12345678    地址数据    0x10000x78    0x10010x56    0x10020x34    0x10030x12    ARM架构-&gt;ARM系列大端格式(现在既支持大端也支持小端)    高字节的数据存放在低地址上,低字节的数据存放在高地址上    (高对低,低对高)    例子 : 在大端格式上存储一个十六进制的数据0x12345678    地址数据    0x10000x12    0x10010x34    0x10020x56    0x10030x78可以使用共用体测试当前的机器是大端格式还是小端格式=========================笔试题1.什么是大端格式?什么是小端格式?2.设计一个程序测试当前的机器是大端格式还是小端格式=========================<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">long</span> l;</span><br><span class="line"><span class="type">float</span> f;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">short</span> s;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">long</span> l;</span><br><span class="line"><span class="type">float</span> f;</span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span> <span class="title">u</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(struct S) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> S));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(union U) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">union</span> U));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s = %p\n&quot;</span>, &amp;s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.c = %p\n&quot;</span>, &amp;s.c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.s = %p\n&quot;</span>, &amp;s.s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.i = %p\n&quot;</span>, &amp;s.i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.l = %p\n&quot;</span>, &amp;s.l);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;s.f = %p\n&quot;</span>, &amp;s.f);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u = %p\n&quot;</span>, &amp;u);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u.c = %p\n&quot;</span>, &amp;u.c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u.s = %p\n&quot;</span>, &amp;u.s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u.i = %p\n&quot;</span>, &amp;u.i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u.l = %p\n&quot;</span>, &amp;u.l);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u.f = %p\n&quot;</span>, &amp;u.f);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;u.d = %p\n&quot;</span>, &amp;u.d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">char</span> c[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span> <span class="title">u</span>;</span></span><br><span class="line"></span><br><span class="line">u.i = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.i = %d\n&quot;</span>, u.i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.c[0] = %d-%p\n&quot;</span>, u.c[<span class="number">0</span>], &amp;u.c[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.c[1] = %d-%p\n&quot;</span>, u.c[<span class="number">1</span>], &amp;u.c[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.c[2] = %d-%p\n&quot;</span>, u.c[<span class="number">2</span>], &amp;u.c[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.c[3] = %d-%p\n&quot;</span>, u.c[<span class="number">3</span>], &amp;u.c[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">score</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">float</span> f;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">score</span> <span class="title">math</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生的ID : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生姓名 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s.name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入学生的成绩 : \n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(1.整型2.浮点型)\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;flag);</span><br><span class="line"><span class="keyword">switch</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s.math.i); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;s.math.f); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID : %d\n&quot;</span>, s.id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;姓名 : %s\n&quot;</span>, s.name);</span><br><span class="line"><span class="keyword">switch</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">printf</span>(<span class="string">&quot;分数 : %d\n&quot;</span>, s.math.i); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">printf</span>(<span class="string">&quot;分数 : %.1f\n&quot;</span>, s.math.f); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//需要在无符号的环境中进行使用位域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span>//位域/位段/位字段(在底层内核驱动时会使用的内容)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> x : <span class="number">1</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> y : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> z : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> <span class="title">s</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span> <span class="title">u</span>;</span></span><br><span class="line"></span><br><span class="line">u.c = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.s.x = %d\n&quot;</span>, u.s.x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.s.y = %d\n&quot;</span>, u.s.y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u.s.z = %d\n&quot;</span>, u.s.z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>位域<br><img src="/images/03c/12day/08union/%E4%BD%8D%E5%9F%9F.png"><br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA0 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA1 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA2 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA3 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA4 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA5 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA6 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA7 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA8 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA9 : <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA10: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA11: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA12: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA13: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA14: <span class="number">2</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> PA15: <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入功能0-&gt;00</span></span><br><span class="line"><span class="comment">输出功能1-&gt;01</span></span><br><span class="line"><span class="comment">复用功能2-&gt;10</span></span><br><span class="line"><span class="comment">模拟功能3-&gt;11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO</span> <span class="title">P</span>;</span></span><br><span class="line"></span><br><span class="line">P.PA0 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">P.PA10 = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_09day</title>
      <link href="/2023/02/16/embsky/03c/03c_09day/"/>
      <url>/2023/02/16/embsky/03c/03c_09day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-26<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    多维数组        二维数组            可以存储多个相同类型的数据            可以抽象成有行有列的形式            数据类型 数组名[行数][列数];            int arr[2][3];            一共有6个成员            arr[0][0] arr[0][1] arr[0][2]            arr[1][0] arr[1][1] arr[1][2]int arr[3][5] = &#123;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15&#125;;现在想要找出数值为7的成员            数组名 + 下标arr[1][1]            数组名 + 偏移量*(*(arr + 1) + 1)            通过sizeof运算符计算            int arr[3][5];            sizeof(arr[0][0]) = 4 = 一个成员的大小            sizeof(arr[0]) = 20 = 一行的大小            sizeof(arr) = 60 = 整个数组的大小            sizeof(arr)/sizeof(arr[0][0]) = 15 = 成员个数            sizeof(arr)/sizeof(arr[0]) = 3 = 行数            sizeof(arr[0])/sizeof(arr[0][0]) = 5 = 列数            通过打印每个成员的地址发现            二维数组的成员也是占用了连续的存储空间            二维数组的数组名相当于是数组首行的地址            (一维数组的数组名相当于是数组首成员的地址)字符数组和字符指针    在C语言中没有字符串类型    在C语言中需要使用字符数组来存储字符串数据    字符数组1.字符数组的含义    是用来存储一组字符数据的2.字符数组的定义    数据类型数组名[成员个数];    chararr[10];3.字符数组的初始化    数据类型数组名[成员个数] = &#123;数值,数值&#125;;    char arr[10] = &#123;0&#125;;//给数组的10个成员都初始化成0    char arr[5] = &#123;1,2,3,4,5&#125;;    char arr[5] = &#123;&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;&#125;;    char arr[5] = &#123;&#39;\0&#39;&#125;;    char arr[5] = &#123;&#39;0&#39;&#125;;    char arr[10] = &quot;easthome&quot;;    arr[0] = &#39;e&#39; arr[1] = &#39;a&#39; ... arr[7] = &#39;e&#39;     arr[8] = &#39;\0&#39;    char arr[10] = &#123;&quot;easthome&quot;&#125;;注意 :     当通过scanf(&quot;%c&quot;)的方式给字符数组录入字符数据时    需要注意回车(&#39;\n&#39;),因为回车会被当作换行符保存到    字符数组中    当通过scanf(&quot;%s&quot;)的方式给字符数组录入字符数据时    需要注意空格,因为空格会被当作字符串的截断标志    当通过scanf(&quot;%s&quot;)的方式给字符数组录入字符数据时    需要注意数组越界的问题</code></pre><h1 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h1><pre><code>1.字符指针的含义    字符指针也是指针,是用来保存地址的2.字符数组和字符指针    char arr[10] = &quot;easthome&quot;;    char *p = &quot;easthome&quot;;    字符数组在初始化的时候,是把&quot;easthome&quot;字符串中的字符    一个一个的保存到字符数组的成员中    字符指针在初始化的时候,指针p是保存了&quot;easthome&quot;    这个字符串常量的首地址    C语言会把内存分为5大区域    栈区    堆区    常量区(read only)    全局区    代码区<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化10个成员的字符数组</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %c\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化10个成员的字符数组</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化10个成员的字符数组</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %c-%d\n&quot;</span>, i, arr[i], arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化10个成员的字符数组</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %s\n&quot;</span>, arr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">%d-&gt;int</span></span><br><span class="line"><span class="comment">%f-&gt;double</span></span><br><span class="line"><span class="comment">%c-&gt;int</span></span><br><span class="line"><span class="comment">%s-&gt;char *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;easthome&quot;</span>;</span><br><span class="line"><span class="type">char</span> brr[<span class="number">10</span>] = &#123;<span class="string">&quot;easthome&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %s\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;brr = %s\n&quot;</span>, brr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;easthome&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;easthome&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %s\n&quot;</span>, arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> arr[<span class="number">10</span>] = <span class="string">&quot;easthome&quot;</span>;<span class="comment">//可以,数组成员保存每个字符</span></span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;easthome&quot;</span>;<span class="comment">//可以,指针保存字符串常量的首地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %s\n&quot;</span>, arr);<span class="comment">//可以打印</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);<span class="comment">//可以打印</span></span><br><span class="line">p++;<span class="comment">//可以,指针保存的是字符串常量首地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %s\n&quot;</span>, p);<span class="comment">//自增之后保存下一个成员的地址</span></span><br><span class="line">arr++;<span class="comment">//不可以,数组名不能做自增或者赋值运算</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %s\n&quot;</span>, arr);</span><br><span class="line"><span class="comment">//arr[0] = &#x27;E&#x27;;//可以,实际上是修改了数组首成员的数据</span></span><br><span class="line"><span class="comment">//printf(&quot;arr = %s\n&quot;, arr);</span></span><br><span class="line"><span class="comment">//p[0] = &#x27;E&#x27;;//不可以,指针保存的是常量区地址(readonly)</span></span><br><span class="line"><span class="comment">//printf(&quot;p = %s\n&quot;, p);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>常量区<br><img src="/images/03c/09day/%E5%B8%B8%E9%87%8F%E5%8C%BA.png"><br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> src[<span class="number">10</span>] = <span class="string">&quot;easthome&quot;</span>;</span><br><span class="line"><span class="type">char</span> dest[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;strcpy = %s\n&quot;</span>, <span class="built_in">strcpy</span>(dest, src));</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;dest = %s\n&quot;, dest);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//strcpy(dest, src);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;dest = %s\n&quot;, dest);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>/*调用strcpy函数时,第一个参数必须是一个字符数组,    第二个参数可以是字符数组\字符指针\字符串常量调用strcat函数时,第一个参数必须是一个字符数组,    第二个参数可以是字符数组\字符指针\字符串常量*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//char src[10] = &quot;easthome&quot;;</span></span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;embsky!&quot;</span>;</span><br><span class="line"><span class="type">char</span> dest[<span class="number">32</span>] = <span class="string">&quot;embsky&quot;</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ret = strcmp(src, dest);</span></span><br><span class="line">ret = <span class="built_in">strcmp</span>(<span class="string">&quot;embsky&quot;</span>, <span class="string">&quot;easthome&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ret = %d\n&quot;</span>, ret);</span><br><span class="line"><span class="comment">//printf(&quot;strlen = %ld\n&quot;, strlen(&quot;Hello World!&quot;));</span></span><br><span class="line"><span class="comment">//printf(&quot;strlen = %ld\n&quot;, strlen(dest));</span></span><br><span class="line"><span class="comment">//printf(&quot;strlen = %ld\n&quot;, strlen(src));</span></span><br><span class="line"><span class="comment">//printf(&quot;dest = %s\n&quot;, dest);</span></span><br><span class="line"><span class="comment">//strcpy(dest, &quot;embsky&quot;);</span></span><br><span class="line"><span class="comment">//strcat(dest, src);</span></span><br><span class="line"><span class="comment">//printf(&quot;dest = %s\n&quot;, dest);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*重新实现strcpy strcat strcmp strlen    字符串的结束标志是&#39;\0&#39;<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strncpy</span> <span class="built_in">strncat</span> <span class="built_in">strncmp</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> dest[<span class="number">5</span>] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(dest, src);</span><br><span class="line"><span class="built_in">strncpy</span>(dest, src, <span class="number">5</span>);</span><br></pre></td></tr></table></figure>*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">mystrcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">mystrcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mystrcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">mystrlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">mystrcpy</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; src[i] != <span class="string">&#x27;\0&#x27;</span>; i++)<span class="comment">//可以把有效的字符遍历</span></span><br><span class="line">dest[i] = src[i];</span><br><span class="line">dest[i] = src[i];<span class="comment">//为了拷贝&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">mystrcat</span><span class="params">(<span class="type">char</span> *dest, <span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; dest[i] != <span class="string">&#x27;\0&#x27;</span>; i++)<span class="comment">//用来找字符串的&#x27;\0&#x27;</span></span><br><span class="line">;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; src[j] != <span class="string">&#x27;\0&#x27;</span>; i++,j++)</span><br><span class="line">dest[i] = src[j];</span><br><span class="line">dest[i] = src[j];<span class="comment">//这次赋值是为了拷贝&#x27;\0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">mystrcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s1[i] == s2[i] &amp;&amp; s1[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">;</span><br><span class="line"><span class="comment">/////如果程序可以执行到此处</span></span><br><span class="line"><span class="keyword">return</span> s1[i] - s2[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">mystrlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *src = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> dest[<span class="number">32</span>] = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mystrcpy = %s\n&quot;</span>, mystrcpy(dest, src));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mystrcat = %s\n&quot;</span>, mystrcat(dest, src));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mystrcmp = %d\n&quot;</span>, mystrcmp(dest, src));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mystrlen = %ld\n&quot;</span>, mystrlen(dest));</span><br><span class="line"><span class="comment">//printf(&quot;dest = %s\n&quot;, dest);</span></span><br><span class="line"><span class="comment">//mystrcpy(dest, src);</span></span><br><span class="line"><span class="comment">//printf(&quot;dest = %s\n&quot;, dest);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *p = <span class="string">&quot;root:x:0:0:root:/root:/bin/bash&quot;</span>;</span><br><span class="line"><span class="comment">//需要大家把/etc/passwd文件读出的内容进行解析</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; p[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i] != <span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_10day</title>
      <link href="/2023/02/16/embsky/03c/03c_10day/"/>
      <url>/2023/02/16/embsky/03c/03c_10day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-27<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>1.求10000-11000中所有的质数2.冒泡法排序3.实现strcat    char *mystrcat(char *dest, const char *src); 字符数组和字符指针    在C语言中是没有字符串类型的,    想要存储字符串数据可以使用字符数组    数组越界的问题    ----------------------------------    char *p = &quot;Hello&quot;;    字符串的操作    strcpy strcat strcmp strlen    mystrcpy mystrcat mystrcmp mystrlen    ----------------------------------    mystrncpy mystrncat mystrncmp    ----------------------------------    char dest[2];    char *src = &quot;Hello World&quot;;    strcpy(dest, src);    strncpy用多文件的形式实现一下冒泡法排序main.c sort.c sort.h makefilevim * -p(以标签页的形式打开多文件)切换文件 ctrl + alt + pgup/pgdn<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SORT_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SORT_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>==========================作业:1.把今天讲过的内容完完整整的复习一遍2.把之前讲过的功能函数都拆成多文件的形式写一遍    1)子弹的程序    2)排序(冒泡法 选择法 ...)    3)字符串操作函数(mystrcpy mystrcat mystrcmp mystrlen)    4)atoi函数功能3.把五子棋游戏拆成多文件的形式实现==========================</code></pre><h1 id="一-写C语言程序的四个阶段"><a href="#一-写C语言程序的四个阶段" class="headerlink" title="一.写C语言程序的四个阶段"></a>一.写C语言程序的四个阶段</h1><pre><code>第一阶段只写一个.c文件,在.c文件中只写一个main函数            把所有功能都堆到main函数中第二阶段只写一个.c文件,在.c文件中除了main函数以外            封装了其他的功能函数    函数的声明函数的返回值类型 函数名(参数列表);//该处的参数指的是形参    函数的实现函数的返回值类型 函数名(参数列表)//该处的参数指的是形参&#123;    功能实现的代码&#125;    函数的调用函数名(参数);//该处的参数指的是实际参数第三阶段以项目工程的形式编写程序,以多文件的形式            main.c存放主函数和功能函数的调用            func.c存放功能函数的实现            func.h存放功能函数的声明以及各种定义            makefile存放的是编译规则第四阶段把功能函数的实现封装成库文件            静态库和动态库</code></pre><h1 id="二-makefile文件的简介"><a href="#二-makefile文件的简介" class="headerlink" title="二.makefile文件的简介"></a>二.makefile文件的简介</h1><pre><code>    一个项目工程中源文件不计其数,这些源文件按照文件类型,    功能,模块,分别存放在不同的目录中,makefile文件定义了    一系列的规则来指定哪些文件需要先编译,    哪些文件需要后编译,哪些文件需要重新编译    包括更复杂的一些编译操作</code></pre><h1 id="三-内存空间的分布"><a href="#三-内存空间的分布" class="headerlink" title="三.内存空间的分布"></a>三.内存空间的分布</h1><pre><code>    C语言会把内存分为5个区域    (栈区 堆区 常量区 全局区 代码区)    ./a.out执行程序时,是由一个进程来执行程序的    进程的空间大小是4Gb,是由真实内存4Kb虚拟出来的    1GbKernel(内核)    ----------------------------    3Gb命令行参数以及环境变量                栈区(从上往下分配空间)                空白                堆区(从下往上分配空间)                静态区(全局区)未初始化的(系统会初始化成0)                静态区(全局区)已初始化的                常量区(只读区)Read Only                代码区    栈区不需要程序员管理,自己开辟,自己释放    堆区需要程序员管理,需要手动开辟,需要手动释放                (malloc calloc realloc free)    全局区全局变量/static关键字修饰的变量    常量区Read Only                char *p = &quot;Hello&quot;;                字符串常量&quot;Hello&quot;存储在常量区中    代码区程序员没有办法管理</code></pre><h1 id="四-全局变量和局部变量"><a href="#四-全局变量和局部变量" class="headerlink" title="四.全局变量和局部变量"></a>四.全局变量和局部变量</h1><pre><code>    局部变量        在某个函数内部定义或者块内定义的变量叫做局部变量        局部变量只能在函数内部或者块内使用        局部变量在函数之外是不可知的    全局变量        全局变量是定义在函数之外的,通常写到程序开头的位置        全局变量在整个程序中生命周期都是有效的        在任意函数内部都可以访问全局变量    注意:    全局变量和局部变量可以同名    如果出现了同名情况,那么在执行该函数时,优先使用局部变量    在该函数中全局变量被屏蔽    全局变量和局部变量在定义时的区别        当定义局部变量时,系统不会帮助初始化,            局部变量存储的是垃圾值        当定义全局变量时,系统会帮助初始化            int -&gt; 0;            char -&gt; &#39;\0&#39;;            pointer -&gt; NULL;    全局变量和局部变量存储空间的区别        全局变量 : 保存在内存的静态全局区,            占用的是静态的存储单元            当程序运行时就被创建了,            当程序结束时才被销毁        局部变量 : 保存在栈区中,            只有在局部变量所在的函数被调用时,            系统才会帮助分配存储单元,            当局部变量所在的函数调用结束时被释放/*    全局变量和局部变量    其实在查看一个变量可以通过3个属性进行查看    存储区域 生命周期 作用域*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">9527</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">全局变量</span></span><br><span class="line"><span class="comment">存储区域全局区</span></span><br><span class="line"><span class="comment">作用域整个文件内有效</span></span><br><span class="line"><span class="comment">生命周期从定义开始到程序结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">局部变量</span></span><br><span class="line"><span class="comment">存储区域栈区</span></span><br><span class="line"><span class="comment">作用域函数内有效</span></span><br><span class="line"><span class="comment">生命周期从函数内定义开始到功能函数结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func().a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;func1().a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">func1();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">-900</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">块级变量</span></span><br><span class="line"><span class="comment">存储区域栈区</span></span><br><span class="line"><span class="comment">作用域块内有效</span></span><br><span class="line"><span class="comment">生命周期从定义开始到块结束</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;块.a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">myatoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *nptr)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.把字符串的有效字符遍历一遍//循环遍历</span></span><br><span class="line"><span class="comment">2.想办法把数字的字符转换成整型数字//数字字符 - &#x27;0&#x27;</span></span><br><span class="line"><span class="comment">3.想办法把整型数字存储起来</span></span><br><span class="line"><span class="comment">====================================================</span></span><br><span class="line"><span class="comment">4.处理空格的问题</span></span><br><span class="line"><span class="comment">5.处理正负号的问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">myatoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *nptr)</span><span class="comment">//&quot;9527&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;<span class="comment">//用来标记正负</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; nptr[i] == <span class="string">&#x27; &#x27;</span>; i++); <span class="comment">//为了跳过空格</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(nptr[i] == <span class="string">&#x27;-&#x27;</span> || nptr[i] == <span class="string">&#x27;+&#x27;</span>)<span class="comment">//正负号的判断</span></span><br><span class="line">&#123;</span><br><span class="line">flag = nptr[i] == <span class="string">&#x27;+&#x27;</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(; nptr[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(nptr[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span> ... <span class="string">&#x27;9&#x27;</span> :</span><br><span class="line">num *= <span class="number">10</span>;</span><br><span class="line">num += nptr[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span> : <span class="keyword">return</span> num * flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num * flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">num = myatoi(<span class="string">&quot;-   9527&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;myatoi = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __ADD_H<span class="comment">//为了防止头文件被重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __ADD_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> , <span class="type">int</span> )</span>;<span class="comment">//函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">sum = add(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 注意:makefile文件是脚本文件,所以想要注释需要用 #</span><br><span class="line"># 注意:makefile文件是非常注重格式的,空格是空格,tab是tab</span><br><span class="line"># 生成的文件 : 依赖的文件(:以左是生成文件,:以右是依赖文件)</span><br><span class="line">main : main.o add.o</span><br><span class="line">gcc main.o add.o -o main</span><br><span class="line"># 注意:使用的工具和上边生成文件的内容要差一个tab</span><br><span class="line">main.o : main.s</span><br><span class="line">gcc -c main.s -o main.o</span><br><span class="line">main.s : main.i</span><br><span class="line">gcc -S main.i -o main.s</span><br><span class="line">main.i : main.c</span><br><span class="line">gcc -E main.c -o main.i</span><br><span class="line">add.o : add.s</span><br><span class="line">gcc -c add.s -o add.o</span><br><span class="line">add.s : add.i</span><br><span class="line">gcc -S add.i -o add.s</span><br><span class="line">add.i : add.c</span><br><span class="line">gcc -E add.c -o add.i</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.i *.s *.o main</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAX_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAX_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;max.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;max.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">sum = max(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line">main : main.o max.o</span><br><span class="line">gcc -o main main.o max.o</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o main</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SWAP_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SWAP_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">swap(&amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># 注意:在makefile文件中 $ 就是用来引用变量的</span><br><span class="line"># 注意:$@指的是引用上一条语句的 : 以左的内容</span><br><span class="line"># 注意:$^指的是引用上一条语句的 : 以右的内容</span><br><span class="line">main : main.o swap.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">#等价于 gcc -o main main.o swap.o</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o main</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __INC_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __INC_H</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">15</span>][<span class="number">15</span>];<span class="comment">//棋盘</span></span><br><span class="line"><span class="type">int</span> x, y;<span class="comment">//坐标</span></span><br><span class="line"><span class="type">int</span> flag;<span class="comment">//标记玩家</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//初始化棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//画棋盘</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_infor</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//打印玩家信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//检测坐标是否合理</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">win</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//判断是否可以赢</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i][j] = <span class="number">0</span>;<span class="comment">//棋盘清零</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x = y = <span class="number">0</span>;<span class="comment">//坐标清零</span></span><br><span class="line">flag = <span class="number">1</span>;<span class="comment">//标记置为1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//画棋盘</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  1 2 3 4 5 6 7 8 9 A B C D E F\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(arr[i][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> : <span class="built_in">printf</span>(<span class="string">&quot;+ &quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">printf</span>(<span class="string">&quot;O &quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">printf</span>(<span class="string">&quot;X &quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_infor</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//打印玩家信息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Player %d &gt; &quot;</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">check</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//检测坐标是否合理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">1</span> || x &gt; <span class="number">15</span> || y &lt; <span class="number">1</span> || y &gt; <span class="number">15</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下出了棋盘边界,请重新下棋!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(arr[x - <span class="number">1</span>][y - <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;下到了重复位置,请重新下棋!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">arr[x<span class="number">-1</span>][y<span class="number">-1</span>] = flag;</span><br><span class="line">flag ^= <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">win</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//判断是否可以赢</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;inc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">init();<span class="comment">//初始化棋盘</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">draw();<span class="comment">//画棋盘</span></span><br><span class="line">print_infor();<span class="comment">//打印玩家信息</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">check();<span class="comment">//检测录入的坐标是否合理</span></span><br><span class="line">&#125;<span class="keyword">while</span>(win());<span class="comment">//如果赢了win()返回0,否则返回1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line">five : main.o init.o draw.o print.o check.o win.o</span><br><span class="line">gcc -o $@ $^</span><br><span class="line">clean :</span><br><span class="line">rm -rf *.o five</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_08day</title>
      <link href="/2023/02/16/embsky/03c/03c_08day/"/>
      <url>/2023/02/16/embsky/03c/03c_08day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-25<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    数组线性的存储    线性表        顺序表            数组                一维数组1.数组    1)数组的含义        数组就是用来存储一组相同类型的数据    2)数组的定义        数据类型 数组名[成员个数];        int arr[10] ;        定义了10个int类型成员的数组        arr[0] - arr[9]    3)访问数组的成员        数组名 + 下标arr[3];        数组名 + 偏移量*(arr+3);        指针 + 偏移量*(p + 3);        指针 + 下标p[3];    4)数组的特性        sizeof(数组名) = 整个数组的大小        sizeof(成员) = 一个成员的大小        sizeof(数组名) / sizeof(成员) = 成员个数        打印地址            数组的成员占用了连续的存储空间        一维数组的数组名相当于是数组首成员的地址    C语言的第一阶段过渡到第二阶段                多维数组                    二维数组</code></pre><p>二维数组<br><img src="/images/03c/08day/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84.png"></p><pre><code>        链表            有头/无头(头节点&lt;无实质数据&gt;)            循环/不循环            单向/双向    两种特殊的存储形式        栈式存储结构先进后出        队列式存储结构先进先出小项目:五子棋    1.player VS player要求    1&gt;最少完成p v p版本    2&gt;用多函数实现    3&gt;完成五子棋最基本功能即可    4&gt;要有适当的提示信息    5&gt;代码中要有注释    6&gt;以组为单位交付提示    1&gt;棋盘存储    2&gt;坐标的打印    3&gt;玩家的替换    4&gt;下到重复位置/下出边界以后的处理    5&gt;判断赢的条件<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> arr[<span class="number">15</span>][<span class="number">15</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  1 2 3 4 5 6 7 8 9 A B C D E F\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(arr[i][j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span> : <span class="built_in">printf</span>(<span class="string">&quot;+ &quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">printf</span>(<span class="string">&quot;O &quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">printf</span>(<span class="string">&quot;X &quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//二维数组中 成员=0 该处无棋子 </span></span><br><span class="line"><span class="comment">//成员=1 玩家1下棋 </span></span><br><span class="line"><span class="comment">//成员=2 玩家2下棋</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">15</span>][<span class="number">15</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//定义二维数组初始化成0</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;<span class="comment">//下棋子的坐标</span></span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;<span class="comment">//标记玩家</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">draw(arr);<span class="comment">//通过draw函数画棋盘</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Player %d &gt; &quot;</span>, flag);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="comment">//做判断x 和 y的位置是否合理</span></span><br><span class="line">arr[x - <span class="number">1</span>][y - <span class="number">1</span>] = flag;</span><br><span class="line">flag ^= <span class="number">3</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(win());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="多维数组和二维数组的关系"><a href="#多维数组和二维数组的关系" class="headerlink" title="多维数组和二维数组的关系"></a>多维数组和二维数组的关系</h1><pre><code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">7</span>][<span class="number">4</span>][<span class="number">4</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">srand(getpid());</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">x = rand() % <span class="number">7</span>;</span><br><span class="line">y = rand() % <span class="number">4</span>;</span><br><span class="line">system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[x][y][i][j] == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[]&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#二维数组</span><br><span class="line"><span class="number">1.</span>二维数组的含义</span><br><span class="line">是用来存储相同类型的数据的</span><br><span class="line">可以抽象出行和列的存储形式,适合存储矩阵的数据</span><br><span class="line"><span class="number">2.</span>二维数组的定义</span><br><span class="line">数据类型数组名[行数][列数];</span><br><span class="line"><span class="type">char</span>arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">float</span>arr[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line">无论是行数还是列数都是从<span class="number">0</span>开始计数的</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] arr[<span class="number">0</span>][<span class="number">1</span>] arr[<span class="number">0</span>][<span class="number">2</span>] arr[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] arr[<span class="number">1</span>][<span class="number">1</span>] arr[<span class="number">1</span>][<span class="number">2</span>] arr[<span class="number">1</span>][<span class="number">3</span>]</span><br><span class="line">arr[<span class="number">2</span>][<span class="number">0</span>] arr[<span class="number">2</span>][<span class="number">1</span>] arr[<span class="number">2</span>][<span class="number">2</span>] arr[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line"><span class="number">3.</span>访问二维数组成员的方法</span><br><span class="line"><span class="number">1</span>)数组名 + 下标</span><br><span class="line"><span class="number">2</span>)数组名 + 偏移量</span><br><span class="line">二级指针不能和二维数组产生关联(类型不匹配)</span><br><span class="line">需要使用数组指针和二维数组产生关联</span><br><span class="line"><span class="number">4.</span>二维数组的特性</span><br><span class="line"><span class="number">1</span>)通过<span class="keyword">sizeof</span>运算符进行测试</span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">sizeof</span>(arr) = <span class="number">24</span> = 整个数组的大小</span><br><span class="line"><span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) = <span class="number">12</span> = 一行的大小</span><br><span class="line"><span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) = <span class="number">4</span> = 一个成员的大小</span><br><span class="line"><span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) = <span class="number">6</span> = 成员个数</span><br><span class="line"><span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) = <span class="number">2</span> = 行数</span><br><span class="line"><span class="keyword">sizeof</span>(arr[<span class="number">0</span>] / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>])) = <span class="number">3</span> = 列数</span><br><span class="line"><span class="number">2</span>)虽然二维数组可以抽象出行和列的形式,</span><br><span class="line">但是二维数组中的每个成员的地址都是连续的</span><br><span class="line"><span class="number">3</span>)二维数组的数组名表示的数组首行的地址</span><br><span class="line"><span class="number">5.</span>二维数组的初始化</span><br><span class="line">数据类型数组名[行数][列数] = &#123;数值,数值&#125;;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//所有成员都初始化为0</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line"><span class="comment">//每个成员获取一个数值</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;,&#123;<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;&#125;;</span><br><span class="line">===============================================</span><br><span class="line"><span class="type">int</span> arr[][<span class="number">3</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line">注意 : 二维数组特殊的初始化方式,可以不指定行数</span><br><span class="line">但是列数必须要指定</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> arr[][<span class="number">3</span>])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(i = 0; i &lt; sizeof(arr) / sizeof(arr[0]); i++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d][%d] = %d\n&quot;</span>, i, j, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> arr[][<span class="number">3</span>])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">print(arr);<span class="comment">//通过print函数遍历二维数组</span></span><br><span class="line">change(arr);<span class="comment">//通过change函数改变二维数组的数据</span></span><br><span class="line">print(arr);<span class="comment">//通过print函数遍历二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> **pp = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i][j] = num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*(arr+%d)+%d) = %d\n&quot;</span>, i, j, *(*(arr+i)+j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> **pp = arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i][j] = num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*(arr+%d)+%d) = %d\n&quot;</span>, i, j, *(*(arr+i)+j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i][j] = num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(*(arr+%d)+%d) = %d\n&quot;</span>, i, j, *(*(arr+i)+j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[0][0] = %p\n&quot;</span>, &amp;arr[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//表示的是数组首成员的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[0] = %p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//表示的是数组首行的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[0] = %p\n&quot;</span>, arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//表示的是数组首成员的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line"><span class="comment">//表示的是数组首行的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr = %p\n&quot;</span>, &amp;arr);</span><br><span class="line"><span class="comment">//表示的是整个数组的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*arr = %p\n&quot;</span>, *arr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;========================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[0][0] + 1 = %p\n&quot;</span>, &amp;arr[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[0] + 1 = %p\n&quot;</span>, &amp;arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[0] + 1 = %p\n&quot;</span>, arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr + 1 = %p\n&quot;</span>, arr + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr + 1 = %p\n&quot;</span>, &amp;arr + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*arr + 1 = %p\n&quot;</span>, *arr + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[%d][%d] = %p\n&quot;</span>, i,j,&amp;arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(arr[0][0]) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(arr[0]) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(arr) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i][j] = num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d][%d] = %d\n&quot;</span>, i, j, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输入十个人的身高,要求排序,从低到高打印    排序(选择法排序)首先从未排序的成员中找到最值然后和数组开头的成员进行交换然后再从剩余的未排序的成员中找到最值然后再和剩余成员的开头位置进行交换以此类推=============================把冒泡法排序和选择法排序给组长讲一遍(以讲懂了为标准)=============================<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *arr, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">k = i;<span class="comment">//让k和i标记相同的位置</span></span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span>; j &lt; size; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[k] &gt; arr[j])</span><br><span class="line">k = j;<span class="comment">//让k标记j的位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i != k)<span class="comment">//判断i和k是否标记相同的位置</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = arr[i];</span><br><span class="line">arr[i] = arr[k];</span><br><span class="line">arr[k] = tmp;</span><br><span class="line">print(arr, size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">100</span>, <span class="number">201</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组</span></span><br><span class="line"></span><br><span class="line">sort(arr, size);<span class="comment">//通过sort函数进行从小到大的排序</span></span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输入十个人的身高,要求排序,从低到高打印    排序(冒泡法排序)比较两个相邻的成员,如果不满足大小顺序,当即完成交换操作按照遍历顺序把第一对相邻的成员到最后一对相邻的成员都完成对比这样数组中的最值就冒到了最后的位置<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *arr, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; size - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">tmp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">print(arr, size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">100</span>, <span class="number">201</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">30</span>&#125;;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组</span></span><br><span class="line"></span><br><span class="line">sort(arr, size);<span class="comment">//通过sort函数进行从小到大的排序</span></span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>有1000发子弹,要提前装到10个箱子里面，接收键盘输入，要取多少颗子弹数，只能显示整箱的个数，问这10个箱子怎么装,编程实现二进制100逐次趋近式的方法arr[0] = 1arr[1] = 2arr[2] = 4arr[3] = 8arr[4] = 16arr[5] = 32arr[6] = 64arr[7] = 128arr[8] = 256arr[9] = 489<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">take_out</span><span class="params">(<span class="type">int</span> , <span class="type">int</span> *, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = sum;</span><br><span class="line">x += sum;</span><br><span class="line">sum *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[i] = <span class="number">1000</span> - x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">take_out</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt;= num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">num -= arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//存子弹</span></span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);<span class="comment">//存储成员个数</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//存储要取走的子弹数</span></span><br><span class="line"></span><br><span class="line">init(arr, size);<span class="comment">//通过init函数存储子弹</span></span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);<span class="comment">//录入取走的子弹数</span></span><br><span class="line"></span><br><span class="line">take_out(num, arr, size);<span class="comment">//取子弹</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>进制转换的计算器完成itob函数(十-&gt;八)十 -&gt; 二void itob(int num, int arr[8], int size);<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">itob</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> *arr, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">itob</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = num % <span class="number">2</span>;</span><br><span class="line">num /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//保存录入的十进制数字</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//初始化8个成员的数组</span></span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);<span class="comment">//保存成员个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);<span class="comment">//录入十进制数字</span></span><br><span class="line"></span><br><span class="line">itob(num, arr, size);<span class="comment">//调用itob把十进制转换成二进制</span></span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>口算卡<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Rand</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> , <span class="type">int</span> , <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> , <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Rand</span><span class="params">(<span class="type">int</span> *s1, <span class="type">int</span> *s2, <span class="type">int</span> *c)</span></span><br><span class="line">&#123;</span><br><span class="line">*s1 = rand() %<span class="number">10</span>;</span><br><span class="line">*s2 = rand() % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">*c = rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> s1, <span class="type">int</span> s2, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d + %d = &quot;</span>, s1, s2);<span class="keyword">return</span> s1+s2;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d - %d = &quot;</span>, s1, s2);<span class="keyword">return</span> s1-s2;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d * %d = &quot;</span>, s1, s2);<span class="keyword">return</span> s1*s2;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d / %d = &quot;</span>, s1, s2);<span class="keyword">return</span> s1/s2;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;%d %% %d = &quot;</span>, s1, s2);<span class="keyword">return</span> s1%s2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">int</span> T, <span class="type">int</span> guess)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(T == guess)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Bingo!+10分!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Error! === %d\n&quot;</span>, T);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> s1 = <span class="number">0</span>, s2 = <span class="number">0</span>, c = <span class="number">0</span>;<span class="comment">//2个操作数以及1个运算符</span></span><br><span class="line"><span class="type">int</span> T = <span class="number">0</span>, guess = <span class="number">0</span>;<span class="comment">//1个正确结果和一个客户填写的答案</span></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;<span class="comment">//记录总分</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">srand(getpid());<span class="comment">//随机种子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Rand(&amp;s1, &amp;s2, &amp;c);<span class="comment">//产生随机数</span></span><br><span class="line">T = print(s1, s2, c);<span class="comment">//打印表达式并把正确结果返回</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);<span class="comment">//录入正确的结果</span></span><br><span class="line">score += cmp(T, guess);<span class="comment">//对比结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;总分 : %d\n&quot;</span>, score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_05day</title>
      <link href="/2023/02/16/embsky/03c/03c_05day/"/>
      <url>/2023/02/16/embsky/03c/03c_05day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-20<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><pre><code>指针(point/pointer)1.指针的含义嵌入式开发工程师需要遵守的规则谁打开，谁关闭文件IO谁开辟，谁释放堆区空间 malloc谁创建，谁销毁链表谁加锁，谁解锁线程    指针就是用来存储地址的    变量是用来存储数据的(会存在内存中&lt;以二进制补码形式&gt;)    指针是用来存储地址的(会存在内存中&lt;以二进制补码形式&gt;)    虽然在内存中以二进制补码的形式存储地址，    但是会以十六进制的方式展示给程序员    注意 ：地址是没有负的(最小的地址0x00000000)2.指针的定义    定义变量type name;    定义指针type * name；    数据类型指针名；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">floarf;</span><br><span class="line"><span class="type">char</span> *pc;</span><br><span class="line"><span class="type">int</span> *pi;</span><br><span class="line"><span class="type">float</span> *pf;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * p<span class="comment">//定义了一个 int* 类型的指针p</span></span><br><span class="line"><span class="type">int</span> * p = &amp;i;<span class="comment">//把int类型变量i的地址保存到指针p当中</span></span><br></pre></td></tr></table></figure>3.通过sizeof了解指针的数据类型的特点    无论何种类型的指针，在我当前的机器上        打印出来的字节大小都是8个字节    我当前机器的CPU是64bit的CPU，安装的是64bit的Ubuntu系统        代表在我当前的机器中一个地址长度就是64bit    指针是用来存储地址的，所以指针应当能够存储64bit的地址        所以无论体积类型在我当前机器上都是8个字节4.指针的命名规则和变量的命名规则一致5.指针运算符    &amp;取地址的运算符(用来取地址的)        可以使用在变量\指针\数组成员    *取值的运算符(用来取值的)        可以使用在地址6.指针的赋值    变量名=数值；<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">i=<span class="number">9527</span>;</span><br><span class="line">f=<span class="number">3.14</span>;</span><br><span class="line">pc=&amp;c;</span><br><span class="line">pi=&amp;i;</span><br><span class="line">pf=&amp;f;</span><br></pre></td></tr></table></figure>7.指针的初始化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>c=<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line"><span class="type">float</span>f=<span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">数据类型指针名=地址；</span><br><span class="line"><span class="type">char</span> *pc=&amp;c;</span><br><span class="line"><span class="type">int</span>*pi=&amp;i;</span><br><span class="line"><span class="type">float</span> *pf=&amp;f;</span><br><span class="line"><span class="type">int</span>*p=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>注意 ：如果初始化指针时，不确定指针指向哪个空间，    可以先将指针指向NULL(空)    NULL代表的就是空的意思，在ASCII表中表示的就是0x0    (其实就相当于给指针赋了一个地址0x0)8.指针的定义和指针的初始化的区别(和变量的内容一样)9.指针的使用    1&gt;指针在使用时应当先定义再使用    2&gt;指针应该保存相应数据类型变量的地址        int *类型的指针保存 int类型变量地址        char *类型的指针 保存 char类型变量地址        float *类型的指针 保存 float类型变量地址    3&gt;指针可以做加减法运算(自增自减运算)        int *P;        p + 1; p += 1; P++; ++p;        注意 ：不同类型的指针，在做加减法运算时，        所偏移的字节数是不同的，        和指针本身要保存的变量的数据类型有关        例子：        int *pi;//指针保存的地址是0x1000        pi++;        printf (&quot;pi&quot;);//0x1100410.特殊的指针    1&gt;空类型的指针(万能指针)        void *p;        空类型的指针可以保存任意类型的地址，所以叫做万能指针        会在指针的强制类型转换时使用    2&gt;空指针(指向NULL的指针)    在C语言中，不允许访问地址为NULL的存储空间，    因为该空间是系统保留的，所以不允许访问    操作空指针，程序在执行时会报段错误    3&gt;野指针(没有对象的指针)    野指针指向一个已经删除或者已释放的空间    与空指针不同，没有办法通过简单的判断避免使用野指针    只能通过养成良好的编程习惯来尽力减少    可以主动的把已删除或者已释放的指针变为空指针    再去判断空指针即可    --------------------------------------------------------    在操作指针时，可以使用一些方法，避免使用空指针    可以加入判断        if(p == NULL)//if(NULL == p)            printf (&quot;指针p是一个空指针!\n&quot;);<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line"><span class="keyword">if</span>(i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += i++;</span><br><span class="line"><span class="keyword">goto</span> loop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(char *) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(short *) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(int *) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(long *) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(float *) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span> *));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(double *) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span> *));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"></span><br><span class="line">i = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![06point](https://s2.loli.net/2022/08/16/7unBeUcYKkm3zog.png)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"></span><br><span class="line">i = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;*(&amp;i) = %d\n&quot;, *(&amp;i));//可以使用</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;(*i) = %d\n&quot;</span>, &amp;(*i));<span class="comment">//不能使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;<span class="comment">//把int类型变量i的地址保存到指针p当中</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line">i = <span class="number">13</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;*(&amp;i) = %d\n&quot;, *(&amp;i));//可以使用</span></span><br><span class="line"><span class="comment">//printf(&quot;&amp;(*i) = %d\n&quot;, &amp;(*i));//不能使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;<span class="comment">//把int类型变量i的地址保存到指针p当中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//*p = 9527;</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;*(&amp;i) = %d\n&quot;, *(&amp;i));//可以使用</span></span><br><span class="line"><span class="comment">//printf(&quot;&amp;(*i) = %d\n&quot;, &amp;(*i));//不能使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>![09point](https://s2.loli.net/2022/08/16/CasOxBrYX1wSuvm.png)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="number">0x12345678</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %p *p = %d\n&quot;</span>, p, *p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *pc;</span><br><span class="line"><span class="type">short</span> *ps;</span><br><span class="line"><span class="type">int</span> *pi;</span><br><span class="line"><span class="type">long</span> *pl;</span><br><span class="line"><span class="type">float</span> *pf;</span><br><span class="line"><span class="type">double</span> *pd;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(pc) = %ld sizeof(*pc) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(pc), <span class="keyword">sizeof</span>(*pc));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(ps) = %ld sizeof(*ps) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(ps), <span class="keyword">sizeof</span>(*ps));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(pi) = %ld sizeof(*pi) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(pi), <span class="keyword">sizeof</span>(*pi));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(pl) = %ld sizeof(*pl) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(pl), <span class="keyword">sizeof</span>(*pl));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(pf) = %ld sizeof(*pf) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(pf), <span class="keyword">sizeof</span>(*pf));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(pd) = %ld sizeof(*pd) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(pd), <span class="keyword">sizeof</span>(*pd));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">9527</span>;</span><br><span class="line"><span class="type">char</span> *p = &amp;i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">short</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="type">short</span> *p = &amp;i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line">++p;<span class="comment">//p++;//p+=1;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="type">short</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="type">float</span> f = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *p;</span><br><span class="line"></span><br><span class="line">p = &amp;c;</span><br><span class="line">p = &amp;s;</span><br><span class="line">p = &amp;i;</span><br><span class="line">p = &amp;l;</span><br><span class="line">p = &amp;f;</span><br><span class="line">p = &amp;d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="type">void</span> *p = &amp;i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">*p = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;free之前*p = %d\n&quot;</span>, *p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;free之前p = %p\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;<span class="comment">//把野指针变为了空指针</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;free之后*p = %d\n&quot;</span>, *p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;free之后p = %p\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line">*p = <span class="number">9527</span>;<span class="comment">//使用野指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;free之后*p = %d\n&quot;</span>, *p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;free之后p = %p\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_06day</title>
      <link href="/2023/02/16/embsky/03c/03c_06day/"/>
      <url>/2023/02/16/embsky/03c/03c_06day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-21<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><pre><code>一.温故知新    指针        malloc    指针的含义 : 指针就是用来存储地址    NULL    指针的定义 : 数据类型指针名;                 char *pc;                 char *pi;                 float *pf;</code></pre><p>指针<br><img src="/images/03c/06day/15_2_point.png"></p><pre><code>    通过sizeof测试    指针的命名规则和变量的命名规则一致    int i = 0;    int *p;    p = &amp;i;    *p    指针运算符    数据类型指针名=地址;    int *p=NULL;    int *p;-&gt;int    char *p;-&gt;char    指针可以做加减法运算        p+1;p+=1;p++;++p;    特殊指针        空类型指针(万能指针)        空指针        野指针    容易混淆的声明        const指针        指针常量        常量指针        数组函数        指针数组        数组指针        指针函数        函数指针        函数指针数组<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;<span class="comment">//函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span><span class="comment">//函数的实现</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">sum = add(a, b);<span class="comment">//函数的调用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> , <span class="type">int</span> )</span>;<span class="comment">//函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span><span class="comment">//函数的实现</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//x &gt; y ? return x : return y;</span></span><br><span class="line"><span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">sum = max(a, b);<span class="comment">//函数的调用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isleapyear</span><span class="params">(<span class="type">int</span> )</span>;<span class="comment">//函数的声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">isleapyear</span><span class="params">(<span class="type">int</span> abc)</span><span class="comment">//函数的实现</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (!(abc%<span class="number">4</span>)&amp;&amp;(abc%<span class="number">100</span>)) || (!(abc%<span class="number">400</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line"></span><br><span class="line">sum = isleapyear(year);<span class="comment">//函数的调用</span></span><br><span class="line"><span class="comment">//如果sum = 1代表是闰年 如果sum = 0代表是平年</span></span><br><span class="line"></span><br><span class="line">sum == <span class="number">1</span> ? <span class="built_in">printf</span>(<span class="string">&quot;%d年是闰年!\n&quot;</span>, year) : <span class="built_in">printf</span>(<span class="string">&quot;%d年是平年!\n&quot;</span>, year);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> ,<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> min = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">min = a &lt; b ? a : b;</span><br><span class="line">max = a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = min; i &lt;= max; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">func(a, b);<span class="comment">//函数的调用</span></span><br><span class="line"><span class="comment">//func()的功能是寻找最小值 - 最大值之间的素数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> ,<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;swap.交换之前a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;swap.交换之前a = %p b = %p\n&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">tmp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tmp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;swap.交换之后a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;swap.交换之后a = %p b = %p\n&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.交换之前a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.交换之前a = %p b = %p\n&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">swap(a, b);<span class="comment">//通过swap()交换变量a b的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.交换之后a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.交换之后a = %p b = %p\n&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>交换变量值<br><img src="/images/03c/06day/07swap.png"><br>    <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">tmp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.交换之前a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">swap(&amp;a, &amp;b);<span class="comment">//通过swap()交换变量a b的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;main.交换之后a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>程序员写C语言程序会经历几个阶段第一阶段只写一个.c文件,在.c文件中只写一个main函数            把所有的功能都放到main函数中第二阶段只写一个.c文件,在.c文件中除了有main函数以外            还会有其他的功能函数的封装第三阶段在一个项目工程中存在多个.c或者.h文件            main.c存放main函数以及功能函数的调用            func.c存放功能函数的实现            func.h存放功能函数的声明以及各种定义            makefile是一个脚本文件(存放的是编译规则)第四阶段把func.c制作成库文件            动态库和静态库函数当写一个C语言程序时,首先需要写的一个函数就是main函数1.函数的含义    函数就是一个功能,当调用函数时,会使用这个功能    printf()-&gt;打印输出    scanf()-&gt;录入    rand()-&gt;用来产生随机数    srand()-&gt;随机种子    time()-&gt;获取时间的描述    getpid()-&gt;获取进程ID号    sleep()-&gt;秒级延时    usleep()-&gt;微秒级延时    system()-&gt;调用shell命令    函数的出现是为了减少代码量,减少代码的冗余    例子 : printf函数的代码量有100行左右    如何把一部分的代码封装成一个函数,其实是由程序员决定的    通过是根据每个函数执行一个特定的功能来进行划分的2.函数组成部分    一般来说函数是由三个部分组成的    1)函数的声明(函数的定义)        其实就是告诉编译器,函数的名称,函数的返回值            以及函数的参数函数的返回值类型 函数名(参数列表);//该处参数指的是形式参数函数的返回值类型 函数名(参数列表);char * strcpy (char *dest, const char *src);void * malloc (size_t size);int rand(void);void srand(unsigned int seed);注意 :         1&gt;函数名的命名规则和变量的命名规则一致        2&gt;在写函数的声明时,可以不指定形式参数的名字,            但是必须要有形式参数的数据类型    2)函数的实现        其实就是把函数所代表的功能通过代码进行实现函数的返回值类型 函数名(参数列表)//该处参数指的是形式参数&#123;    功能实现的代码&#125;    注意 :         1&gt;在写函数的实现时,必须要指定形式参数的名字    3)函数的调用        其实就是在代码中使用函数实现的功能函数名(参数);//该处参数指的是实际参数形式参数和实际参数是两个不同的内容,可以同名其实是形式参数来接收实际参数的值的3.函数的传参    值传递: 是把实际参数的值传递给形式参数            在这种情况下修改形式参数的值不会影响实际参数        总结: 如果只是想要访问实际参数的值,                不想修改实际参数的值,那么就使用值传递        add(); max(); isleapyear(); printf();    地址传递: 是把实际参数的地址传递给形式参数(指针)            如果通过形式参数修改指向空间的数据            会改变实际参数的值        总结: 如果想要通过形式参数修改实际参数的值            那么就用地址传递        swap(); scanf();<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> *a)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line">print(a);<span class="comment">//通过print函数打印变量a的值</span></span><br><span class="line"></span><br><span class="line">change(&amp;a);<span class="comment">//通过change函数改变a的值</span></span><br><span class="line"></span><br><span class="line">print(a);<span class="comment">//通过print函数打印变量a的值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">9527</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d &amp;i = %p\n&quot;</span>, i, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(char **) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">char</span> **));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(short **) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">short</span> **));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(int **) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span> **));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(long **) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">long</span> **));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(float **) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">float</span> **));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(double **) = %ld\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">double</span> **));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*===========================作业:1.把今天讲过的内容完完整整的复习一遍2.最少把&lt;猜数游戏&gt;和&lt;口算卡&gt;改为多函数的版本===========================二级指针1.二级指针的含义只要是指针,那就是用来存储地址的一级指针是用来保存变量的地址的    (可以使用一级指针操控变量)二级指针是用来保存一级指针的地址的    (可以使用二级指针操控一级指针)2.二级指针的定义    inti;    数据类型指针名;    int *p;    int **pp;3.通过sizeof测试占用存储空间的大小    无论何种类型的二级指针在我当前的机器环境中,    占用空间大小都是8个字节4.二级指针的命名规则和变量的命名规则一致5.使用二级指针<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">名ippp</span><br><span class="line"></span><br><span class="line">值<span class="number">100</span><span class="number">0x1000</span><span class="number">0x2000</span></span><br><span class="line">ippp</span><br><span class="line">*p*pp</span><br><span class="line">**pp</span><br><span class="line">址<span class="number">0x1000</span><span class="number">0x2000</span><span class="number">0x3000</span></span><br><span class="line">&amp;i&amp;p&amp;pp</span><br><span class="line">ppp</span><br><span class="line">*pp</span><br></pre></td></tr></table></figure>*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"><span class="type">int</span> **pp = &amp;p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>, *p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**pp = %d\n&quot;</span>, **pp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;i = %p\n&quot;</span>, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>, p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*pp = %p\n&quot;</span>, *pp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;p = %p\n&quot;</span>, &amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pp = %p\n&quot;</span>, pp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;====================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;pp = %p\n&quot;</span>, &amp;pp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"><span class="type">int</span> **pp = &amp;p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;p = %p\n&quot;</span>, &amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pp = %p\n&quot;</span>, pp);</span><br><span class="line"></span><br><span class="line">pp++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;p = %p\n&quot;</span>, &amp;p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pp = %p\n&quot;</span>, pp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> **, <span class="type">int</span> *)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> **p, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">*p = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>, b = <span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//change(p, &amp;b);</span></span><br><span class="line">change(&amp;p, &amp;b);<span class="comment">//通过change函数把指针p指向b变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d p = %p\n&quot;</span>, *p, p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>随机函数    rand();//功能:就是用来产生随机数的    rand() % 1000; //[0 ~ 999]    rand() % 100 - 50;//[-50 ~ 49]        srand();//功能:可以保证每一次产生的随机数可变        srand函数在调用时需要有可变的因子        time(NULL);//时间种子        getpid();//进程种子<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> T = <span class="number">0</span>;<span class="comment">//存储随机出的数字</span></span><br><span class="line"><span class="type">int</span> guess = <span class="number">0</span>;<span class="comment">//存储玩家猜的数字</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">srand(getpid());<span class="comment">//随机种子</span></span><br><span class="line"></span><br><span class="line">T = rand() % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(num = <span class="number">1</span>; ; num++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line"><span class="keyword">if</span>(T &gt; guess)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Small!\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(T &lt; guess)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Big!\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Bingo!\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">func();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_07day</title>
      <link href="/2023/02/16/embsky/03c/03c_07day/"/>
      <url>/2023/02/16/embsky/03c/03c_07day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-22<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    函数 : 就是一个功能    函数的声明函数的返回值类型 函数名(参数列表);//形式参数    函数的实现函数的返回值类型 函数名(参数列表)//形式参数&#123;    功能的实现&#125;    函数的调用函数名(参数);//实际参数值传递:地址传递:    二级指针    用来保存一级指针的地址    可以通过二级指针操控一级指针    type **pointer_name;    int **pp;-&gt;pp++-&gt;偏移量和int *    char **pp;-&gt;pp++-&gt;偏移量和char *</code></pre><h1 id="数组-arr-x2F-array"><a href="#数组-arr-x2F-array" class="headerlink" title="数组(arr&#x2F;array)"></a>数组(arr&#x2F;array)</h1><pre><code>1.什么是数组?    相同类型变量的集合    数组是由一个一个成员组成,每个成员的数据类型都是相同的2.数组的含义    数组就是用来存储一组相同类型的数据的3.数组的定义    数据类型数组名[成员个数];    intarr[5];    charbrr[20];    floatcrr[3];    1)数组的定义中数据类型-&gt;指的是数组的每个成员的类型    2)数组名的命名规则和变量的命名规则一致    3)成员个数-&gt;就是数组的成员个数    注意 : 成员个数必须是一个非负的整数4.访问数组成员的方法    例子 : int arr[5];//定义了有5个int类型成员的数组arr            int *p = arr;    1)数组名 + 下标//在访问成员时下标从0开始计数        arr[0] arr[1] arr[2] arr[3] arr[4]        注意 : 没有arr[5]这个成员,如果强行使用arr[5]成员,            会造成数组越界    2)数组名 + 偏移量        *(arr+0) *(arr+1) *(arr+2) *(arr+3) *(arr+4)    3)指针 + 偏移量        *(p + 0) *(p + 1) *(p + 2) *(p + 3) *(p + 4)    4)指针 + 下标        p[0] p[1] p[2] p[3] p[4]5.数组的特性    1)通过sizeof运算符查看数组特性        sizeof(数组名) = 整个数组的大小        sizeof(成员) = 一个成员的大小        sizeof(数组名) / sizeof(成员) = 成员个数    2)数组中成员的地址都是连续的        可以通过某个成员的地址进行地址偏移            找到其他成员的位置    3)一维数组的数组名表示的是数组首成员的地址6.数组的初始化    数据类型数组名[成员个数]=&#123;数值,数值&#125;;    intarr[3]=&#123;0,1,2];    intarr[3]=&#123;0&#125;;            //会把数组的所有成员初始化成0    intarr[3]=&#123;11&#125;;            //会把首成员初始化成11,其他成员初始化成0    ================================================    intarr[]=&#123;11,22,33,44&#125;;            //会把后边数值的个数当作成员个数使用<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">9527</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">-1</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">123</span>;</span><br><span class="line">arr[<span class="number">4</span>] = <span class="number">10086</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[0] = %d\n&quot;</span>, arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[1] = %d\n&quot;</span>, arr[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[2] = %d\n&quot;</span>, arr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[3] = %d\n&quot;</span>, arr[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[4] = %d\n&quot;</span>, arr[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//int arr[5];可以</span></span><br><span class="line"><span class="comment">//int arr[0];可以</span></span><br><span class="line"><span class="comment">//int arr[-1];不可以</span></span><br><span class="line"><span class="comment">//int arr[3.14];不可以</span></span><br><span class="line"><span class="comment">//int arr[&#x27;A&#x27;];可以</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> arr[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr[i] = i * <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(arr[0]) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(arr) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(i = 0; i &lt; 5; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;sizeof(arr[%d]) = %ld\n&quot;, i, sizeof(arr[i]));</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %d\n&quot;</span>, i, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;i&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[0] = %d\n&quot;</span>, arr[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[1] = %d\n&quot;</span>, arr[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[2] = %d\n&quot;</span>, arr[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[3] = %d\n&quot;</span>, arr[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[4] = %d\n&quot;</span>, arr[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[%d] = %p\n&quot;</span>, i, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[0] = %p\n&quot;</span>, &amp;arr[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//表示的是数组首成员的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line"><span class="comment">//表示的是数组首成员的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr = %p\n&quot;</span>, &amp;arr);</span><br><span class="line"><span class="comment">//表示的是整个数组的地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;===========================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr[0] + 1 = %p\n&quot;</span>, &amp;arr[<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr + 1 = %p\n&quot;</span>, arr + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;arr + 1 = %p\n&quot;</span>, &amp;arr + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;arr[%d] = %d\n&quot;, i, arr[i]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(arr + %d) = %d\n&quot;</span>, i, *(arr + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line">arr += <span class="number">1</span>;</span><br><span class="line"><span class="comment">//arr++;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;arr = %p\n&quot;</span>, arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p = &amp;arr[0];//把数组首成员的地址赋值给指针p</span></span><br><span class="line">p = arr;<span class="comment">//把数组首成员的地址赋值给指针p</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;arr[%d] = %d\n&quot;, i, arr[i]);</span></span><br><span class="line"><span class="comment">//printf(&quot;*(arr + %d) = %d\n&quot;, i, *(arr + i));</span></span><br><span class="line"><span class="comment">//printf(&quot;*(p + %d) = %d\n&quot;, i, *(p + i));</span></span><br><span class="line"><span class="comment">//printf(&quot;p[%d] = %d\n&quot;, i, p[i]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d[arr] = %d\n&quot;</span>, i, i[arr]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sizeof(arr) / sizeof(arr[0]) = 5</span></span><br><span class="line"><span class="comment">sizeof(arr) / sizeof(*arr) = 5</span></span><br><span class="line"><span class="comment">sizeof(p) / sizeof(*p) = 2</span></span><br><span class="line"><span class="comment">sizeof(p) / sizeof(p[0]) = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="数组和函数"><a href="#数组和函数" class="headerlink" title="数组和函数"></a>数组和函数</h1><pre><code>1.当多函数程序需要使用数组传参时,    无论是否需要修改数组成员的值,在函数调用时都传数组名2.如果功能函数并不想修改实参数组成员的值,    可以在形参前加const关键字修饰一下<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *p, <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">int</span> *p, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p[%d] = %d\n&quot;</span>, i, p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> *p, <span class="type">int</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, p + i);<span class="comment">//&amp;p[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="type">int</span> size = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组的成员</span></span><br><span class="line"></span><br><span class="line">change(arr, size);<span class="comment">//通过change函数改变数组成员的值</span></span><br><span class="line"></span><br><span class="line">print(arr, size);<span class="comment">//通过print函数遍历数组的成员</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;<span class="comment">//局部数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">p = func();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p[%d] = %d\n&quot;</span>, i, p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_04day</title>
      <link href="/2023/02/16/embsky/03c/03c_04day/"/>
      <url>/2023/02/16/embsky/03c/03c_04day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-19<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    分支语句        if            if else            语句1            if(条件1)            &#123;                语句2            &#125;            else if(条件2)            &#123;                语句3            &#125;            else if(条件3)            &#123;                语句4            &#125;            语句5        switch(变量)        &#123;            case 整常量1: 语句1; break;            case 整常量2: 语句2; break;            case 整常量3: 语句3; break;            default :     语句4; break;        &#125;    循环语句        for(; ;)//这是一个死循环        for(表达式1; ;表达式2)        等价于        for(表达式1; 1; 表达式2)        int i = 0, j = 0;        for(i = 0; i &lt; 10; i++)        &#123;            for(j = 0; j &lt; 10; j++)            &#123;                            &#125;        &#125;<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//管理行数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)<span class="comment">//管理列数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d %d]&quot;</span>, i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>打印99乘法表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt;= i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d X %d = %d &quot;</span>, i, j, i*j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>99乘法表<br><img src="/images/03c/04day/99%E4%B9%98%E6%B3%95%E8%A1%A8.png"></p><pre><code>“百钱百鸡”问题,百钱买百鸡,公鸡1个3块钱,母鸡1个2块钱，小鸡3个一块钱,问公鸡,母鸡,小鸡各多少个<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> g = <span class="number">0</span>, m = <span class="number">0</span>, x = <span class="number">0</span>;<span class="comment">//分别表示公鸡 母鸡 小鸡的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(g = <span class="number">0</span>; g &lt; <span class="number">33</span>; g++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; <span class="number">50</span>; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; x &lt; <span class="number">100</span>; x += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((g*<span class="number">3</span>+m*<span class="number">2</span>+x/<span class="number">3</span>==<span class="number">100</span>) &amp;&amp; (g+m+x==<span class="number">100</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;G:%d M:%d X:%d\n&quot;</span>, g, m, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h1><pre><code>    rand();//功能:就是用来产生随机数的    rand() % 1000; //[0 ~ 999]    rand() % 100 - 50;//[-50 ~ 49]        srand();//功能:可以保证每一次产生的随机数可变        srand函数在调用时需要有可变的因子        time(NULL);//时间种子        getpid();//进程种子<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//srand(time(NULL));</span></span><br><span class="line"><span class="comment">//注意:srand函数在程序中只能调用一次</span></span><br><span class="line">srand(getpid());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum = rand() % <span class="number">100</span> - <span class="number">50</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> T = <span class="number">0</span>;<span class="comment">//存储随机出的数字</span></span><br><span class="line"><span class="type">int</span> guess = <span class="number">0</span>;<span class="comment">//存储玩家猜的数字</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">srand(getpid());<span class="comment">//随机种子</span></span><br><span class="line"></span><br><span class="line">T = rand() % <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(num = <span class="number">1</span>; ; num++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line"><span class="keyword">if</span>(T &gt; guess)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Small!\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(T &lt; guess)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Big!\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Bingo!\n&quot;</span>, num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><pre><code>    do...while循环1.do while是C语言的关键字2.do...while循环的使用方法语句1do&#123;    要循环的语句&#125;while(循环条件);语句23.do...while循环的执行流程<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|-------&lt;---------&lt;---------</span><br><span class="line">|^</span><br><span class="line">V|</span><br><span class="line">语句<span class="number">1</span>-&gt;要循环的语句-&gt;循环条件的判断(真)-&gt;</span><br><span class="line">|</span><br><span class="line">(假)-&gt;语句<span class="number">2</span></span><br></pre></td></tr></table></figure>4.while循环与do...while循环的对比    while : 先执行循环条件的判断,再执行循环的语句    do...while : 先执行循环的语句,再执行循环条件的判断        while : 可以一次也不执行循环的语句    do...while : 至少会执行一次循环的语句<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d %d]\n&quot;</span>, i, j);</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="跳转语句-break-continue-goto-return"><a href="#跳转语句-break-continue-goto-return" class="headerlink" title="跳转语句 : break continue goto return"></a>跳转语句 : break continue goto return</h1><pre><code>1.break continue goto return都是C语言的关键字2.break关键字    break只能出现在循环结构或者switch语句中        使用在循环结构中是用来跳出循环的        使用在switch语句中是用来跳出switch    如果break关键字出现在嵌套结构中,只作用于最近的那一层3.continue关键字    continue关键字只能出现在循环结构中        使用在循环结构中跳过本次循环,继续下一次循环4.return关键字    return关键字一般来说出现在函数最后的位置    当一个函数碰到return关键字,这个函数会结束,    会把返回值返回给函数的调用者    ------------------------------------------    return返回的返回值有两种含义    1)返回的是运算的结果    2)返回的是函数运行的状态        return 0;代表函数运行正常        return 正数;代表函数运行有异常        return 负数;代表函数运行有错误    ------------------------------------------    注意 : return关键字一次只能返回一个值5.goto关键字(太灵活了)    可以轻易改变代码的结构    语句1标识符:    语句2    goto 标识符;    语句3;    标识符的命名要求和变量的命名要求一致    (标识符可以和变量重名,但是不要这样使用)    同一个标识符不能出现在多个位置    goto不能跨函数使用*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">2</span>)</span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;天气好热!\n&quot;</span>);</span><br><span class="line"><span class="keyword">goto</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_03day</title>
      <link href="/2023/02/16/embsky/03c/03c_03day/"/>
      <url>/2023/02/16/embsky/03c/03c_03day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-18<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    运算符        算术运算符+ - * / %            注意 : 除法运算符中除数不能为0        关系运算符&gt; &lt; == &gt;= &lt;= !=            注意 :             1.一个表达式经过关系运算符的运算最后是真假值            2.判断两个值是否相等用==            3.if(a == 13) 建议 if(13 == a)        逻辑运算符&amp;&amp; || !            注意 :            1.一个表达式经过逻辑运算符的运算最后是真假值            2.条件1 &amp;&amp; 条件2                条件1为真,会执行条件2                条件1为假,不会执行条件2            3.条件1 || 条件2                条件1为真,不会执行条件2                条件1为假,会执行条件2        赋值运算符= += -= *= /= &amp;= |= ...            注意 : 先计算右边的项,再和左边结合        位运算符&lt;&lt; &gt;&gt; &amp; | ~ ^            注意 : 操作数符号的问题        条件运算符? :            注意 : 是C语言中唯一的一个三目运算符        下标运算符[]        指针运算符* &amp;        分量运算符. -&gt;        求字节大小运算符sizeof()            注意 : sizeof不是函数,是一个运算符        强制类型转换()            注意 : 会在指针的时候使用        自增自减++ --        逗号运算符,<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="comment">//通过某种方法交换a和b的值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int tmp = 0;</span></span><br><span class="line"><span class="comment">tmp = a;</span></span><br><span class="line"><span class="comment">a = b;</span></span><br><span class="line"><span class="comment">b = tmp;</span></span><br><span class="line"><span class="comment">a = a + b;</span></span><br><span class="line"><span class="comment">b = a - b;</span></span><br><span class="line"><span class="comment">a = a - b;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">a = a ^ b;<span class="comment">//a = 1101 ^ 0111 = 1010</span></span><br><span class="line">b = a ^ b;<span class="comment">//b = 1010 ^ 0111 = 1101</span></span><br><span class="line">a = a ^ b;<span class="comment">//a = 1010 ^ 1101 = 0111</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sum += a++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d sum = %d\n&quot;</span>, a, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h1><pre><code>    如果一个表达式使用了逗号运算符        如果没有加小括号,那么会把第一个项的结果赋值给变量        如果有加小括号,那么会把最后一个项的结果赋值给变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">10</span>, c = <span class="number">20</span>, d = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">a = (b++,c+<span class="number">5</span>,d+<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><pre><code>    if1.if else是C语言的关键字2.if使用方法    语句1    if(条件)    &#123;        语句2    &#125;    语句3语句1-&gt;条件的判断(真)-&gt;语句2-&gt;语句3        |        (假)-&gt;语句33.if else使用方法    语句1    if(条件)    &#123;        语句2    &#125;    else    &#123;        语句3    &#125;    语句4语句1-&gt;条件的判断(真)-&gt;语句2-&gt;语句4        |        (假)-&gt;语句3-&gt;语句44.if else if else if使用方法    语句1    if(条件1)    &#123;        语句2    &#125;    else if(条件2)    &#123;        语句3    &#125;    else if(条件3)    &#123;        语句4    &#125;    else    &#123;        语句5    &#125;    语句6语句1-&gt;条件1的判断(真)-&gt;语句2-&gt;语句6        |        (假)-&gt;条件2的判断(真)-&gt;语句3-&gt;语句6                |                (假)-&gt;条件3的判断(真)-&gt;语句4-&gt;语句6                        |                        (假)-&gt;语句5-&gt;语句65.使用if需要注意的问题    1&gt;if关键字之后必须要写小括号,小括号内必须写内容    2&gt;else关键字之后不能直接加小括号写条件,需要写成else if    3&gt;if(条件)之后可以直接加 ;         if(条件);        &#123;            语句        &#125;        等价于        if(条件)        &#123;            ;        &#125;        &#123;            语句        &#125;    4&gt;if(条件)之下可以不加大括号        if(条件)            语句1            语句2        等价于        if(条件)        &#123;            语句1    &#125;        语句2<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(c % 2 == 0)//判断是否是偶数的条件</span></span><br><span class="line"><span class="keyword">if</span>((c &amp; <span class="number">1</span>) == <span class="number">0</span>)<span class="comment">//位运算符(判断最低位是否为0)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d是偶数!\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(c % 2 == 0)//判断是否是偶数的条件</span></span><br><span class="line"><span class="keyword">if</span>((c &amp; <span class="number">1</span>) == <span class="number">0</span>)<span class="comment">//位运算符(判断最低位是否为0)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d是偶数!\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d是奇数!\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if((year%4==0&amp;&amp;year%100!=0) || (year%400==0))</span></span><br><span class="line"><span class="keyword">if</span>((!(year%<span class="number">4</span>)&amp;&amp;year%<span class="number">100</span>) || !(year%<span class="number">400</span>))</span><br><span class="line"><span class="comment">//判断是否是闰年的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d年是闰年!\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d年是平年!\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="comment">//if error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a+b&gt;c &amp;&amp; a+c&gt;b &amp;&amp; b+c&gt;a)<span class="comment">//判断可以构成三角形的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)</span><br><span class="line"><span class="comment">//判断可以构成直角三角形的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成直角三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a == b || a == c || b == c)</span><br><span class="line"><span class="comment">//判断是否可以构成等腰三角形</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a == b &amp;&amp; a == c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成等边三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成等腰三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成普通三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不能构成三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">printf</span>(<span class="string">&quot;北京欢迎您!\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : <span class="built_in">printf</span>(<span class="string">&quot;物联网嵌入式!\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : <span class="built_in">printf</span>(<span class="string">&quot;今天好热!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输入年月日,打印出是该年的第几天//2022-7-18是2022年的第?天2022-1-99天2022-2-99+31天2022-3-99+(28||29)+312022-4-99+31+(28||29)+31<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>, month = <span class="number">0</span>, day = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;<span class="comment">//用来标记闰年和平年</span></span><br><span class="line"><span class="type">int</span> days = <span class="number">0</span>;<span class="comment">//用来存储最后总天数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line"><span class="comment">/*if error*/</span></span><br><span class="line"></span><br><span class="line">flag = (!(year%<span class="number">4</span>)&amp;&amp;(year%<span class="number">100</span>)) || !(year%<span class="number">400</span>);</span><br><span class="line"><span class="comment">//如果是闰年 flag = 1 否则 flag = 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : days += day; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : days += (day + <span class="number">31</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : days += (day + <span class="number">59</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : days += (day + <span class="number">90</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> : days += (day + <span class="number">120</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> : days += (day + <span class="number">151</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> : days += (day + <span class="number">181</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> : days += (day + <span class="number">212</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> : days += (day + <span class="number">243</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>: days += (day + <span class="number">273</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: days += (day + <span class="number">304</span> + flag); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>: days += (day + <span class="number">334</span> + flag); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d年%d月%d日是这一年的第%d天!\n&quot;</span>, year, month, day, days);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>, month = <span class="number">0</span>, day = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> flag = <span class="number">0</span>;<span class="comment">//用来标记闰年和平年</span></span><br><span class="line"><span class="type">int</span> days = <span class="number">0</span>;<span class="comment">//用来存储最后总天数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line"><span class="comment">/*if error*/</span></span><br><span class="line"></span><br><span class="line">flag = (!(year%<span class="number">4</span>)&amp;&amp;(year%<span class="number">100</span>)) || !(year%<span class="number">400</span>);</span><br><span class="line"><span class="comment">//如果是闰年 flag = 1 否则 flag = 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>: days += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: days += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>: days += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> : days += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> : days += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> : days += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> : days += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span> : days += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : days += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : days += (<span class="number">28</span> + flag);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : days += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : days += day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d年%d月%d日是这一年的第%d天!\n&quot;</span>, year, month, day, days);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><pre><code>    for1.for是C语言中的关键字2.for循环的使用方法    语句1    for(循环变量的赋值; 循环变量的控制; 循环变量的变化)    &#123;        循环的语句    &#125;    语句23.for循环的执行流程                    语句1                        |                        V                循环变量的赋值                        |                        V            |-&lt;-循环变量的控制--&lt;---|            |||            VV|            假真|            ||^            VV|            |循环的语句|            ||^            |V|            |循环变量的变化--&gt;---|            |            |----&gt;------|                        V                    语句2<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;score = %d\n&quot;</span>, score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//求3位数字的水仙花数</span></span><br><span class="line"><span class="comment">//百位数字的3次方 + </span></span><br><span class="line"><span class="comment">//十位数字的3次方 + </span></span><br><span class="line"><span class="comment">//个位数字的3次方 == 3位数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>, s = <span class="number">0</span>, g = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++)<span class="comment">//[100 ~ 999]所有三位数</span></span><br><span class="line">&#123;</span><br><span class="line">b = i / <span class="number">100</span>;<span class="comment">//取三位数的百位</span></span><br><span class="line">s = i / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">//取三位数的十位</span></span><br><span class="line">g = i% <span class="number">10</span>;<span class="comment">//取三位数的个位</span></span><br><span class="line"><span class="keyword">if</span>(i == b*b*b + s*s*s + g*g*g)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>, s = <span class="number">0</span>, g = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(b = <span class="number">1</span>; b &lt; <span class="number">10</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(s = <span class="number">0</span>; s &lt; <span class="number">10</span>; s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(g = <span class="number">0</span>; g &lt; <span class="number">10</span>; g++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b*b*b+s*s*s+g*g*g==b*<span class="number">100</span>+s*<span class="number">10</span>+g)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b*<span class="number">100</span>+s*<span class="number">10</span>+g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*打印0~100以内所有的质数(素数)(只能被1 和 本身整除的数)*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line"><span class="comment">//该循环为了取出[0-100]以内所有数字</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">2</span>; j &lt; i; j++)<span class="comment">//该循环为了取出[2 - i-1]</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % j == <span class="number">0</span>)<span class="comment">//判断是否能被整除</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//如果能被整除说明不是质数,跳出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i == j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]%d\n&quot;</span>, num++, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*    11是不是质数        11 % 1 = 0    11 % 2 != 0    11 % 3 != 0    11 % 4 != 0    11 % 5 != 0    11 % 6 != 0    11 % 7 != 0    11 % 8 != 0    11 % 9 != 0    11 % 10 != 0    11 % 11 = 0    8是不是质数    8 % 1 = 0    8 % 2 = 0能整除    8 % 3 != 0    8 % 4 = 0能整除    8 % 5 != 0    8 % 6 != 0    8 % 7 != 0    8 % 8 = 0    i是不是质数    i % 1 = 0    i % [2 ~ i-1]    i % i = 0*/</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_01day</title>
      <link href="/2023/02/16/embsky/03c/03c_01day/"/>
      <url>/2023/02/16/embsky/03c/03c_01day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-14<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><pre><code>面试题1.在C语言中以 # 开头的操作是预处理的操作2.预处理阶段会有哪些操作?    3个操作,文件包含 条件编译 宏定义3.从.c文件编译成可执行程序需要经历哪些阶段?源程序   被预处理过的源文件   汇编文件    目标文件hello.c--------&gt;hello.i-----&gt;hello.s-----&gt;hello.o---&gt;a.out        预处理          编译         汇编        链接4.包含头文件时使用尖括号或者双引号的区别?    尖括号 : 默认从指定目录中查找头文件(/usr/include),            如果找不到报错    双引号 : 默认从当前目录中查找头文件,如果找不到再从            指定目录中查找头文件(/usr/include),            如果再找不到报错5.C语言中有字符串但是没有字符串类型#include &lt;stdio.h&gt;/*main函数(主函数) : 是程序的入口当执行可执行程序时,从main函数进入,按照从上往下的顺序逐行逐行执行代码,最后从main函数退出在刚开始写程序时,多问问自己为什么要写这一行代码?写这一行代码要干什么?*//*函数的返回值类型 函数名(参数列表)//该处参数指的是形式参数&#123;    程序的代码&#125;*/int main(void)&#123;    printf(&quot;Hello World!&quot;);/*    调用了printf函数    printf函数的功能 :         可以把双引号引起来的内容打印输出到终端上    在C语言中双引号引起来的内容叫做字符串    在C语言中单引号引起来的内容叫做字符    字符串是由一个一个单一的字符串组成的,        最后会有一个结束标志尾0(&#39;\0&#39;)    --------------------------------    &quot;0&quot;这是一个字符串,是由&#39;0&#39; + &#39;\0&#39;组成    &#39;0&#39;这是一个字符,ASCII值48    &#39;\0&#39;这是一个字符,并且是一个转义字符,是尾0,ASCII是0    0这是一个整数0*/&#125;/*其实字符就是把计算机世界中的数字和日常生活中的符号进行一一对应printf函数    1.转义字符(除了有数字的对应关系以外还有额外的含义)        字符ASCII值额外的含义        &#39;\0&#39;0字符串的结束标志        &#39;\n&#39;10换行符        &#39;\r&#39;13回车符        &#39;\t&#39;9水平制表符        &#39;\v&#39;11垂直制表符    2.标准化输出格式        %d十进制整数(%03d)        %x十六进制输出        %o八进制输出        %f小数输出(%.2f)        %c字符输出        %s字符串输出        %p地址输出        %%打印百分号本身    3.VT控制码        可以控制打印输出的属性*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">30</span>, j = <span class="number">47</span>; i &lt;= <span class="number">37</span> &amp;&amp; j &gt;= <span class="number">40</span>; i++, j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\33[%dm\33[%dmHello World!\33[0m\n&quot;</span>,i ,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03c_02day</title>
      <link href="/2023/02/16/embsky/03c/03c_02day/"/>
      <url>/2023/02/16/embsky/03c/03c_02day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-15<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    权限的补充(特殊的权限)    suidu+s(可执行的命令文件中加入u+s)    sgidg+s(目录文件中加入g+s)    stickyo+t(目录文件中加入o+t)        umask值    666 - 0002 = 664     777 - 0002 = 775        进程的介绍    ps -aux    kill PID</code></pre><h1 id="Linux下的C语言"><a href="#Linux下的C语言" class="headerlink" title="Linux下的C语言"></a>Linux下的C语言</h1><pre><code>#include &lt;stdio.h&gt;int main(void)&#123;    printf(&quot;Hello World!&quot;);&#125;函数的返回值类型函数名(参数列表)&#123;    代码&#125;intmain(void)&#123;    printf(&quot;Hello World!&quot;);&#125;&#39;\0&#39;&#39;\n&#39;&#39;\r&#39;&#39;\t&#39;&#39;\v&#39;ASCII(常用ASCII表有128个字符&lt;又补充到了256个字符&gt;)&#39;\0&#39;0&#39;\n&#39;10&#39;0&#39;48&#39;A&#39;65&#39;a&#39;97标准化输出格式    %+某一个东西    %d    %c    %f    %s    %p    %%    %o    %xVT控制码</code></pre><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><pre><code>1.变量的含义    变量是用来存储数据的    (会把数据存储到内存中&lt;以二进制补码的形式存储&gt;)2.变量的定义    数据类型变量名;    1)基本数据类型    整型有符号/无符号short int long    实型有符号float double    字符型有符号/无符号char    2)通过sizeof运算符进行测试    测试出的结果以字节为单位    1字节 = 8位    sizeof(char) = 1    sizeof(short) = 2    sizeof(int) = 4    sizeof(long) = 8    sizeof(float) = 4    sizeof(double) = 8    测试的结果并不唯一,会随着硬件或者操作系统有所变化    3)变量名的命名要求        1&gt;变量名是由数字 字母 下划线组成,但不能以数字开头        2&gt;变量名是区分大小写的        3&gt;变量名不能与C语言的关键字重复        4&gt;变量名要做到见名生义3.变量的存储    char c = 13;    //将来会把十进制整数13转换成8位的二进制的数据存储到    //c变量所占用的1个字节的存储空间中    0 0 0 0 1 1 0 1    在二进制数据中,最左边的是最高位    在二进制数据中,最右边的是最低位    第7位0    第6位0    第5位0    第4位0    第3位1    第2位1    第1位0    第0位1    如果是有符号类型,最高位是符号位,其余位是数据位    第7位符号位(0代表正数 1代表负数)    第6-0位数据位    unsigned char c = 13;    无符号的数据类型所以范围是[0 ~ 255]        float f = 3.2;    有符号的数据类型    float在内存中占用4个字节存储空间(32bit)    第31位符号位    第30位浮点偏移量的位    第29-23位整数位    第22-0位小数位    f = 3.2    000000011    0.2 * 2 = 0.40    0.4 * 2 = 0.80    0.8 * 2 = 1.61    0.6 * 2 = 1.21    0.2 * 2 = 0.40    变量会存储在内存中,以二进制补码的形式进行存储原码 : 把操作数从别的进制转化成二进制,就是原码    程序员要的是原码(printf打印出的数据是原码数据)补码 : 如果操作数为正,那么原码等于补码        如果操作数为负,那么原码不等于补码,需要转换        无论是原码转换成补码,还是补码转换成原码,公式都一样        除了符号位不变,其他位按位取反,再加1    计算机要补码(计算机在计算的时候需要用补码计算)为什么使用补码存储数据?    1)保证0的唯一性    2)为了保证加法运算的合理    1-1 -&gt; 1 + (-1)             0001 + 1001 = 1010 = -2            0001 + 1111 = 0000 = 0</code></pre><p>存储<br><img src="/images/03c/01day/%E5%AD%98%E5%82%A8.png"><br>二转十<br><img src="/images/03c/01day/%E4%BA%8C%E8%BD%AC%E5%8D%81.png"><br>进制间转换<br><img src="/images/03c/01day/%E8%BF%9B%E5%88%B6%E9%97%B4%E8%BD%AC%E6%8D%A2.png"><br>按位取反<br><img src="/images/03c/02day/ysf/%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D.png"></p><pre><code>4.变量的初始化    数据类型变量名=数值;    charc=13;    inta=9527;    floatf=3.14;5.变量的定义和变量的初始化有什么区别?    变量的定义 : 只是在内存中分配了相应的存储单元,                    存储空间中是垃圾值    变量的初始化 : 除了在内存中分配了相应的存储单元,                    也在存储空间中保存了初始值    注意 : 当你定义变量时一定要有初始化6.变量的使用规则    1)变量要先定义再使用        (把变量的定义放到main函数的开头的位置)    2)不同类型的变量有不同的运算要求    3)变量在定义时在内存中占用的空间大小就已经确定了<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(char) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(short) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(int) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(long) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(float) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(double) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %p\n&quot;</span>, c);</span><br><span class="line"><span class="comment">//%p可以打印出变量在内存中是如何存储的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c = 0xff;//1111 1111</span></span><br><span class="line"><span class="comment">char c = -1;</span></span><br><span class="line"><span class="comment">原码1 0 0 0 0 0 0 1</span></span><br><span class="line"><span class="comment">补码1 1 1 1 1 1 1 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">-13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %p\n&quot;</span>, c);</span><br><span class="line"><span class="comment">//%p可以打印出变量在内存中是如何存储的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c = 0xff;//1111 1111</span></span><br><span class="line"><span class="comment">char c = -1;</span></span><br><span class="line"><span class="comment">原码1 0 0 0 0 0 0 1</span></span><br><span class="line"><span class="comment">补码1 1 1 1 1 1 1 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">char c = -128;</span></span><br><span class="line"><span class="comment">原码1 0 0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">补码1 0 0 0 0 0 0 0</span></span><br><span class="line"><span class="comment">0x80</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">char c = -13;</span></span><br><span class="line"><span class="comment">原码1 0 0 0 1 1 0 1</span></span><br><span class="line"><span class="comment">补码1 1 1 1 0 0 1 1</span></span><br><span class="line"><span class="comment">c = 0xf3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>面试题1.进制之间转换    八进制&lt;-------&gt;二进制&lt;--------&gt;十六进制                    ^                    |                    V                十进制    1)十进制转换成二进制除以2取余    2)二进制转换成十进制2的n次方2.除了常用进制以外,笔试题会考三进制 五进制 七进制 十五进制============================================作业:1.把今天讲过的内容完完整整的复习一遍2.多做一些进制之间转换的题目============================================int i = 100;int i = &#39;a&#39;;char c = 13;char c = &#39;A&#39;;//char = 1/4int</code></pre><h1 id="scanf函数"><a href="#scanf函数" class="headerlink" title="scanf函数"></a>scanf函数</h1><pre><code>函数功能 : 用来接收键盘录入的函数    scanf(&quot;%d&quot;, &amp;i);注意:    1.在scanf函数的双引号中只写标准化输出格式即可    2.在scanf函数的双引号中不要加换行符    3.在scanf函数的双引号之后需要的是地址gcc编译器是不检查段错误(由于操作内存不当引起的)的<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入变量i的值:&quot;</span>);</span><br><span class="line"><span class="comment">//scanf(&quot;%d\n&quot;, &amp;i);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><pre><code>    +加法    -减法    *乘法    /除法(取商)    %除法(取余/取模)注意 :     除法运算中,除数不能为0    int a = 13, b = 7, sum = 0;    sum = a + b;    sum = a - b;    sum = a * b;    sum = a / b;//a所在的位置是被除数,b所在的位置是除数    sum = a % b;//a所在的位置是被除数,b所在的位置是除数如果在除法运算中,被除数 小于 除数, 商是0, 余数是被除数本身    sum = 7 / 13;// sum = 0    sum = 7 % 13;// sum = 7<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">7</span>, b = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a + b = %d\n&quot;</span>, a + b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a - b = %d\n&quot;</span>, a - b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a * b = %d\n&quot;</span>, a * b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a / b = %d\n&quot;</span>, a / b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a %% b = %d\n&quot;</span>, a % b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sum);</span><br><span class="line"><span class="comment">//通过scanf函数为sum变量录入4位的正整数</span></span><br><span class="line"><span class="comment">//atoi();itoa();</span></span><br><span class="line"><span class="comment">/*itoa();</span></span><br><span class="line"><span class="comment">9527 -&gt; &quot;9527&quot;</span></span><br><span class="line"><span class="comment">9527 / 1000 = 9 + &#x27;0&#x27; = &#x27;9&#x27;</span></span><br><span class="line"><span class="comment">9527 / 100 % 10 = 5 + &#x27;0&#x27; = &#x27;5&#x27;</span></span><br><span class="line"><span class="comment">9527 / 10 % 10 = 2 + &#x27;0&#x27; = &#x27;2&#x27;</span></span><br><span class="line"><span class="comment">9527 % 10 = 7 + &#x27;0&#x27; = &#x27;7&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;千位 : %d\n&quot;</span>, sum / <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;百位 : %d\n&quot;</span>, sum / <span class="number">100</span> % <span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;十位 : %d\n&quot;</span>, sum / <span class="number">10</span> % <span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;个位 : %d\n&quot;</span>, sum % <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"><span class="comment">//通过某种方法交换a和b的值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tmp = a;</span></span><br><span class="line"><span class="comment">a = b;</span></span><br><span class="line"><span class="comment">b = tmp;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">a = a + b;<span class="comment">//a = 13 + 7 = 20</span></span><br><span class="line">b = a - b;<span class="comment">//b = 20 - 7 = 13</span></span><br><span class="line">a = a - b;<span class="comment">//a = 20 - 13 = 7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><pre><code>    &gt;是否大于    &lt;是否小于    ==是否相等    &gt;=是否大于等于    &lt;=是否小于等于    !=是否不等于一个表达式经过关系运算符的运算,最终会生成真假值    0为假,非0为真    默认的真值是1<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 &gt; 7 = %d\n&quot;</span>, <span class="number">13</span> &gt; <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 &lt; 7 = %d\n&quot;</span>, <span class="number">13</span> &lt; <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 == 7 = %d\n&quot;</span>, <span class="number">13</span> == <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 &gt;= 7 = %d\n&quot;</span>, <span class="number">13</span> &gt;= <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 &lt;= 7 = %d\n&quot;</span>, <span class="number">13</span> &lt;= <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;13 != 7 = %d\n&quot;</span>, <span class="number">13</span> != <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><pre><code>    &amp;&amp;逻辑与表达式1 &amp;&amp; 表达式2        全真才为真,有假就是假    ||逻辑或表达式1 || 表达式2        全假才为假,有真就是真    !逻辑非!(表达式)        真假互换    表达式1 &amp;&amp; 表达式2        如果表达式1为真,会执行表达式2的内容        如果表达式1为假,不会执行表达式2的内容    表达式1 || 表达式2        如果表达式1为真,不会执行表达式2的内容        如果表达式1为假,会执行表达式2的内容-----------------------1.罗列一下判断是否是闰年的条件(能被4整除但是不能被100整除 或者 能被400整除)(year % 4 == 0 &amp;&amp; year % 100 != 0) || (year%400==0)2.罗列三角形的条件(普通 直角 等腰 等边)    a b c    a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; b + c &gt; a    a * a + b * b == c * c ||    a * a + c * c == b * b ||    b * b + c * c == a * a    a == b || a == c || b == c    a == b &amp;&amp; a == c-----------------------<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#赋值运算符</span><br><span class="line">= += -= *= /= %= &lt;&lt;= ...</span><br><span class="line">会把赋值运算符右边的项先进行计算,</span><br><span class="line">再赋值给赋值运算符左边的项(左值)</span><br><span class="line">a += <span class="number">1</span>;<span class="comment">//a = a + 1;</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a *= <span class="number">2</span> + <span class="number">3</span>;<span class="comment">// a = a * (2 + 3);</span></span><br><span class="line">a = <span class="number">50</span></span><br><span class="line">```C</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><pre><code>    也是C语言唯一的一个三目运算符    ? :    part.1 ? part.2 : part.3;如果part.1为真,会执行part.2的内容如果part.1为假,会执行part.3的内容<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> min = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">min = a &lt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;min = %d\n&quot;</span>, min);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line"></span><br><span class="line">(year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||(year%<span class="number">400</span>==<span class="number">0</span>)?<span class="built_in">printf</span>(<span class="string">&quot;%d年是闰年\n&quot;</span>, year) : <span class="built_in">printf</span>(<span class="string">&quot;%d年是平年\n&quot;</span>, year);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><pre><code>    (数据类型)    可以把操作的内容临时的强制转换成某种数据类型    将来会在底层内核驱动大量使用强制类型转换的运算符<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f = %d\n&quot;</span>, (<span class="type">int</span>)f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h1><pre><code>    ++自增    --自减    如果a++或者++a自己为独立的一条语句,执行时没有区别    如果和别的语句一起使用,会有区别    a++ : 先使用a的值做操作,再自增    ++a : 先自增,再使用a的值做操作<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a++ = %d\n&quot;</span>, a++);</span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;++a = %d\n&quot;</span>, ++a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注意 : 作为嵌入式开发工程师,2的0次方 ~ 2的10次方在底层内核驱动中做位运算需要保证是在无符号的环境中进行运算位运算符    &lt;&lt;按位左移        会把操作数的二进制位,每一位都进行左移的操作        在某种程度上来说,按位左移相当于是乘法运算        左移多少位就相当于乘以2的多少次方        char c = 13;        c &lt;&lt;= 3;//c * 2的3次方 = 13 * 8 = 104    &gt;&gt;按位右移        会把操作数的二进制位,每一位都进行右移的操作        在某种程度上来说,按位右移相当于是除法运算(取商)        右移多少位就相当于 / 2的多少次方,取商    &amp;按位与        全1才是1,有0就是0    |按位或        全0才是0,有1就是1    ~按位取反(每一位都要取反)        0变成1,1变成0    ^按位异或        相同为0,不同为1<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">13</span>;<span class="comment">//00001101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="comment">//c = c &lt;&lt; 2;//00110100-&gt;32+16+4=52</span></span><br><span class="line"><span class="comment">//c = c &lt;&lt; 3;//01101000-&gt;64+32+8=104</span></span><br><span class="line">c = c &lt;&lt; <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">13</span>;<span class="comment">//00001101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">c = c &gt;&gt; <span class="number">2</span>;<span class="comment">//00000011</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">c = a &amp; b;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a0 0 0 0 1 1 0 1</span></span><br><span class="line"><span class="comment">&amp;</span></span><br><span class="line"><span class="comment">b0 0 0 0 0 1 1 1</span></span><br><span class="line"><span class="comment">=</span></span><br><span class="line"><span class="comment">c0 0 0 0 0 1 0 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">c = a | b;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a00001101</span></span><br><span class="line"><span class="comment">|</span></span><br><span class="line"><span class="comment">b00000111</span></span><br><span class="line"><span class="comment">=</span></span><br><span class="line"><span class="comment">c00001111</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">13</span>;<span class="comment">//00001101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line">c = ~c;<span class="comment">//11110010-&gt;-114</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>char c = 13;原码0 0 0 0 1 1 0 1补码0 0 0 0 1 1 0 1~补码1 1 1 1 0 0 1 0原码1 0 0 0 1 1 1 0    c = -14char c = -13;c = ~c;原码1 0 0 0 1 1 0 1补码1 1 1 1 0 0 1 1~补码0 0 0 0 1 1 0 0原码0 0 0 0 1 1 0 0    c = 12<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    unsigned char c = -1;原码1 0 0 0 0 0 0 1补码1 1 1 1 1 1 1 1    printf(&quot;c = %d\n&quot;, c);    c = 255    unsigned char c = -2;原码1 0 0 0 0 0 1 0补码1 1 1 1 1 1 1 0<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">c = a ^ b;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a00001101</span></span><br><span class="line"><span class="comment">^</span></span><br><span class="line"><span class="comment">b00000111</span></span><br><span class="line"><span class="comment">=</span></span><br><span class="line"><span class="comment">c00001010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">-13</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line">c &lt;&lt;= <span class="number">4</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">c = -13</span></span><br><span class="line"><span class="comment">原1 0 0 0 1 1 0 1</span></span><br><span class="line"><span class="comment">补1 1 1 1 0 0 1 1</span></span><br><span class="line"><span class="comment">c &lt;&lt; 4</span></span><br><span class="line"><span class="comment">补0 0 1 1 0 0 0 0</span></span><br><span class="line"><span class="comment">原0 0 1 1 0 0 0 0</span></span><br><span class="line"><span class="comment">c = 48</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;c = %d\n&quot;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="位运算符的真正使用"><a href="#位运算符的真正使用" class="headerlink" title="位运算符的真正使用"></a>位运算符的真正使用</h1><pre><code>注意:1.在做位运算时,只改变要操作的位,其他位要保持不变2.如果想要置1用按位或3.如果想要清0用按位与4.按位或上0,会保持不变5.按位与上1,会保持不变6.如果一次性想要操作多个位,一定要先清零再赋值1.例如:GPIOA是一个32bit的寄存器,    现在想要把该寄存器的第3位置1GPIOA |= (1 &lt;&lt; 3);--------------------------------------------------100000000 00000000 00000000 000000011&lt;&lt;300000000 00000000 00000000 00001000|GPIOAXXXXXXXX XXXXXXXX XXXXXXXX XXXX#XXX=GPIOAXXXXXXXX XXXXXXXX XXXXXXXX XXXX1XXX--------------------------------------------------2.例如:GPIOA是一个32bit的寄存器,    现在想要把该寄存器的第4位清0    GPIOA &amp;= ~(1 &lt;&lt; 4);--------------------------------------------------100000000 00000000 00000000 000000011&lt;&lt;400000000 00000000 00000000 00010000~(1&lt;&lt;4)11111111 11111111 11111111 11101111&amp;GPIOAXXXXXXXX XXXXXXXX XXXXXXXX XXX#1XXX=GPIOAXXXXXXXX XXXXXXXX XXXXXXXX XXX01XXX--------------------------------------------------3.例如:GPIOA是一个32bit的寄存器,    现在想要把该寄存器的第11 10 9 8位变为1010    GPIOA &amp;= ~(15 &lt;&lt; 8);    GPIOA |= (10 &lt;&lt; 8);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 03c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02linux_04day</title>
      <link href="/2023/02/16/embsky/02linux/02linux_04day/"/>
      <url>/2023/02/16/embsky/02linux/02linux_04day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-14<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.编辑器        vim            命令模式                光标的定位                    h j k l gg G 3G /string(n N)                文本的编辑                    yy p P dd u ctrl+r r x D                模式的切换                    iIoOaA                    :                    v                    V                    ctrl + v            编辑模式                文本的补齐                    ctrl + p            命令行模式                w q wq q! wqa                 3,6 s/srcname/destname/                g %            可视模式                代码格式的调整            可视行模式            可视块模式                块插入                块删除                块替换            替换模式    2.编译器        gcc-&gt;cc        a.out        gcc hello.c -o hello        gcc -Wall    3.用户管理        sudo useradd 用户名        sudo passwd 用户名        sudo userdel 用户名            -r    4.权限管理        基本权限和特殊权限符号数字含义对于普通文件的影响对于目录文件的影响r4可读是否可以读取文件内容是否可以列出子文件w2可写是否可以修改文件内容是否可以创建或删除子文件x1可执行是否可以执行文件内容是否可以访问该目录</code></pre><h1 id="二-文件的特殊权限"><a href="#二-文件的特殊权限" class="headerlink" title="二.文件的特殊权限"></a>二.文件的特殊权限</h1><pre><code>    无论是suid sgid 还是 sticky,影响的都是可执行的权限    所以加入特殊的权限将来会出现在 x 的位置    suidu+s4        sudo chmod u+s 文件名        如果文件本身的user权限中有x权限,那么u+s之后,s是小写的        如果文件本身的user权限中没有x权限,那么u+s之后,S是大写的        一般来说只会在可执行命令中加入u+s的权限        特性 : 拥有suid权限的命令,任何用户在使用这个命令时,            都会拥有这个命令的所有者的权限来执行        (简单来说就是在执行命令时,以命令所有者的权限来运行)    sgidg+s2        sudo chmod g+s 文件名        如果文件本身的group权限中有x权限,那么g+s之后,s是小写的        如果文件本身的group权限中没有x权限,那么g+s之后,S是大写的        一般来说只会在目录文件中加入g+s的权限        特性 : 拥有sgid权限的目录,任何用户在该目录下创建的文件            都会继承该目录的属组        (无论是普通用户还是超级用户,在g+s的目录下创建文件都会修改属组)    stickyo+t1        sudo chmod o+t 文件名        如果文件本身的other权限中有x权限,那么o+t之后,t是小写的        如果文件本身的other权限中没有x权限,那么o+t之后,T是大写的        一般来说只会在目录文件中加入o+t的权限        特性 : 拥有sticky权限的目录,当其他用户想要删除文件时,            只能删除自己创建的文件        (当超级用户进入到o+t权限的目录中,可以删除所有文件)    没有特殊权限0</code></pre><h1 id="三-削减权限umask"><a href="#三-削减权限umask" class="headerlink" title="三.削减权限umask"></a>三.削减权限umask</h1><pre><code>    当创建文件时,本身文件的权限过大,需要通过umask的值削减文件的权限    在终端中录入 umask 可以查看当前umask值    也可以修改umask数值 : umask 0022    修改的umask的数值越大,创建的文件的权限越小    在Linux系统中,默认创建的普通文件的权限是0666,        0666 - 0002 = 0664(rw-rw-r--)    在Linux系统中,默认创建的目录文件的权限是0777,        0777 - 0002 = 0775(rwxrwxr-x)</code></pre><h1 id="四-进程的简介"><a href="#四-进程的简介" class="headerlink" title="四.进程的简介"></a>四.进程的简介</h1><pre><code>    其实用户在操作系统中做的任何的操作都需要有进程的支持    进程 : 其实是一个程序运行时的一个过程    一个进程可以创建出多个子进程的    主进程 : 父进程    创建出的进程 : 子进程    可以调用函数 : fork()    僵尸进程 : 当父进程创建出子进程,子进程去工作,当子进程做完任务之后            父进程没有给子进程收尸,子进程会变成僵尸进程    孤儿进程 : 当父进程创建出子进程,子进程去工作,如果父进程提前结束了            没有人管理子进程,子进程会变成孤儿进程程序运行-----&gt;主进程-----&gt;父进程--&gt;等待子进程结束-收尸-&gt;程序结束                    ||                    fork()|                    ||                    子进程----&gt;做工作-----&gt;结束(仆街)    ps//可以查看进程    ps -aux//查看所有进程信息    当系统启动之后首先会创建一个进程PID为1叫做初始进程(init)USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND        USER运行该进程的用户        PID进程ID号        %CPUCPU的占用百分比        %MEM内存的占用百分比        VSZ占用虚拟内存        RSS占用实际内存        TTY进程运行的终端        STAT进程的状态            R运行状态            s进程组,下面会有子进程            S睡眠状态(可以中断)            D睡眠状态(不可中断)            Z僵尸状态            X死掉的进程            ...        START启动的时间        TIME占用CPU的时间        COMMAND进程名    ============================================./a.outint max(int a, int b)&#123;    return a &gt; b ? a : b;&#125;int add(int a, int b)&#123;    return a + b;&#125;int main(void)&#123;    add(13, 7);    max(13, 7);    return 0;&#125;    return 0;函数正常运行    &gt; 0函数有异常    &lt; 0函数有错误一个进程会有虚拟内存4Gb,实际上只占用了实际内存的4Kb----------------------------面试题    1.C语言的程序会把内存分为几个区?        5大区        (栈区 堆区 常量区 全局区 代码区)                    char *p = &quot;Hello World!&quot;;                    static----------------------------    1GbKernel(内核)    ----------------------    3Gb环境变量/命令行参数            栈区(从上往下分配)                空白空间            堆区(从下往上分配)            常量区(.RO&lt;只读&gt;)            全局区(.bss .data)            代码区(.text)================================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 02linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02linux_02day</title>
      <link href="/2023/02/16/embsky/02linux/02linux_02day/"/>
      <url>/2023/02/16/embsky/02linux/02linux_02day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-12<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.介绍    2.课程安排    3.Ubuntu的Linux操作系统    4.介绍Linux由来    5.介绍Linux系统的根目录    6.终端的使用    7.常用的命令        cd ls(-a\-i\-l) pwd touch mkdir         cat(less more head tail)        cp mv rm tardrwxr-xr-x  14 root root  4096 9月  16  2021 varlrwxrwxrwx   1 root root    30 7月  11 08:56 vmlinuz -&gt; boot/vmlinuz-5.4.0-121-generic    part.1文件类型(7种文件类型)            -普通文件            d目录文件            c字符设备文件            b块设备文件            p管道文件            s网络套接字文件            l链接文件(符号链接文件)    part.2文件权限            rwxr---wx            文件所属者文件所属组其他用户            743            r4可读            w2可写            x1可执行            -0该处无权限</code></pre><h1 id="二-命令的补充"><a href="#二-命令的补充" class="headerlink" title="二.命令的补充"></a>二.命令的补充</h1><pre><code>    在Linux环境中有两种链接文件(硬链接 和 符号链接)    ln(创建链接文件&lt;既可以创建硬链接,也可以创建符号链接&gt;)    1.ln + 源文件名 + 目标文件名//创建了硬链接文件    -------------------------------------------------    源文件和目标文件共用同一个文件inode号    任意修改一个文件的文件内容,另外的一个文件也会发生改变    移动或者删除源文件对于硬链接文件不会有影响    会改变文件的硬链接数    -------------------------------------------------    2.ln + -s + 源文件名 + 目标文件名//创建符号链接文件    -------------------------------------------------    符号链接文件类似于windows环境下的快捷方式    源文件和符号链接文件使用文件inode号不同    任意修改一个文件的文件内容,另外的一个文件也会发生改变    移动或者删除源文件对于符号链接文件会有影响    -------------------------------------------------    3.总结    硬链接    创建方式 : ln 源文件 目标文件    其实硬链接就是一个文件拥有多个文件名    源文件和硬链接文件可以在相同目录中也可以在不同目录中    注意:        1)修改源文件或者硬链接文件,对于另外一个文件也会发生修改        2)移动或者删除源文件或硬链接文件,对于另外一个文件没有影响        3)硬链接文件不占用存储空间        4)不能对于目录文件进行创建硬链接文件            (即便是超级用户也不行,在Linux环境中目录是有硬链接的)            (但是是系统默认创建出来的,用户是创建不了的)            (. 就是当前目录的硬链接, .. 就是上一级目录的硬链接)        5)硬链接文件不能跨系统分区或者文件系统    符号链接    创建方式 : ln -s 源文件 目标文件    符号链接文件类似于windows环境下的快捷方式    符号链接文件内部保存的是源文件的文件名或者路径    注意 :         1)符号链接文件会占用存储空间,保存的是链接的文件的文件名或者路径        2)符号链接文件是一个独立的文件,它的存在不依赖于源文件        3)如果移动 重命名 删除源文件,对于符号链接文件会有影响            虽然受影响,但是链接关系依然存在        find(查找文件)    1.find -name 文件名//通过文件名查找文件        grep(检索文件内容&lt;针对文件内容进行过滤&gt;)    1.grep &#39;过滤的内容&#39; 过滤文件的文件名//从该文件中过滤相关的内容    2.grep &#39;^root&#39; 过滤文件的文件名//从该文件中过滤相关的内容                                    //^代表查找过滤的内容出现在行首    3.grep &#39;bash$&#39; 过滤文件的文件名//从该文件中过滤相关的内容                                    //$代表查找过滤的内容出现在行尾</code></pre><h1 id="三-帮助手册"><a href="#三-帮助手册" class="headerlink" title="三.帮助手册"></a>三.帮助手册</h1><pre><code>    1.命令 --help//可以查阅命令的帮助手册    2.如果查找函数可以使用man手册//有困难,找男人        1)man 要查找的内容//默认是从第一本man手册开始查找        2)man man//可以查阅如何使用man手册            1   可执行程序或 shell 命令            2   系统调用(内核提供的函数)            3   库调用(程序库中的函数)            4   特殊文件(通常位于 /dev)            5   文件格式和规范，如 /etc/passwd            6   游戏            7   杂项(包括宏包和规范，如 man(7)，groff(7))            8   系统管理命令(通常只针对 root 用户)            9   内核例程 [非标准        3)man 数字 查找的内容//可以指定打开某一本手册            man 3 printf            man 3 sleep        4)man -f 查找的内容//把man手册中所有有关查找的内容列出        ------------------------        在man手册中,按 q 可以退出man手册        在man手册中,查找关键字可以用 /查找的关键字        按 n 从上往下查找,按 N 从下往上查找        ------------------------</code></pre><h1 id="四-Linux环境中软件的安装"><a href="#四-Linux环境中软件的安装" class="headerlink" title="四.Linux环境中软件的安装"></a>四.Linux环境中软件的安装</h1><pre><code>    注意 :         1.在安装软件时,需要访问/etc /sys /usr /var...目录        有些目录普通用户没有权限访问,所以在安装软件时需要加 sudo        提升用户权限        2.在使用sudo时,需要在终端中录入密码,在终端中录入密码是取消回现的    1.从软件源安装软件(必须可以链接外网)        前提准备:需要更换软件源        显示应用程序-&gt;软件和更新-&gt;下载自-&gt;其他站点-&gt;腾讯/阿里/华为/清华        在安装软件时可以先更新软件源 :         sudo apt-get update        sudo apt-get upgrade            可以加入 -y 的选项默认选择yes        sudo apt-get install 安装软件的名字 -y        ------------------------        可以做的实验,可以安装        sl        ifconfig        fbset        ------------------------        sudo apt-get autoremove 要卸载的东西            删除已安装的软件包,不会删除依赖的软件包,会保留配置文件        注意:慎用(容易把图形化界面搞崩溃)        sudo apt-get remove 要卸载的东西            删除已安装的软件包,不会删除依赖的软件包,会保留配置文件        sudo apt-get purge            删除已安装的软件包,也会删除依赖的软件包        sudo apt clean            会把/var/cache/apt/archives目录中的所有.deb的包            清除掉    2.从官网下载官方的软件包进行安装        (Ubuntu-&gt;从官网上下载.deb结尾的软件包)        (Red Hat-&gt;从官网上下载.rpm结尾的软件包)        sudo dpkg -i xxxxx.deb//安装软件        sudo dpkg -l 软件名//确定软件包的名字        sudo dpkg -r 软件名//删除软件        sudo dpkg -p 软件名//清除信息        ------------------------        可以做的实验,可以安装        VNC Viewer        WPS        百度网盘        网易云音乐        向日葵        腾讯会议        星际译王        ------------------------        QQ不推荐        搜狗输入法不推荐        ------------------------    3.从官网下载源码包进行安装        1)从官方网站下载源码包(一般来说就是tar包)        2)把源码包进行解压缩(tar -xvf)        3)./configure//检查编译环境是否缺少需要的库        4)make -j4//编译源码(-j4调动所有硬件资源)        5)sudo make install//安装软件        ------------------------        可以做的实验,可以安装        MPlayer        --------------------------------------------------------作业 : 1.把今天讲过的内容完完整整的复习一遍2.尝试使用其他的查找方法,查找文件--------------------------------</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 02linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02linux_03day</title>
      <link href="/2023/02/16/embsky/02linux/02linux_03day/"/>
      <url>/2023/02/16/embsky/02linux/02linux_03day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-13<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    命令的补充    ln//用来创建链接文件    ln 源文件 目标文件//创建的是硬链接文件    ln -s 源文件 目标文件//创建的是符号链接文件    find//查找文件    grep//检索文件内容    man手册的使用    Ubuntu系统软件的安装    1.sudo apt-get install    2.从官网下载软件包,进行安装        sudo dpkg -i    3.从官网下载源码包,进行安装        ./config        make -j4        make install</code></pre><h1 id="二-编辑器和编译器"><a href="#二-编辑器和编译器" class="headerlink" title="二.编辑器和编译器"></a>二.编辑器和编译器</h1><pre><code>    1.编辑器(编写程序)        vi vim gedit emacs        vim : 是vi编辑器的高级版本        注意 :                1.vim后边需要加文件名                2.vim除了可以打开文件以外也可以创建文件                3.保存退出,不要直接关闭终端,否则会生成交换文件                vim 文件名                    |        按iIoOaAV按 :编辑模式(插入)&lt;-----命令模式-----&gt;命令行模式(底行)            -----&gt;&lt;-----        按 esc删除 :        1)在命令模式下的操作            1&gt;光标的定位                h(向左) j(向下) k(向上) l(向右)                gg光标回到首行                G光标回到末行                23G光标定位到第23行                /要找的内容光标直接定位到出现要找的内容的位置                            (n向下查找 N向上查找)            2&gt;文本的编辑                yy复制(把光标所在行的内容进行复制)                p粘贴(把复制的内容粘贴到光标所在行的下面)                P粘贴(把复制的内容粘贴到光标所在行的上面)                dd剪切/删除(把光标所在行的内容进行剪切)                3yy复制3行内容                3dd剪切/删除3行内容                3p粘贴3次(粘贴到光标所在行的下面)                3P粘贴3次(粘贴到光标所在行的上面)                ygg从首行到光标所在行进行复制                yG从光标所在行到末行进行复制                x删除光标所在位置的内容                D从光标所在位置到行末进行删除                u撤销(undo)                ctrl + r重做(redo)                r替换(只能替换一个字符)            3&gt;模式的切换                iIoOaA进入编辑模式(插入模式)                :进入命令行模式(底行模式)                v进入可视模式                --------------------------------                调整代码格式                    a.进入到可视模式中                    b.把需要调整格式的代码通过上下键选中                    c.按 = 进行调整                注意 : 让张老师调代码,先把代码格式调整好了                --------------------------------                V进入可视行模式                ctrl+v进入可视块模式                --------------------------------                块插入                    a.ctrl + v进入到可视块模式                    b.通过上下键选择要插入的块                    c.进入编辑模式(I在选择的块前插入A在选择的块后插入)                    d.录入要插入的内容                    e.按两下 esc                块删除                    a.ctrl + v进入到可视块模式                    b.通过上下键选择要删除的块                    c.按 d 进行删除                块替换                    a.ctrl + v进入到可视块模式                    b.通过上下键选择要替换的块                    c.按 r 进入替换的操作                    d.录入要替换的字符                --------------------------------                R进入替换模式        2)在编辑模式下的操作            1&gt;文本补齐的功能                ctrl + p        3)在命令行模式下的操作            1&gt;保存退出                :w保存                :q退出                :wq保存并且退出                :q!强制退出                :wqa保存所有文件,退出所有文件            2&gt;查找和替换                :3,7 s/root/zack/                        把3-7行第一次出现的root替换成zack                :3,7 s/root/zack/g                        把3-7行出现的所有的root替换成zack                        g代表的是全局的意思                :% s/root/zack/g                        把全文出现的所有的root替换成zack                        %代表的是全文的意思        4)修改vim的配置文件            vim /etc/vim/vimrc会影响所有用户            vim ~/.vimrc会影响当前用户            可以从网上找各种vim的配置方法        5)使用vim打开多个文件            注意 : 不要用vim一次性打开多个文件,否则vim会崩溃            vim -O 多个文件//以纵向的标签栏打开多个文件            vim -o 多个文件//以横向的标签栏打开多个文件                可以使用ctrl + w(两下)切换文件            vim -p 多个文件//以标签页的形式打开多个文件                可以使用ctrl + alt + pgup/pgdn切换文件    2.编译器        在X86环境中有gcc编译器和cc编译器        gcc编译器依赖于cc编译器        在ARM环境中需要使用交叉编译工具链 : arm-linux-gcc        X86环境和ARM环境会有大端格式和小端格式的区分        --------------------------------------------        设计一套程序,测试当前环境是大端格式和小端格式        --------------------------------------------                gcc .c文件        1.编译之后什么都没有提示,代表程序没有语法错误,会生成可执行文件        2.编译之后报出警告,代表程序有点问题,但是不是致命的错误,                也会生成可执行文件        3.编译之后报出错误,代表程序有致命的问题,不会生成可执行文件        默认生成的可执行文件的名字是a.out        以 ./a.out 的方式执行可执行文件        gcc hello.c -o hello//可以指定生成的可执行文件的文件名        gcc -Wall hello.c//可以列出所有警告</code></pre><h1 id="三-用户管理"><a href="#三-用户管理" class="headerlink" title="三.用户管理"></a>三.用户管理</h1><pre><code>    1.用户的分类        功能上区分 : 超级用户 和 普通用户        超级用户是在安装Linux操作系统时自动创建的用户        普通用户是由超级用户或者普通用户创建出来的        范围上区分 : 本地用户 和 网络用户        创建在本地计算机上的用户是本地用户        创建在远端服务器上的用户是网络用户    2.用户创建的描述        注意 : 虽然都是Linux操作系统,但是不同公司有不同区别        当创建用户时,伴随着会创建一系列的东西        1)系统会为新创建的用户分配一个唯一的编号,叫做UID        2)系统会为新创建的用户,创建一个同名的组,            并且分配一个唯一的编号,叫做GID        3)系统会把新创建的用户加入到同名的组中,这个组也叫做这个用户的主组        4)系统会在/home/目录中创建一个同名的目录,作为新用户的家目录使用        5)系统会把/etc/skel目录中的文件拷贝到新用户的家目录中,            作为基础的配置文件进行使用        6)系统会把新用户的信息记录到/etc/passwd文件中            查看/etc/passwd文件            注意:            1&gt;/etc/passwd文件中每一行就是一个用户的信息            2&gt;/etc/passwd文件中每个信息通过 : 分割            root:x:0:0:root:/root:/bin/bash                1&gt;root代表的是用户名                2&gt;x代表的是密码(密码移到了/etc/shadow文件)                3&gt;0代表的是UID                ----------------------                UID : 0是超级用户                UID : 1 - 499是系统用户                UID : &gt;= 500是普通用户                ----------------------                4&gt;0代表的是GID                5&gt;root代表对于该用户的描述                6&gt;/root代表该用户的家目录                7&gt;/bin/bash代表该用户登陆Linux终端时使用的命令解释器        7)系统会把用户的密码记录到/etc/shadow文件中            查看/etc/shadow文件zack:$6$1bVyc6zY$GrJ/9j8jngCDD54QkuDEgZqQJnlWV.MG2ngEFvHkQ    dLlkC7AINt6jsm74f8FZvFRuWK5zcz1kf29/LnzakCkd/:19182:0:9999    9:7:::                1&gt;zack代表的是用户名                2&gt;$6$代表的是加密之后的密码                3&gt;19182上次更改密码的日期(从1970-1-1开始算)                4&gt;0最短的密码期限(按天算,0代表无最短期限)                5&gt;99999最长的密码期限(按天算)                6&gt;7密码的警告期限        8)系统会把新用户的组的信息记录到/etc/group文件中    3.用户的创建        sudo useradd 用户名//创建用户(用户名不能重复)        sudo passwd 用户名//修改用户的密码        sudo su 用户名//切换用户        ctrl + d//结束当前终端用户的登陆        sudo userdel 用户名//删除用户(只删除用户)        sudo userdel -r 用户名//除了删除用户,伴随着会删除创建的东西</code></pre><h1 id="四-文件权限的管理"><a href="#四-文件权限的管理" class="headerlink" title="四.文件权限的管理"></a>四.文件权限的管理</h1><pre><code>    1.文件权限的介绍        在Linux操作系统中用户访问的任何文件都是有权限的        权限可以分为基本权限和特殊权限        1)基本权限            rwxrw-r--            文件所属者的权限文件所属组的权限其他用户的权限符号数字含义对于普通文件的影响对于目录文件的影响r4可读是否可以读取文件内容是否可以列出目录的子文件w2可写是否可以修改文件内容是否可以创建或删除子文件x1可执行是否可以执行文件内容是否可以访问目录内容        2)修改文件的权限        sudo chmod 权限 文件名//修改文件的权限    //由于权限的表示方法有符号表示和数字表示,所以本身修改权限的方法有很多    //如果修改目录的权限想要影响子文件或者子目录,需要加-R        sudo chmod -R 权限 文件名            1&gt;使用符号表示法            rwxrw-r--            文件所属者的权限文件所属组的权限其他用户的权限            ugo            u表示文件所属者的权限            g表示文件所属组的权限            o表示其他用户的权限            a表示所有用户的权限                       u+r             sudo chmod g-w 文件名                       o=x            2&gt;使用数字表示法            数字表示法也叫做八进制表示法            sudo chmod 456 test            //test的文件所属者是r--            //test的文件所属组是r-x            //test的其他用户是rw-        3)修改文件的属主和属组            sudo chown 名字 文件//用来修改文件的属主            sudo chown .名字 文件//用来修改文件的属组            sudo chown 名字.名字 文件                //既修改文件的属主也修改文件的属组==============================================实验1.创建用户sudo useradd tom2.修改用户密码sudo passwd tom3.创建家目录sudo mkdir /home/tom                    (tom目录创建之后本来属于root用户)4.拷贝模板配置文件sudo cp /etc/skel/.* /home/tom5.修改家目录的属主属组sudo chown -R tom.tom /home/tom6.修改命令解释器sudo vim /etc/passwd                    把tom用户的命令解释器修改成/bin/bash                    保存退出7.切换用户-&gt;做实验==============================================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 02linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02linux_01day</title>
      <link href="/2023/02/16/embsky/02linux/02linux_01day/"/>
      <url>/2023/02/16/embsky/02linux/02linux_01day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-11<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一.介绍"></a>一.介绍</h1><pre><code>    上课时间(课前阅读单词 | 随机抽取学生复述昨天讲过的内容)    09:00 - 12:00    13:30 - 17:30    18:30 - 20:30    周一 到 周五    节假日以及周六周日休息(周六有自习室)    课程安排    预科通过预科时间把大家的基础拉平    --------------------------------    Linux基础(环境安装\命令\软件安装\权限管理\用户管理\服务搭建)    Linux下C语言(变量\运算符\分支语句\循环\跳转\数组\函数\指针\)                (复合型数据类型\预处理\文件IO)    数据结构(链表\栈式存储结构\队列式存储结构\树存储结构\哈希表)    ---------考试以及项目-------------    APUE(标准IO\系统调用IO\信号\进程\线程\进程间通信)                (网络套接字TCP/UDP)    C++/QT()    ---------考试以及项目-------------    智能终端单片机开发(裸板驱动)    ---------------项目--------------    边缘计算高端芯片的开发(带操作系统的驱动)    ---------------项目--------------    就业环节压力面试\压力笔试</code></pre><h1 id="二-Linux环境的安装"><a href="#二-Linux环境的安装" class="headerlink" title="二.Linux环境的安装"></a>二.Linux环境的安装</h1><pre><code>    环境的安装    1.双系统        准备        1)把笔记本的硬盘分出空白的空间(100G)        2)系统盘            (光盘安装\U盘安装\网络安装)    2.虚拟机        准备        1)虚拟机软件(vmware\vboxs)        2)镜像(开源的镜像网站)    3.注意:无论是双系统的安装还是虚拟操作系统的安装,分区需要选择手动分区        例如:分了100G的空间        8192Mb交换空间        剩余的一半空间/home        剩余的所有空间/</code></pre><h1 id="三-Linux的历史"><a href="#三-Linux的历史" class="headerlink" title="三.Linux的历史"></a>三.Linux的历史</h1><pre><code>    在市面上的电子产品的万年历的功能    1.RTC的功能可以查找基准时间        1)1900年1月1日这一天是星期一        2)1970年1月1日计算机元年        3)2000年1月1日千禧年(千年虫)    2.计算机元年        在美国一家通讯公司,AT&amp;T公司(马刺队)        AT&amp;T公司里面有个实验室叫做贝尔实验室        丹尼斯.里奇(C语言之父)用闲置的电脑写了一个游戏--太空旅行        丹尼斯.里奇和肯.汤姆逊使用BSPL语言(B语言)在机器上写通用程序        觉得B语言不好用,所以创立了C语言                丹尼斯.里奇和肯.汤姆逊写了系统,叫做UNIX                美国加州学院伯克利分院一个教授通过UNIX写了一个minix,用于教学        这个教授的学生林纳斯,写了Linux    3.可以在电脑上查询信息        uname -a查询内核版本以及操作系统版本</code></pre><h1 id="四-Linux系统的认知"><a href="#四-Linux系统的认知" class="headerlink" title="四.Linux系统的认知"></a>四.Linux系统的认知</h1><pre><code>    windowsLinux            500G    C D E F/(根目录)    4棵树1棵树    /(根目录)        bin存放的是二进制的文件(命令)        boot存放的是用来引导内核的文件        dev存放的是各种设备文件        etc存放的是配置文件        home存放的是普通用户的家目录        lib存放的是各种库文件(动态库和静态库)        media用来挂载存储介质或者媒体介质的文件        mnt系统默认可以使用的挂载的目录        proc动态的目录(不能用于存储文件)                    (系统内核的信息\进程的信息\内存映射的信息)        root超级用户的家目录        sbin存放系统的二进制文件        sys存放系统的文件        usr存放的是应用程序\头文件</code></pre><h1 id="五-终端的使用"><a href="#五-终端的使用" class="headerlink" title="五.终端的使用"></a>五.终端的使用</h1><pre><code>    1.终端的打开        1)通过鼠标右键-&gt;打开终端        2)在Ubuntu左下角有显示应用程序-&gt;全部-&gt;终端        3)快捷键ctrl + alt + t        4)打开终端之后打开终端的标签页            ctrl + shift+ t//打开标签页            ctrl + pgup/pgdn//切换标签页            注意 : 有同学电脑的键盘上的pgup和pgdn和别的按键在一起            有可能在切换标签页的时候需要使用shift或者fn    2.终端提示符    zack@zack-CSTG:~/桌面/2022-6-29_UEA/02linux$         在@之前当前登陆这个终端的用户名        @分割符号        在@之后,:之前主机名        :分割符号        在:之后当前终端所在目录的路径            路径分为绝对路径和相对路径            绝对路径 : 从根目录出发.一层一层递进的目录就是绝对路径            相对路径 : 除了绝对路径都是相对路径            在路径中 ~ 指的是家目录的意思            每个用户都会有家目录            root用户/root            zack用户/home/zack            tom用户/home/tom        #或者$用户的身份识别            #代表的是超级用户            $代表的是普通用户    3.修改终端提示符的长度        1)需要修改配置文件            注意:                如果修改/etc/下边的配置文件,会影响所有用户                如果修改家目录下边的配置文件,会影响当前用户        2)把原有的配置文件拷贝一个备份            cp ~/.bashrc ~/bashrctest        3)修改配置文件            vim ~/.bashrc            -------------------------            1&gt;找到要修改的位置,大约在60行左右            2&gt;PS1=&#39;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#39;            3&gt;把 \h\[\033[00m\]: 删掉代表不再显示主机名            4&gt;把 \w 修改成 \W代表目录路径只显示最后一级            5&gt;保存退出            6&gt;sync代表同步一下信息</code></pre><h1 id="六-命令"><a href="#六-命令" class="headerlink" title="六.命令"></a>六.命令</h1><pre><code>    在Linux下一切皆文件,任何东西在Linux环境中都是以文件形式存在的    在终端提示符之后可以录入命令 或者 可执行文件 或者 程序    终端提示符命令    终端提示符命令 + 选项    终端提示符命令 + 参数    终端提示符命令 + 选项 + 参数    注意 : 命令 选项 参数之间需要用空格隔开    命令 --help可以查看命令的帮助手册    cd(切换目录/改变目录/进入目录)        1.cd + 目录//可以切换到该目录中            如果目录不存在,会提示报错        2.cd + 路径//可以切换到该路径中            可以是绝对路径或者相对路径,但是必须是一个正确的路径        3.cd 直接回车//可以直接回到家目录        4.cd + ..//可以切换到上一级目录    ls(显示当前目录下的文件名)        1.ls 直接回车//显示当前目录下的文件名        2.ls + 文件名//显示当前目录下该文件的文件名        3.ls + 目录名//显示该目录下的文件名        4.ls + -a//显示所有文件包括隐藏文件                        //在Linux环境下以.开头的文件都是隐藏文件                        //任何目录都有来两个默认的隐藏文件                        //. 代表当前目录.. 代表上一级目录        5.ls + -i//显示文件inode号                        //文件是存储在硬盘中的,在Linux文件系统中                        //是通过inode号来管理文件的                        //在硬盘的同一分区中,文件inode号不会重复        6.ls + -l//使用较长格式显示文件信息-rw-r--r-- 1 zack zack 8980 7月   9 15:51 examples.desktopdrwxr-xr-x 2 zack zack 4096 7月   9 16:26 公共的        part.1文件的类型(在Linux环境中一共有7种文件类型)            -普通文件            d目录文件            c字符设备文件            b块设备文件            p管道文件            s网络套接字文件            l链接文件(符号链接文件)        part.2文件的权限(分为基本权限和特殊权限)            rw-r--r--            文件所属者文件所属组其他用户            字符表示数字表示含义            r4可读            w2可写            x1可执行            -0该处无权限        part.3文件链接数        part.4文件所属者        part.5文件所属组        part.6文件的字节数        part.7文件最后修改时间        part.8文件名    pwd(可以显示当前目录所在的绝对路径)    touch(创建普通文件)        1.touch + 文件名//创建以文件名命名的普通文件        如果文件名已经存在,不会修改文件内容,只会修改文件最后修改时间        如果加已存在的目录名,不会修改文件内容,只会修改文件最后修改时间        2.touch + 文件名 + 文件名//可以创建多个文件        注意 : 文件名与文件名之间用空格隔开        3.touch + &#123;1..20&#125;.c//可以创建1.c ... 20.c            touch + &#123;a..z&#125;.c//可以创建a.c ... z.c            touch + &#123;A..Z&#125;.c//可以创建A.c ... Z.c        4.touch + 路径/文件//在该路径下创建新的文件        注意 : 路径可以是相对路径或者绝对路径,但是必须是正确的路径    mkdir(创建目录文件)        1.mkdir + 目录名//创建以目录名命名的目录            注意 : 不能加已有的目录名,会报错        2.mkdir + 目录名 + 目录名//创建多个目录            注意 : 目录名与目录名之间用空格隔开        3.mkdir + &#123;a..z&#125;dir//创建adir ... zdir        4.mkdir + 路径/目录名//可以在该路径下创建目录文件            注意 : 可以是绝对路径或者相对路径,但是必须是正确的路径    rm(删除文件)        1.rm + 文件名//删除文件(普通文件)        2.rm + -r + 目录名//删除目录文件            -r代表递归的操作        3.rm *.c//删除当前目录下所有以.c结尾的文件            rm file*//删除当前目录下以file开头的文件            rm -r dir*//删除当前目录下以dir开头的文件        4.rm + 路径/目录名//删除该目录下的该文件            注意 : 路径可以是绝对路径或者相对路径,但是必须是正确的路径        注意 : 在根目录中千万不要执行 sudo rm -rf *    cat(查看普通文件的文件内容)        1.cat + 普通文件的文件名        2.cat + 路经/普通文件的文件名            注意 : 路径可以是绝对路径或者相对路径,但是必须是正确的路径    ----------------------------    cat把所有的文件内容打印输出到终端中    less从文件的起始位置开始显示,可以通过鼠标滚轮或者键盘上下键翻阅                按q退出    more从文件的起始位置开始显示(显示百分比)                s向下翻阅b向上翻阅q退出    head默认查看文件的前10行    tail默认查看文件的末尾10行    ----------------------------    cp（拷贝文件）    1.cp + 源文件名 + 目标文件名//把源文件的文件内容拷贝到目标文件中    如果目标文件名已存在,源文件的文件内容会覆盖目标文件的文件内容    如果目标文件名不存在,会新建以目标文件名命名的文件,        然后把源文件的文件内容会覆盖目标文件的文件内容    2.cp + 源文件名 + 目录名//会把源文件拷贝到目录中    3.cp + -r + 源目录 + 目标目录//会把源目录拷贝到目标目录中    如果目标目录已存在,会把源目录拷贝到目标目录内    如果目标目录不存在,会新建目标目录,并且把源目录内的文件拷贝到目标目录中        mv(剪切文件\移动文件\改名字)    1.mv + 源文件名 + 目标文件名//剪切文件内容    如果目标文件名不存在,就是把源文件改名字    如果目标文件名已存在,也是把源文件改名字,不过会替代掉重名的文件    注意 : mv在操作目录文件时不需要加 -r 的操作    tar(压缩与解压缩)    1.tar cvf 最终生成的压缩包的名字.tar 要压缩的文件//用来压缩的    2.tar xvf 压缩包的名字.tar//会把压缩包默认解压缩到当前目录下    3.tar xvf 压缩包的名字.tar -C 路径                                //会把压缩包解压缩到指定目录中--------------------------------作业 : 1.把今天讲过的内容完完整整的复习一遍2.抽时间自己安装一遍虚拟操作系统3.查找ls加什么选项可以查看目录名--------------------------------</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 02linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_07day</title>
      <link href="/2023/02/16/embsky/01test/01test_07day/"/>
      <url>/2023/02/16/embsky/01test/01test_07day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-8<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="循环语句-while"><a href="#循环语句-while" class="headerlink" title="循环语句(while)"></a>循环语句(while)</h1><pre><code>while(是C语言的关键字)1.while循环的使用语句1while(循环条件)&#123;    循环的语句&#125;语句2                -------&lt;----------&lt;------                |^                V|语句1-&gt;循环条件的判断(真)-&gt;循环的语句--&gt;|                |                (假)-&gt;语句2-&gt;结束<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">10</span>, j = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i-- || j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d j = %d\n&quot;</span>, i, j);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;=== i = %d j = %d\n&quot;</span>, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="循环语句-do…while"><a href="#循环语句-do…while" class="headerlink" title="循环语句(do…while)"></a>循环语句(do…while)</h1><pre><code>do...while循环(也是C语言的关键字)语句1do&#123;    循环的语句&#125;while(循环的条件);语句2            --------&lt;-----------&lt;--------            |^            V|语句1-&gt;循环的语句-&gt;循环条件的判断(真)---&gt;                        |                        (假)-&gt;语句2-&gt;结束while循环是先执行循环条件的判断,再执行循环的语句do...while循环是先执行循环的语句,再执行循环条件的判断while循环可以一次也不执行循环的语句do...while循环至少会执行一次循环的语句do...while : 在写底层内核驱动时,使用do...while循环做超时处理*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">sum += i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="随机函数"><a href="#随机函数" class="headerlink" title="随机函数"></a>随机函数</h1><pre><code>rand():产生随机数(非负的正整数)的函数    rand() % 1000; [0 ~ 999]以内的随机数    随机产生5位数    rand() % 90000;[0 ~ 89999]    rand() % 90000 + 10000;[10000 ~ 99999]    随机产生-50 ~ 50的随机数    rand() % 100;[0 ~ 99]    rand() % 100 - 50;[-50 ~ 49]srand();:随机种子(可以保证每一次执行程序时,随机数可变)    srand在调用时需要传参,参数是可变的因子time();:时间种子(获取当前时间的秒数)    time(NULL);getpid();:进程种子(获取当前进程的ID号)注意 : srand()函数在程序中值调用一次即可<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">num = rand();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//srand(time(NULL));</span></span><br><span class="line">srand(getpid());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">num = rand() % <span class="number">100</span> - <span class="number">50</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;num = %d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">猜数游戏</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> T = <span class="number">0</span>;<span class="comment">//用于保存随机数</span></span><br><span class="line"><span class="type">int</span> guess = <span class="number">0</span>;<span class="comment">//用于保存录入的数</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"></span><br><span class="line">srand(getpid());<span class="comment">//随机种子</span></span><br><span class="line">T = rand() % <span class="number">1001</span>;<span class="comment">//保存随机数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; ; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line"><span class="keyword">if</span>(T &gt; guess)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Small!\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(T &lt; guess)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Big!\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d]Bingo!\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_06day</title>
      <link href="/2023/02/16/embsky/01test/01test_06day/"/>
      <url>/2023/02/16/embsky/01test/01test_06day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-7<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    分支语句    switch case default    switch(变量)    &#123;        case 整常量1 : 语句1; break;        case 整常量2 : 语句2; break;        case 整常量3 : 语句3; break;        default : 语句4; break;    &#125;    跳转语句    break        如果使用在switch语句中会跳出switch            循环语句    for(循环变量的赋值; 循环变量的控制; 循环变量的变化)    &#123;        循环的语句    &#125;    for循环的变形    1.    for(; ;)这是一个死循环    或者    for(表达式1; ;表达式2)也是一个死循环    等价于    for(表达式1; 1;表达式2)    2.嵌套循环    int i = 0, j = 0;    for(i = 0; i &lt; 3; i++)    &#123;        for(j = 0; j &lt; 4; j++)        &#123;                    &#125;    &#125;    3.int i = 0, j = 0;    for(i = 0, j = 10; i &lt; 5 &amp;&amp; j &gt; 5; i++, j--)================================================</code></pre><h1 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h1><pre><code>1.(1)打印4 * 5 的 *例:********************(2).打印i * j 的 * (i j 键盘接收)    例:i = 4, j = 5    //4-5 5-6    *****    *****    *****    *****(3).打印i * j 的 * 边框(i j 键盘接收)    例: i = 4, j = 5    *****    *   *    *   *    *****2.打印99乘法表    1 * 1 = 1    1 * 2 = 2 2 * 2 = 4    *    **    ***    ****3.计算1+2+3+4+5+...+n, n是从键盘输入的自然数// 穷举4.要将5张100元的大钞票,换成等值的50 20 10 5小钞票,每种面值至少一张,要多少张,有多少种换法5.有1、2、3、4 4个数字,能组成多少个互不相同且无重复的三位数呢6.有这样的一个等式,xyz+yzz=532,编程求x y z的值7.计算1^2 + 2^2 + 3^2 + ... +10^2的结果(1的平方 + 2的平方)8.输入20个人的成绩,输出不及格的人数(0&lt;=score&lt;60 为不及格)9.随机产生100个三位随机数,找出其中能被 3 5 7整除的数10.打印0~100以内所有的质数(只能被1 和 本身整除的数)11.猜数游戏(随机产生一个1000以内的数,去猜,        如果大了打印猜的大了,        如果小了打印猜的小了,        如果正确打印对的        直到猜对了再结束,每次打印必须打印出猜的次数)12. 把11修改成,程序开始时,先输入需要猜的数的范围n例:(想要猜数的范围是(0~10000) 那么变量n接收键盘上10000        范围都是从0开始)13.----------------------------a + b - 9 = 4+--c -d * e = 4/*-f + g - h = 4===444求a b c d e f g h (0 ～ 12范围内)//除法指的是整除 c % f == 0只有一种答案14.求1+12+123+...前N项之和,其中N是从键盘输入的数(N取值范围（1~9）)    n = 5;    sum = 1 + 12 + 123 + 1234 + 12345;15.爱因斯坦出了一道这样的数学题,有一条长阶梯,若每步跨2阶,则最后剩1阶,若每步跨3阶,则最后省2阶,若每步跨5阶,则最后剩4阶,若每步跨6阶，则最后剩5阶只有每次跨7阶,最后才正好1阶不剩,请问在这条阶梯最少多少阶16.设N是一个4位数,它的9倍恰好是它的反序数    例:1234 反序数是432117.求s = a + aa + aaa + aaaa + ... + aa...a的值,其中a是1~9的一个数字(不超过十项)例:a = 3; s = 3 + 33 + 333;18.“百钱百鸡”问题,百钱买百鸡,公鸡1个3块钱,母鸡1个2块钱，小鸡3个一块钱,问公鸡,母鸡,小鸡各多少个19.打印三角形(画8个三角形)* * * * *  * * * *    * * *      * *        *6_1.打印三角形    录入n,n是直角三角形的高    例:n = 3      *     * * *   * * * * *    n = 4      *     * * *   * * * * * * * * * * * * 20.猴子吃桃问题,有一天一只猴子摘了一些桃子,它吃掉一半,又吃了一个,第二天也是这样,到了第十天,只有一个桃子了,求猴子摘了多少桃子21. 4 5 6 7总共能组成多少个不能被4整除的4位数22.求n!(n的阶乘)                        电子版的口算卡随机生成10道100以内的 [加 减 乘 除 取余] 数学题 回答正确的加10分错误不加分(把正确结果打印出来) 然后显示最后成绩。(不用float类型)1&gt;操作数随机  2&gt;运算符随机gcc 1.c当执行./a.out之后,先清屏23 + 70 = 93Bingo!+10分79 * 97 = 0Error!==== 7663...总分 70分做完的同学,如果觉得没有必要修改了,修改成以自己名字命名的.c文件,可以交给组长组长收齐后,打包,发到组长的微信群里17:30之前交齐</code></pre><h1 id="作业"><a href="#作业" class="headerlink" title="作业:"></a>作业:</h1><pre><code>1.把这一周讲过的内容复习一遍2.循环之后的22道练习题3.有时间可以做做pdf里面的编程题4.虚拟机做快照/** * * * ** * * ** * ** ***/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//通过scanf函数录入边长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/** * * * *# * * * *# # * * *# # # * *# # # # **/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//通过scanf函数录入边长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*** ** * ** * * ** * * * **/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//通过scanf函数录入边长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*# # # # *# # # * *# # * * *# * * * ** * * * **/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//通过scanf函数录入边长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; n - i - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*        *      * * *    * * * * *  * * * * * * ** * * * * * * * **/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//通过scanf函数录入边长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n + i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; n - i - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/** * * * * * * * *  * * * * * * *    * * * * *      * * *        *        *       * * *     * * * * *   * * * * * * * * * * * * * * * * */<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">//通过scanf函数录入边长</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">2</span> * n - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &lt; i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;* &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_04day</title>
      <link href="/2023/02/16/embsky/01test/01test_04day/"/>
      <url>/2023/02/16/embsky/01test/01test_04day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-5<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    变量    1.变量的含义    变量就是用来存储数据    2.变量的定义    数据类型变量名;    基本数据类型        整型有符号/无符号short int long        实型有符号float double        字符型有符号/无符号char    sizeof是一个运算符,不是函数        sizeof(数据类型/变量名),以字节为单位    /usr/include/limits.h    变量名        3.变量的初始化    数据类型变量名=数值;    inta=100;    floatf=3.14;    4.变量的使用规则<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------</span><br><span class="line"><span class="built_in">scanf</span></span><br><span class="line"><span class="title function_">scanf</span><span class="params">(<span class="string">&quot;&quot;</span>, )</span>;</span><br><span class="line">-----------------------------</span><br><span class="line">运算符</span><br><span class="line">算术运算符+ - * / %(取余 取模)</span><br><span class="line">关系运算符&gt; &lt; == &gt;= &lt;= !=</span><br><span class="line">逻辑运算符&amp;&amp; || !</span><br><span class="line">a b c</span><br><span class="line">a + b &gt; c &amp;&amp; a + c &gt; b &amp;&amp; b + c &gt; a</span><br><span class="line">a * a + b * b == c * c || a * a + c * c == b * b ||</span><br><span class="line">b * b + c * c == a * a</span><br><span class="line">a == b || a == c || b == c</span><br><span class="line">a == b &amp;&amp; a == c</span><br><span class="line">赋值运算符= += -= *= /= ...</span><br></pre></td></tr></table></figure>作业1.把今天讲过的内容完整的复习一遍2.使用条件运算符和分支语句各解决一遍求闰年问题3.输入三个值判断这三个值是否构成三角形(是否是直角 等腰 等边 普通 不能)4.输入三个整数x,y,z,请把这三个数由从小到大输出5.输入相应的字符打印相应的语句(默认不区分大小写)输入a,打印钟薛高18块钱输入b,打印梦龙8块钱输入c,打印老冰棒1块钱输入d,打印雪莲0.5块钱================================录入成绩0 ~ 59打印不及格60 ~ 69 打印 及格70 ~ 79 打印 中80 ~ 89 打印 良90 ~ 100 打印 优秀</code></pre><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><pre><code>    = += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= |=    int a;    a = 9527;先把赋值运算符右边的项进行计算,再赋值给赋值运算符左边的项        左边的项也叫做(左值)具有存储能力的都可以做左值(变量\指针\数组成员...)常量(整数\字符\字符串...)不能做左值设x为int型变量,则执行以下语句后x = 10;x += x -= x - x;x = x + (x -= x - x)x = x + (x = x - (x - x))x的值为？20<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">a += <span class="number">2</span>;<span class="comment">// =&gt; 等价于 a = a + 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">a *= <span class="number">2</span> + <span class="number">3</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a = a * (2 + 3);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符(? :)"></a>条件运算符(? :)</h1><pre><code>    也是C语言中唯一的一个三目运算符    part.1 ? part.2 : part.3;    如果part.1为真,则会执行part.2的内容,略过part.3    如果part.1为假,则会执行part.3的内容,略过part.2<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">max = a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line">max = a&gt;b?<span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a):<span class="built_in">printf</span>(<span class="string">&quot;b = %d\n&quot;</span>, b);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果a &gt; b为真, max = printf(&quot;a = %d\n&quot;, a);</span></span><br><span class="line"><span class="comment">如果a &gt; b为假, max = printf(&quot;b = %d\n&quot;, b);</span></span><br><span class="line"><span class="comment">注意:max获取的并不是变量的值,而是printf函数的返回值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">max = a &gt; b ? a : b;</span></span><br><span class="line"><span class="comment">如果a &gt; b为真, max = a;</span></span><br><span class="line"><span class="comment">如果a &gt; b为假, max = b;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>, max1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="comment">//max = a &gt; b ? a : b;</span></span><br><span class="line"><span class="comment">//使用条件运算符求三个变量中的最大值</span></span><br><span class="line"></span><br><span class="line">max = (a &gt; b) ? (a&gt;c?a:c) : (b&gt;c?b:c);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">max1 = a &gt; b ? a : b;</span></span><br><span class="line"><span class="comment">max = max1 &gt; c ? max1 : c;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">max = a &gt; b ? a : b;</span></span><br><span class="line"><span class="comment">max = max &gt; c ? max : c;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;max = %d\n&quot;</span>, max);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line"><span class="comment">//通过条件运算符判断year是闰年还是平年</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">能被4整除但是不能被100整除或者能被400整除</span></span><br><span class="line"><span class="comment">就是闰年</span></span><br><span class="line"><span class="comment">2022 2020 2000 1900(平年)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="强制类型转换运算符"><a href="#强制类型转换运算符" class="headerlink" title="强制类型转换运算符"></a>强制类型转换运算符</h1><pre><code>    (数据类型)    可以把目标的数据类型临时的转换成你想转换的数据类型注意 : 强制类型转换运算符并不会修改本身的数据类型注意 : 尤其是以后转换指针时使用比较多<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f = %d\n&quot;</span>, (<span class="type">int</span>)f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h1><pre><code>    ++ --无论是自增还是自减,所改变的数量级都是1注意 :     如果自增的运算自己为独立的一条语句,        那么a++和++a没有任何区别,都是自增1        如果自增的运算和别的语句一起来使用,那么就有区别了        a++ : 先使用a的值做操作,再自增        ++a : 先自增,再使用a的值做操作<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a++ = %d\n&quot;</span>, a++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;做完a++之后a的值是%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;++a = %d\n&quot;</span>, ++a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;做完++a之后a的值是%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a++ &amp;&amp; b++ ? printf(&quot;Hello\n&quot;) : printf(&quot;World\n&quot;);</span></span><br><span class="line"><span class="comment">//a++ &amp;&amp; ++b ? printf(&quot;Hello\n&quot;) : printf(&quot;World\n&quot;);</span></span><br><span class="line"><span class="comment">//++a &amp;&amp; ++b ? printf(&quot;Hello\n&quot;) : printf(&quot;World\n&quot;);</span></span><br><span class="line">++a || b++ ? <span class="built_in">printf</span>(<span class="string">&quot;Hello\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;World\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="分支语句-gt-if"><a href="#分支语句-gt-if" class="headerlink" title="分支语句-&gt;if"></a>分支语句-&gt;if</h1><pre><code>1.if是C语言的关键字2.if的结构语句1if(条件)&#123;    语句2&#125;语句3语句1-&gt;条件的判断(真)-&gt;语句2-&gt;语句3-&gt;结束            |            (假)-&gt;语句3-&gt;结束3.if...else的结构语句1if(条件)&#123;    语句2&#125;else&#123;    语句3&#125;语句4语句1-&gt;条件的判断(真)-&gt;语句2-&gt;语句4-&gt;结束            |            (假)-&gt;语句3-&gt;语句4-&gt;结束4.多分支结构语句1if(条件1)&#123;    语句2&#125;else if(条件2)&#123;    语句3&#125;else if(条件3)&#123;    语句4&#125;else&#123;    语句5&#125;语句6语句1-&gt;条件1的判断(真)-&gt;语句2-&gt;语句6-&gt;结束        |        (假)-&gt;条件2的判断(真)-&gt;语句3-&gt;语句6-&gt;结束                |                (假)-&gt;条件3的判断(真)-&gt;语句4-&gt;语句6-&gt;结束                        |                        (假)-&gt;语句5-&gt;语句6-&gt;结束注意1.if else都是C语言的关键字2.if关键字之后必须要加小括号,小括号内部必须要写条件,不能空者3.在if(条件)之后可以加分号    if(0);    &#123;        printf(&quot;Hello World!\n&quot;);    &#125;    等价于    if(0)    &#123;        ;    &#125;    &#123;        printf(&quot;Hello World!\n&quot;);    &#125;4.在if(条件)之下可以不写大括号(以后写代码即使if的语句只有一条,也要加上大括号)    if(0)        printf(&quot;Hello\n&quot;);        printf(&quot;World!\n&quot;);    等价于    if(0)    &#123;        printf(&quot;Hello\n&quot;);    &#125;    printf(&quot;World!\n&quot;);<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i &lt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(i % 2 == 0)//!(i % 2)</span></span><br><span class="line"><span class="keyword">if</span>(!(i % <span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d这个值是偶数!\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(i % 2 == 0)//!(i % 2)</span></span><br><span class="line"><span class="keyword">if</span>(!(i % <span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d这个值是偶数!\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d这个值是奇数!\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span>) || (year%<span class="number">400</span>==<span class="number">0</span>))</span><br><span class="line"><span class="comment">//2022 2020 2000 1900</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d这一年是闰年!\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d这一年是平年!\n&quot;</span>, year);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello Beijing!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello Changping!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;World!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>练习键入一个整数x,如果小于3则执行x+3操作,如果大于等于3则执行3*x+9如果大于9则执行9*x-10<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;x + 3 = %d\n&quot;</span>, x + <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;9 * x - 10 = %d\n&quot;</span>, <span class="number">9</span> * x - <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3 * x + 9 = %d\n&quot;</span>, <span class="number">3</span> * x + <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(x &lt; 3)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;x + 3 = %d\n&quot;, x + 3);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else if(x &gt;= 3 &amp;&amp; x &lt;= 9)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;3 * x + 9 = %d\n&quot;, 3 * x + 9);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">printf(&quot;9 * x - 10 = %d\n&quot;, 9 * x - 10);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>输入三个值判断这三个值是否构成三角形(是否是直角 等腰 等边 普通 不能)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_05day</title>
      <link href="/2023/02/16/embsky/01test/01test_05day/"/>
      <url>/2023/02/16/embsky/01test/01test_05day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-6<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    赋值运算符= += -= *= /= ...    a += 1 =&gt; a = a + (1)    条件运算符? :        part.1 ? part.2 : part.3;    强制类型转换(数据类型)    求字节大小sizeof    自增自减++ --        变量名++;        ++变量名;    -----------------------    分支结构    if else    if(条件)    &#123;        语句    &#125;    else if(条件)    &#123;        语句    &#125;    else if(条件)    &#123;        语句    &#125;=======================================homework1.(1)打印4 * 5 的 *例:********************(2).打印i * j 的 * (i j 键盘接收)    例:i = 4, j = 5    //4-5 5-6    *****    *****    *****    *****(3).打印i * j 的 * 边框(i j 键盘接收)    例: i = 4, j = 5    *****    *   *    *   *    *****2.打印99乘法表    1 * 1 = 1    1 * 2 = 2 2 * 2 = 4    *    **    ***    ****3.计算1+2+3+4+5+...+n, n是从键盘输入的自然数// 穷举4.要将5张100元的大钞票,换成等值的50 20 10 5小钞票,每种面值至少一张,要多少张,有多少种换法5.有1、2、3、4 4个数字,能组成多少个互不相同且无重复的三位数呢6.有这样的一个等式,xyz+yzz=532,编程求x y z的值7.计算1^2 + 2^2 + 3^2 + ... +10^2的结果(1的平方 + 2的平方)8.输入20个人的成绩,输出不及格的人数(0&lt;=score&lt;60 为不及格)9.随机产生100个三位随机数,找出其中能被 3 5 7整除的数10.打印0~100以内所有的质数(只能被1 和 本身整除的数)11.猜数游戏(随机产生一个1000以内的数,去猜,        如果大了打印猜的大了,        如果小了打印猜的小了,        如果正确打印对的        直到猜对了再结束,每次打印必须打印出猜的次数)12. 把11修改成,程序开始时,先输入需要猜的数的范围n例:(想要猜数的范围是(0~10000) 那么变量n接收键盘上10000        范围都是从0开始)13.----------------------------a + b - 9 = 4+--c -d * e = 4/*-f + g - h = 4===444求a b c d e f g h (0 ～ 12范围内)//除法指的是整除 c % f == 0只有一种答案14.求1+12+123+...前N项之和,其中N是从键盘输入的数(N取值范围（1~9）)    n = 5;    sum = 1 + 12 + 123 + 1234 + 12345;15.爱因斯坦出了一道这样的数学题,有一条长阶梯,若每步跨2阶,则最后剩1阶,若每步跨3阶,则最后省2阶,若每步跨5阶,则最后剩4阶,若每步跨6阶，则最后剩5阶只有每次跨7阶,最后才正好1阶不剩,请问在这条阶梯最少多少阶16.设N是一个4位数,它的9倍恰好是它的反序数    例:1234 反序数是432117.求s = a + aa + aaa + aaaa + ... + aa...a的值,其中a是1~9的一个数字(不超过十项)例:a = 3; s = 3 + 33 + 333;18.“百钱百鸡”问题,百钱买百鸡,公鸡1个3块钱,母鸡1个2块钱，小鸡3个一块钱,问公鸡,母鸡,小鸡各多少个19.打印三角形(画8个三角形)* * * * *  * * * *    * * *      * *        *6_1.打印三角形    录入n,n是直角三角形的高    例:n = 3      *     * * *   * * * * *    n = 4      *     * * *   * * * * * * * * * * * * 20.猴子吃桃问题,有一天一只猴子摘了一些桃子,它吃掉一半,又吃了一个,第二天也是这样,到了第十天,只有一个桃子了,求猴子摘了多少桃子21. 4 5 6 7总共能组成多少个不能被4整除的4位数22.求n!(n的阶乘)/*三角形*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;<span class="comment">//使用a b c变量表示三角形的三个边</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;a, &amp;b, &amp;c);<span class="comment">//通过scanf函数录入三个边</span></span><br><span class="line"><span class="comment">/*if error*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((a+b&gt;c) &amp;&amp; (a+c&gt;b) &amp;&amp; (b+c&gt;a))<span class="comment">//罗列普通三角形的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a*a+b*b==c*c) || </span><br><span class="line">(a*a+c*c==b*b) || </span><br><span class="line">(b*b+c*c==a*a))<span class="comment">//罗列直角三角形的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成直角三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a==b || a==c || b==c)<span class="comment">//罗列等腰三角形的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a==b &amp;&amp; a==c)<span class="comment">//罗列等边三角形的条件</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成等边三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成等腰三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;可以构成普通三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;不能构成三角形!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*    从小到大打印*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line"><span class="comment">//x获取三个值中的最小值 z获取三个值中的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &gt; y)</span><br><span class="line">&#123;</span><br><span class="line">tmp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &gt; z)</span><br><span class="line">&#123;</span><br><span class="line">tmp = x;</span><br><span class="line">x = z;</span><br><span class="line">z = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(y &gt; z)</span><br><span class="line">&#123;</span><br><span class="line">tmp = y;</span><br><span class="line">y = z;</span><br><span class="line">z = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&lt;%d&lt;%d\n&quot;</span>, x, y, z);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*输入相应的字符打印相应的语句(默认不区分大小写)输入a,打印钟薛高18块钱输入b,打印梦龙8块钱输入c,打印老冰棒1块钱输入d,打印雪莲0.5块钱*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">0</span>;<span class="comment">//用来接收录入的字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;A&#x27;</span> || c == <span class="string">&#x27;a&#x27;</span>)<span class="comment">//if(c == 65 || c == 97)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;钟薛高18块钱\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;B&#x27;</span> || c == <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;梦龙8块钱\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;C&#x27;</span> || c == <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;老冰棒1块钱\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;D&#x27;</span> || c == <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;雪莲0.5块钱\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;录入失败,请重新录入!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h1><pre><code>    switch(也有程序员会叫做开关语句)1.switch case default都是C语言的关键字2.switch语句的结构    语句1;    switch(变量)    &#123;        case 整常量1: 语句2;        case 整常量2: 语句3;        default : 语句4;    &#125;    语句5;语句1-&gt;变量和整常量1是否相等-&gt;语句2-&gt;语句3-&gt;语句4-&gt;语句5-&gt;end        |        不相等-&gt;变量和整常量2是否相等-&gt;语句3-&gt;语句4-&gt;语句5-&gt;end                    |                    不相等-&gt;语句4-&gt;语句5-&gt;end3.整常量就是整数或者可以表示为整数的内容(字符)4.在同一个switch...case结构中整常量不能重复5.在switch语句中加入break关键字    语句1;    switch(变量)    &#123;        case 整常量1: 语句2; break;        case 整常量2: 语句3; break;        default : 语句4; break;    &#125;    语句5;语句1-&gt;变量和整常量1的判断-&gt;语句2-&gt;break-&gt;语句5-&gt;结束        |        (不相等)-&gt;变量和整常量2的判断-&gt;语句3-&gt;break-&gt;语句5-&gt;结束                    |                    (不相等)-&gt;语句4-&gt;break-&gt;语句5-&gt;结束6.在switch语句中执行break会跳出switch语句输入相应的字符打印相应的语句(默认不区分大小写)输入a,打印钟薛高18块钱输入b,打印梦龙8块钱输入c,打印老冰棒1块钱输入d,打印雪莲0.5块钱<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="built_in">printf</span>(<span class="string">&quot;111111\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : <span class="built_in">printf</span>(<span class="string">&quot;222222\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span> : <span class="built_in">printf</span>(<span class="string">&quot;333333\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span> : <span class="built_in">printf</span>(<span class="string">&quot;444444\n&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;ERROR!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;1111111111111\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;2222222222222\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;3333333333333\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;4444444444444\n&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;ERROR!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;1111111111111\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;2222222222222\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;3333333333333\n&quot;</span>);</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;4444444444444\n&quot;</span>);</span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">printf</span>(<span class="string">&quot;ERROR!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;钟薛高18块钱\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;梦龙8块钱\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;老冰棒1块钱\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span> : <span class="built_in">printf</span>(<span class="string">&quot;雪莲0.5块钱\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>  : <span class="built_in">printf</span>(<span class="string">&quot;ERROR\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*录入成绩0 ~ 59打印不及格60 ~ 69 打印 及格70 ~ 79 打印 中80 ~ 89 打印 良90 ~ 100 打印 优秀*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line"><span class="comment">//if error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(score / <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0.</span><span class="number">.5</span> : <span class="built_in">printf</span>(<span class="string">&quot;不及格!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span> : <span class="built_in">printf</span>(<span class="string">&quot;及格!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span> : <span class="built_in">printf</span>(<span class="string">&quot;中!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span> : <span class="built_in">printf</span>(<span class="string">&quot;良!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span> :</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>: <span class="built_in">printf</span>(<span class="string">&quot;优秀!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;score);</span><br><span class="line"><span class="comment">//if error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span> ... <span class="string">&#x27;9&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span> ... <span class="string">&#x27;f&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;Hello Beijing!\n&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><pre><code>1.for是C语言的关键字2.for循环的使用方法语句1for(循环变量的赋值; 循环变量的控制; 循环变量的变化)&#123;    循环的语句&#125;语句2                    语句1                        |                        V                循环变量的赋值                        |                        V        |--------循环变量的控制&lt;---------        ||循环变量的变化        VV^        假真|        |循环的语句-------&gt;-------        |        ----------------                        |                        V                    语句2在循环中不要改变循环变量的值否则会影响循环次数<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i += <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for(i = 10; i &lt; 5; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello World!\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for(i = 0; i &lt; 5; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello World!\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, i++);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ++i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;==== i = %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//打印0 ~ 100以内奇数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i+=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//求1+2+3+...+100? 5050</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += i;<span class="comment">// sum = sum + i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//求水仙花数(把水仙花数打印出来)</span></span><br><span class="line"><span class="comment">//xyz == x*x*x + y*y*y + z*z*z</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>, s = <span class="number">0</span>, g = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">b = i / <span class="number">100</span>;</span><br><span class="line">s = i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">g = i % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(i == (b*b*b) + (s*s*s) + (g*g*g))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//求水仙花数(把水仙花数打印出来)</span></span><br><span class="line"><span class="comment">//xyz == x*x*x + y*y*y + z*z*z</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">0</span>, s = <span class="number">0</span>, g = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(b = <span class="number">1</span>; b &lt; <span class="number">10</span>; b++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(s = <span class="number">0</span>; s &lt; <span class="number">10</span>; s++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(g = <span class="number">0</span>; g &lt; <span class="number">10</span>; g++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((b*b*b)+(s*s*s)+(g*g*g)==b*<span class="number">100</span>+s*<span class="number">10</span>+g)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%d%d\n&quot;</span>,b,s,g);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> hour = <span class="number">0</span>, min = <span class="number">0</span>, sec = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//1s = 1000ms = 1000000us = 1000000000ns</span></span><br><span class="line"><span class="keyword">for</span>(hour = <span class="number">0</span>; hour &lt; <span class="number">24</span>; hour++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(min = <span class="number">0</span>; min &lt; <span class="number">60</span>; min++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(sec = <span class="number">0</span>; sec &lt; <span class="number">60</span>; sec++)</span><br><span class="line">&#123;</span><br><span class="line">system(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02d : %02d : %02d\n&quot;</span>, hour,min,sec);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//管理行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)<span class="comment">//管理列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%d %d]&quot;</span>, i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//管理行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)<span class="comment">//管理列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">* *</span><br><span class="line">* * *</span><br><span class="line">* * * *</span><br><span class="line">* * * * *</span><br></pre></td></tr></table></figure>*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)<span class="comment">//管理行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= i; j++)<span class="comment">//管理列</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d X %d = %2d &quot;</span>, j, i, i * j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_02day</title>
      <link href="/2023/02/16/embsky/01test/01test_02day/"/>
      <url>/2023/02/16/embsky/01test/01test_02day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-1<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    1.演示了一遍安装虚拟操作系统的步骤        1)虚拟机软件-&gt;VMWare        2)Ubuntu的镜像-&gt;网易镜像 清华镜像        3)需要手动分区        4)安装软件之前需要切换软件源    2.终端        1)修改了终端的字体字号        2)终端的配色方案        3)分析终端提示符        4)命令            cd            ls            pwd            touch            mkdir            rm            cp            mv            cat            tar</code></pre><h1 id="二-编辑器与编译器"><a href="#二-编辑器与编译器" class="headerlink" title="二.编辑器与编译器"></a>二.编辑器与编译器</h1><pre><code>    编辑器是用来编写程序的    编译器是用来编译程序的    在Linux环境中编辑器有很多种 : gedit vi vim emacs    在Linux环境中编译器有很多种 : gcc cc arm-linux-gcc    主要讲 vim 和 gcc 的使用    1.编辑器vim的使用        vim之所以被称之为强大的编辑器是因为本身支持很多的模式        命令模式 命令行模式(底行模式) 编辑模式(插入模式) 可视 可视块 可视行        注意 : 不要使用vim打开目录文件        注意 : 用vim编写完成的文件内容要用正常的保存退出方式,不要直接关闭终端                否则会生成交换文件(交换文件是隐藏文件)                    vim hello.c                        |        按iIoOaAV按:    编辑模式&lt;----------命令模式----------&gt;命令行模式            ---------&gt;&lt;---------        按esc按esc或者删掉:    命令行模式的操作        w保存        q退出        wq保存并且退出    大家在终端中,执行 vim ~/.vimrc    先进入到编辑模式    set ai    set si    set ts=4    set sw=4    set nu    保存退出    2.编译器gcc        注意 : gcc编译器不检查段错误(操作内存不当引起的)    gcc hello.c        1)编译之后终端什么提示都没有,代表程序没有语法错误,会生成可执行文件        2)编译之后终端报出警告,代表程序有些问题,但不是致命的,会生成可执行文件        3)编译之后终端报出错误,代表程序100%有问题,并且是致命的,                不会生成可执行文件    默认的可执行文件的名字是a.out        指定可执行文件的名字        gcc -o 可执行文件名 .c文件    要求大家在编译程序时加入-Wall选项,可以把所有警告列出    gcc -Wall hello.c    3.执行可执行文件        ./a.out</code></pre><h1 id="三-man手册-帮助手册"><a href="#三-man手册-帮助手册" class="headerlink" title="三.man手册(帮助手册)"></a>三.man手册(帮助手册)</h1><pre><code>    有困难,找男人    man 你要查找的东西    在man手册界面中键盘上下按键可以翻阅    按 q 键可以退出man手册=====================================作业1.修改自己的vim配置文件=====================================#include &lt;stdio.h&gt;/*#include面试题1.在C语言中以#开头的内容都是预处理2.从.c文件编译成可执行程序,需要经历哪些阶段?    预处理-&gt;编译-&gt;汇编-&gt;链接3.在C语言中预处理都包含哪些操作?    文件包含 宏定义 条件编译4.在包含头文件时可以使用双引号或者尖括号,有啥区别?    尖括号 : 默认会从指定的目录(/usr/include)中查找头文件,            如果找不到会报错    双引号 : 默认会从当前目录中查找头文件,            如果找不到再从指定目录中查找头文件,            如果再找不到报错stdio.h标准输入输出的头文件*/int main(void)/*    main函数(也叫做主函数)    main函数是程序的入口    当执行可执行文件时,会从main函数进入,按照从上往下的顺序    逐行逐行执行代码,最后从main函数退出*/&#123;    printf(&quot;Hello World!&quot;);    /*    printf是一个函数(功能)    是用来打印输出的(可以把双引号引起来的内容打印到终端中)    由于printf函数是别人实现的功能,所以需要包含人家的头文件    */&#125;/*1.在C语言中有字符串,有没有字符串类型?    没有字符串类型printf(&quot;Hello World!&quot;);    在C语言中双引号引起来的内容叫做字符串    字符串都是由一个一个单一的字符组成的    在C语言中单引号引起来的内容叫做字符    字符串最后都有一个结束标志&#39;\0&#39;(尾0)例子:    &quot;a&quot; 和 &#39;a&#39;    不一样,&quot;a&quot;是字符串,&#39;a&#39;是字符    &quot;a&quot;是由&#39;a&#39; + &#39;\0&#39;组成======================================    &quot;0&quot; 和 &#39;0&#39; 和 0    不一样.&quot;0&quot;是字符串,&#39;0&#39;是字符,0是整数    &quot;0&quot;是由&#39;0&#39; + &#39;\0&#39;组成练习:在终端中打印出一个 %*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="comment">//printf(&#x27;Hello World!&#x27;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*printf打印输出的特殊内容-&gt;转义字符转义字符也是字符    转义字符是由一个 \ + 某一个东西组成的    转义字符除了有ASCII值以外还有另外的一层含义ASCII(描述的就是字符和数字的对应关系)常用的ASCII表一共有128个字符(对应数字0 - 127)记住特殊的ASCII值    字符ASCII值    &#39;\0&#39;0    &#39;\n&#39;10    &#39;0&#39;48    &#39;A&#39;65    &#39;a&#39;97转义字符    字符ASCII值含义    &#39;\0&#39;0字符串的结束标志    &#39;\n&#39;10换行符            会把光标换到下一行行首的位置    &#39;\r&#39;13回车符            会让光标回到当前行行首的位置    &#39;\t&#39;9水平制表符            会补一个tab    &#39;\v&#39;11垂直制表符            光标会换到下一行当前列的位置*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;123\v456\v789\v&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;123\t456\t789\t&quot;</span>);</span><br><span class="line"><span class="comment">//printf(&quot;sdlpmdaspmdpasmdpasmoHello World!\r&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello World!\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello\0World!&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="comment">//printf(&#x27;Hello World!&#x27;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>/*printf打印输出的特殊内容-&gt;标准化输出格式    标准化输出格式只是一种输出格式,并不是字符    是由一个 % + 某一个东西组成的    %叫做占位符    %d十进制整数输出    %o八进制输出    %x十六进制输出    %f小数输出(默认打印输出小数点后六位)    %.2f默认输出小数点后2位    %c单一字符输出    %s字符串输出    %p输出地址    %%打印一个百分号*/<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf(&quot;%d&quot;, 9527);</span></span><br><span class="line"><span class="comment">//printf(&quot;%x\n&quot;, 100);</span></span><br><span class="line"><span class="comment">//printf(&quot;%o\n&quot;, 100);</span></span><br><span class="line"><span class="comment">//printf(&quot;%f\n&quot;, 3.14);</span></span><br><span class="line"><span class="comment">//printf(&quot;%.2f\n&quot;, 3.14);</span></span><br><span class="line"><span class="comment">//printf(&quot;%c\n&quot;, &#x27;%&#x27;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%%\n&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, &quot;Hello&quot;);</span></span><br><span class="line"><span class="comment">//printf(&quot;%f\n&quot;, 100);</span></span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;, 3.14);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c-%d\n&quot;</span>, <span class="number">100</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_03day</title>
      <link href="/2023/02/16/embsky/01test/01test_03day/"/>
      <url>/2023/02/16/embsky/01test/01test_03day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-7-4<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-温故知新"><a href="#一-温故知新" class="headerlink" title="一.温故知新"></a>一.温故知新</h1><pre><code>    嵌入式方向    需要使用Linux环境(红帽 centos Ubuntu SUSE ...)    虚拟机安装虚拟操作系统    熟悉环境-&gt;终端的熟悉    打开终端的方式    终端提示符    常用命令    cd ls pwd touch mkdir rm cp mv cat tar    编辑器和编译器    vim gcc    ./a.out    #include &lt;stdio.h&gt;1.在C语言中以#开头的内容是预处理的操作2.预处理都包含哪些操作    条件编译 宏定义 文件包含3.把.c文件编译成可执行文件,需要包含哪些操作?    预处理-&gt;编译-&gt;汇编-&gt;链接4.头文件包含可以使用尖括号或者双引号,有啥区别?    int main(void)    &#123;        printf(&quot;Hello World!&quot;);        在C语言中双引号引起来的内容是字符串        字符串是由一个一个单一的字符组成,最后有一个结束标志&#39;\0&#39;        ASCII        &#39;\0&#39;0        &#39;\n&#39;10        &#39;0&#39;48        &#39;A&#39;65        &#39;a&#39;97        标准化输出格式        %d %o %x %f %c %s %p %%    &#125;        printf(&quot;%d\n&quot;, 3.14);        printf(&quot;%f\n&quot;, 100);        printf(&quot;%.2f\n&quot;, 3.14);    printf(&quot;3.14\n&quot;);</code></pre><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><pre><code>算术运算符+ - * / %关系运算符&gt; &lt; == &gt;= &lt;= !=逻辑运算符&amp;&amp; || !赋值运算符= += -= *= /= %= &lt;&lt;= &gt;&gt;= &amp;= ...位运算符&lt;&lt; &gt;&gt; &amp; | ~ ^条件运算符? :下标运算符[]分量运算符. -&gt;指针运算符&amp; *强制类型转换(数据类型)求字节大小sizeof()自增自减运算符++ --</code></pre><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><pre><code>1.变量的含义    变量就是用来存储数据的    (数据会存在内存中&lt;以二进制补码的形式存储&gt;)2.变量的定义    数据类型 变量名;    charc;    inti;    floatf;    1)基本的数据类型    整型有符号/无符号short int long    实型有符号float(单精度) double(双精度)    字符型有符号/无符号char    2)通过sizeof测试数据类型占用空间的大小    注意 : sizeof不是函数,是一个运算符    sizeof运算的结果是以字节为单位    1个字节(byte) = 8个位(bit)    1个字 = 2/4个字节    注意使用sizeof运算符测试出来的结果并不是唯一的    和硬件以及操作系统的位数有关(和32bit或者64bit有关)    3)数据类型的大小以及范围在头文件中有记录    /usr/include/limits.h    4)变量命名的要求        1&gt;变量名是以数字 字母 下划线组成,但是不能以数字开头        2&gt;变量名区分大小写            int a, A;//a和A是两个变量        3&gt;变量名不能和C语言的关键字重复        4&gt;变量名要做到见名生义3.变量的初始化    数据类型变量名=数值;    charc=&#39;A&#39;;    inti=9527;    floatf=3.14;4.变量的定义和变量的初始化的区别    变量的定义 : 只是给变量分配相应的存储单元,                    变量的初始值是垃圾值    变量的初始化 : 除了给变量分配相应的存储单元,                    并且会给变量赋初始值注意 : 以后写程序定义的变量一定要有初始化5.变量的使用规则    1)变量一定是先定义再使用    2)便于编译时检查错误,不同类型的变量有不同的运算要求    3)当变量在定义时,将来在内存中占用的大小就已经决定了<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;<span class="comment">//char short int long float double</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(char) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(short) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(int) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(long) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(float) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(double) = %ld\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> f = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f = %d\n&quot;</span>, f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//int i = 100;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf(&quot;i = %f\n&quot;, i);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="scanf函数的使用"><a href="#scanf函数的使用" class="headerlink" title="scanf函数的使用"></a>scanf函数的使用</h1><pre><code>    函数功能 : 用来进行录入的函数(可以接收键盘录入的数值)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">9527</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="comment">//需求:定义三个变量,通过scanf函数录入年月日</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line"><span class="comment">//scanf(&quot;%d\n&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">//printf(&quot;请输入a变量的值:&quot;);</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;, &amp;a);</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">1.在scanf函数的双引号中只写标准化输出格式即可</span></span><br><span class="line"><span class="comment">2.在scanf函数的双引号中千万不要加换行符</span></span><br><span class="line"><span class="comment">3.在scanf函数的双引号之后,写的参数必须是地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year = <span class="number">0</span>, month = <span class="number">0</span>, day = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入年-月-日 : &quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d年%d月%d日!\n&quot;</span>, year, month, day);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><pre><code>    +加法    -减法    *乘法    /除法(取商)    %除法(取余)注意 : 除法运算中除数不能为0    a ➗ b = c ...... da被除数b除数c商d余-------------------------如果a &lt; b, c = 0, d = a面试题1.两个变量值的交换    1)可以定义第三个中间变量,通过三个变量和两个数值可以交换    2)可以通过算术运算符完成交换2.    atoi()        &quot;123&quot;-&gt;123    itoa()        9527-&gt;&quot;9527&quot;        1-&gt;&#39;1&#39;        1 + &#39;0&#39; = &#39;1&#39;        char arr[5] = &#123;0&#125;;        arr[0] = 9527 / 1000 = 9 + &#39;0&#39; = &#39;9&#39;        arr[1] = 9527 / 100 % 10 = 5 + &#39;0&#39; = &#39;5&#39;        arr[2] = 9527 / 10 % 10 = 2 + &#39;0&#39; = &#39;2&#39;        arr[3] = 9527 % 10 = 7 + &#39;0&#39; = &#39;7&#39;        arr[4] = &#39;\0&#39;;<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a + b = %d\n&quot;</span>, a + b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a - b = %d\n&quot;</span>, a - b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a * b = %d\n&quot;</span>, a * b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a / b = %d\n&quot;</span>, a / b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a %% b = %d\n&quot;</span>, a % b);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">printf(&quot;c = %d\n&quot;, c);</span></span><br><span class="line"><span class="comment">c = a + b;</span></span><br><span class="line"><span class="comment">printf(&quot;c = %d\n&quot;, c);</span></span><br><span class="line"><span class="comment">c = a - b;</span></span><br><span class="line"><span class="comment">printf(&quot;c = %d\n&quot;, c);</span></span><br><span class="line"><span class="comment">c = a * b;</span></span><br><span class="line"><span class="comment">printf(&quot;c = %d\n&quot;, c);</span></span><br><span class="line"><span class="comment">c = a / b;</span></span><br><span class="line"><span class="comment">printf(&quot;c = %d\n&quot;, c);</span></span><br><span class="line"><span class="comment">c = a % b;</span></span><br><span class="line"><span class="comment">printf(&quot;c = %d\n&quot;, c);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d&quot;</span>, &amp;a, &amp;b);<span class="comment">//13 - 7 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">a = a + b;<span class="comment">// a = 13 + 7 = 20</span></span><br><span class="line">b = a - b;<span class="comment">// b = 20 - 7 = 13</span></span><br><span class="line">a = a - b;<span class="comment">// a = 20 - 13 = 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">tmp = a;//把变量a的值赋值给tmp变量</span></span><br><span class="line"><span class="comment">a = b;//把变量b的值赋值给a变量</span></span><br><span class="line"><span class="comment">b = tmp;//把变量tmpb的值赋值给b变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d b = %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);<span class="comment">//9527</span></span><br><span class="line"><span class="comment">//录入一个4位的正整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;千位 : %d\n&quot;</span>, i / <span class="number">1000</span>);<span class="comment">//9</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;百位 : %d\n&quot;</span>, i / <span class="number">100</span> % <span class="number">10</span>);<span class="comment">//5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;十位 : %d\n&quot;</span>, i / <span class="number">10</span> % <span class="number">10</span>);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;个位 : %d\n&quot;</span>, i % <span class="number">10</span>);<span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><pre><code>    &gt;是否大于    &lt;是否小于    ==是否相等(一个等号是赋值运算符)    &gt;=是否大于等于    &lt;=是否小于等于    !=是否不等于注意:一个表达式经过关系运算符的运算,最终会生成真假值    0为假,非0为真(默认的真值是1)一般关系运算符的运算会配合分支语句和循环语句一起使用    分支语句和循环语句就是用运算之后的真假值做操作<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">13</span>, b = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a &gt; b = %d\n&quot;</span>, a &gt; b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a &lt; b = %d\n&quot;</span>, a &lt; b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a == b = %d\n&quot;</span>, a == b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a &gt;= b = %d\n&quot;</span>, a &gt;= b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a &lt;= b = %d\n&quot;</span>, a &lt;= b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a != b = %d\n&quot;</span>, a != b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><pre><code>    &amp;&amp;逻辑与(全真才为真,有假就是假)        表达式1 &amp;&amp; 表达式2        表达式1表达式2整体        真真真        真假假        假真假        假假假    ||逻辑或(全假才为假,有真就是真)        表达式1 || 表达式2        表达式1表达式2整体        真真真        真假真        假真真        假假假    !逻辑非(真假互换)        !(表达式)        表达式整体        真假        假真====================================    表达式1 &amp;&amp; 表达式2    如果表达式1为真,会执行表达式2的内容    如果表达式1为假,不会执行表达式2的内容    表达式1 || 表达式2    如果表达式1为真,不会执行表达式2的内容    如果表达式1为假,会执行表达式2的内容====================================已知有三个变量a b c存储的是非负的正整数1.列出满足可以构成三角形的条件2.已知a b c满足构成三角形的条件,列出满足构成直角三角形条件3.已知a b c满足构成三角形的条件,列出满足构成等腰三角形条件4.已知a b c满足构成三角形的条件,列出满足构成等边三角形条件====================================<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01test_01day</title>
      <link href="/2023/02/16/embsky/01test/01test_01day/"/>
      <url>/2023/02/16/embsky/01test/01test_01day/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;<br>2022-6-30<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="一-课程介绍"><a href="#一-课程介绍" class="headerlink" title="一.课程介绍"></a>一.课程介绍</h1><pre><code>    物联网嵌入式方向        拉齐基础        Linux基础(终端的使用/命令/编译器/编辑器/软件安装/服务搭建)        Linux下的C语言        数据结构(链表/栈式/队列/树/哈希表)        ----------------------------------------------------------        Linux下的高编(文件IO/信号/进程/线程/通信/网络socket)        QT(图形化界面开发)        ----------------------------------------------------------        智能终端设备(单片机&lt;裸板驱动开发&gt;)                        STM32F103RBT6        边缘计算设备(高端ARM开发板)</code></pre><h1 id="二-安装开发环境"><a href="#二-安装开发环境" class="headerlink" title="二.安装开发环境"></a>二.安装开发环境</h1><pre><code>    1.双系统        1)系统盘            软碟通 + 镜像        2)需要在电脑硬盘上预留100G空间    2.安装虚拟机        1)虚拟机软件            VMWare        2)镜像            网易镜像 清华镜像    3.分区            注意:一定要手动分区            8192Mb交换分区(虚拟内存)            把剩余空间的一半/home            把剩余空间/</code></pre><h1 id="三-介绍终端"><a href="#三-介绍终端" class="headerlink" title="三.介绍终端"></a>三.介绍终端</h1><pre><code>    在Linux下一切皆文件    终端上的命令可以代替鼠标的所有操作    1.打开终端的方式        1)鼠标右键-&gt;打开终端        2)显示应用程序-&gt;全部-&gt;打开终端        3)快捷键            ctrl + alt + t    2.设置终端        1)修改终端字体字号        2)修改终端配色方案    3.终端提示符        root@zack-machine:/home/zack#        @之前的位置当前登陆终端的用户        @分割符号        @之后 :之前主机名        :分割符号        :之后 #或$之前当前终端所在目录的路径            如果出现的是~指的是家目录            每个用户都会有自己的家目录            用户家目录的路径            root/root//超级用户            zack/home/zack            tom/home/tom            jerry/home/jerry            root是超级用户所以它的家目录是/root            其他用户属于普通用户所以家目录是/home/和用户名同名的目录        # 或者 $用来提示用户级别            #代表当前登陆终端的用户是超级用户            $代表当前登陆终端的用户是普通用户==================================关键词1.根目录    是Linux最根本的路径2.家目录    取决于用户    root用户的家目录/root    普通用户的家目录/home/和用户名同名的目录3.桌面    桌面在家目录中    root用户的桌面/root/桌面    普通用户的桌面/home/和用户名同名的目录/桌面        cd /桌面ERROR    cd /home/桌面ERROR    cd /home/zack/桌面Bingo    cd ~/桌面Bingo4.绝对路径和相对路径    绝对路径 : 从根目录出发,一层一层递进        /home/zack/桌面        如果显示出来的路径最左边是 / 那么这个路径就是绝对路径    相对路径 : 除了绝对路径都是相对路径        ~/桌面        如果显示出来的路径最左边不是 / 那么这个路径就是相对路径    在显示的路径中只有最左边出现的是 / 才是根目录的意思        之后再出现的/都是指的什么什么目录之下====================================================================练习1.zack@abc-test:~$    zack用户名    abc-test主机名    ~家目录(/home/zack)    $普通用户2.abc@abc-test:~$    /home/abc3.tom@abc-test:/home/zack#4.jerry@abc-test:/$==================================    4.终端执行的简单命令        终端提示符 $ 命令        终端提示符 $ 命令 选项        终端提示符 $ 命令 参数        终端提示符 $ 命令 选项 参数    cd(改变目录/切换目录)        1) cd回到家目录        2) cd 目录名切换到该目录中(已有的目录名)        3) cd 路径可以是绝对的也可以是相对的,但必须是正确的路径        4) cd ..切换到上一级目录    ls(显示文件名)        1) ls显示当前目录下的文件名        2) ls 文件名可以显示文件名        3) ls 目录名可以显示该目录下的文件名        4) ls -a可以显示所有文件包括隐藏文件            (在Linux中以.开头的文件都是隐藏文件)            .表示的是当前目录            ..表示的是上一级目录        5) ls -l以长格式显示文件内容        -rwxrwxr-x  1 zack zack  8352 6月  22 20:20 a.out        drwxrwxr-x  4 zack zack  4096 12月 27  2021 eastpart.1文件的类型            在Linux下一共有7种文件类型            -普通文件            d目录文件            c字符设备文件            b块设备文件            s网络套接字文件            p管道文件            l链接文件(符号链接文件)part.2文件的权限            普通的权限            rwxrwxr-x            文件所有者权限文件所属组权限其他用户权限            775            r可读4            w可写2            x可执行1            -该处无权限0part.3文件链接数part.4文件所属者part.5文件所属组part.6文件字节数part.7文件最后修改时间part.8文件名        pwd显示当前所在目录的绝对路径                touch(创建普通文件)            1) touch 文件名创建普通文件            2) touch 已有的文件名会修改文件最后修改时间            3) touch 文件名 文件名创建多个文件        mkdir(创建目录文件)            1) mkdir 目录名创建目录文件            2) mkdir 已有的目录名报错            3) mkdir 目录名 目录名创建多个目录        rm(删除文件)            1) rm 普通文件的文件名删除普通文件            2) rm -r 目录文件名删除目录文件(-r递归的操作)                                                (-f强制的操作)            3) rm *.c删除所有以.c结尾的文件                注意 : rm -rf *        cp(拷贝文件)            1) cp 源文件文件名 目标文件文件名            2) cp -r 源目录名 目标目录名(-r是递归的操作)        mv(剪切文件/移动文件/改名字)            1) mv 源文件文件名 目标文件文件名            注意 : 剪切目录时不需要加 -r 的操作        cat(查看普通文件的文件内容)        tar(压缩和解压缩的命令)            压缩            tar cvf 最终生成的压缩包的名字.tar 压缩的文件            解压缩            tar xvf tar包的名字            tar xvf tar包的名字 -C 目录                (默认会解压缩到当前目录下)                -C是用来指定目录的=====================================</code></pre><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><pre><code>1.把今天讲过的内容复习一遍(千万不要小看复习的力量)2.重装虚拟操作系统3.查找如何查看文件大小=====================================小操作1.打开终端 ctrl + alt + t2.打开终端标签页 ctrl + shift + t3.切换终端标签页 ctrl + pgup/pgdn4.临时放大终端字体 ctrl + shift + +5.临时缩小终端字体 ctrl + -6.终端清屏 ctrl + l / clear7.查看历史命令 history8.终端复制 鼠标选中就是复制9.终端粘贴 鼠标中轴按键10.终端中多敲tab,可以补齐=====================================</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 01test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
